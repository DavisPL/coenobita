[DEBUG] Trying to get func ty of defid DefId(0:2717 ~ itertools[f416]::adaptors::coalesce::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2718 ~ itertools[f416]::adaptors::coalesce::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:161 ~ itertools[f416]::adaptors::coalesce::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:181 ~ itertools[f416]::adaptors::coalesce::CountItem::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10436 ~ core[7d5a]::result::{impl#0}::unwrap_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ itertools[f416]::adaptors::coalesce::CoalescePredicate::coalesce_pair)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ itertools[f416]::adaptors::coalesce::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ itertools[f416]::adaptors::coalesce::{impl#2}::size_hint).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:79:11: 79:14 (#0), res: Local(HirId(DefId(0:164 ~ itertools[f416]::adaptors::coalesce::{impl#2}::size_hint).31)), segments: [PathSegment { ident: low#0, hir_id: HirId(DefId(0:164 ~ itertools[f416]::adaptors::coalesce::{impl#2}::size_hint).38), res: Local(HirId(DefId(0:164 ~ itertools[f416]::adaptors::coalesce::{impl#2}::size_hint).31)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:79:11: 79:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ itertools[f416]::adaptors::coalesce::{impl#2}::size_hint).39), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:79:17: 79:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:79:17: 79:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9672 ~ core[7d5a]::option::{impl#0}::unwrap_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:181 ~ itertools[f416]::adaptors::coalesce::CountItem::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ itertools[f416]::adaptors::coalesce::CoalescePredicate::coalesce_pair)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:95:52: 95:58 (#0), res: Local(HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).6)), segments: [PathSegment { ident: fn_acc#0, hir_id: HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).86), res: Local(HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:95:52: 95:58 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:98:13: 98:19 (#0), res: Local(HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).6)), segments: [PathSegment { ident: fn_acc#0, hir_id: HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).100), res: Local(HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:98:13: 98:19 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:95:52: 95:58 (#0), res: Local(HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).6)), segments: [PathSegment { ident: fn_acc#0, hir_id: HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).86), res: Local(HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:95:52: 95:58 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:98:13: 98:19 (#0), res: Local(HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).6)), segments: [PathSegment { ident: fn_acc#0, hir_id: HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).100), res: Local(HirId(DefId(0:165 ~ itertools[f416]::adaptors::coalesce::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:98:13: 98:19 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:185 ~ itertools[f416]::adaptors::coalesce::{impl#4}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ itertools[f416]::adaptors::coalesce::{impl#5}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:148:9: 148:13 (#0), res: Local(HirId(DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair).9), res: Local(HirId(DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:148:9: 148:13 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:148:9: 148:13 (#0), res: Local(HirId(DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair).9), res: Local(HirId(DefId(0:197 ~ itertools[f416]::adaptors::coalesce::{impl#6}::coalesce_pair).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:148:9: 148:13 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:198 ~ itertools[f416]::adaptors::coalesce::coalesce)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] SelfTy refers to an ADT!
[DEBUG] SelfTy refers to an ADT!
[DEBUG] Trying to get func ty of defid DefId(0:2725 ~ itertools[f416]::adaptors::coalesce::{impl#12}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2726 ~ itertools[f416]::adaptors::coalesce::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:212 ~ itertools[f416]::adaptors::coalesce::{impl#8}::coalesce_pair)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:208 ~ itertools[f416]::adaptors::coalesce::DedupPredicate::dedup_pair)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2730 ~ itertools[f416]::adaptors::coalesce::{impl#13}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2732 ~ itertools[f416]::adaptors::coalesce::{impl#14}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:199:9: 199:10 (#0), res: Local(HirId(DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair).4)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair).9), res: Local(HirId(DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:199:9: 199:10 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:199:14: 199:15 (#0), res: Local(HirId(DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair).6)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair).11), res: Local(HirId(DefId(0:215 ~ itertools[f416]::adaptors::coalesce::{impl#9}::dedup_pair).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:199:14: 199:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:205:9: 205:13 (#0), res: Local(HirId(DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair).9), res: Local(HirId(DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:205:9: 205:13 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:205:9: 205:13 (#0), res: Local(HirId(DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair).9), res: Local(HirId(DefId(0:219 ~ itertools[f416]::adaptors::coalesce::{impl#10}::dedup_pair).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:205:9: 205:13 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ itertools[f416]::adaptors::coalesce::dedup_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] SelfTy refers to an ADT!
[DEBUG] SelfTy refers to an ADT!
[DEBUG] Trying to get func ty of defid DefId(0:225 ~ itertools[f416]::adaptors::coalesce::dedup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ itertools[f416]::adaptors::coalesce::dedup_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2739 ~ itertools[f416]::adaptors::coalesce::{impl#15}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2742 ~ itertools[f416]::adaptors::coalesce::{impl#16}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ itertools[f416]::adaptors::coalesce::{impl#11}::coalesce_pair)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:208 ~ itertools[f416]::adaptors::coalesce::DedupPredicate::dedup_pair)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:233 ~ itertools[f416]::adaptors::coalesce::{impl#11}::coalesce_pair).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:255:17: 255:18 (#0), res: Local(HirId(DefId(0:233 ~ itertools[f416]::adaptors::coalesce::{impl#11}::coalesce_pair).4)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:233 ~ itertools[f416]::adaptors::coalesce::{impl#11}::coalesce_pair).28), res: Local(HirId(DefId(0:233 ~ itertools[f416]::adaptors::coalesce::{impl#11}::coalesce_pair).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:255:17: 255:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:233 ~ itertools[f416]::adaptors::coalesce::{impl#11}::coalesce_pair).29), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:255:21: 255:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/coalesce.rs:255:21: 255:22 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ itertools[f416]::adaptors::coalesce::dedup_by_with_count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] SelfTy refers to an ADT!
[DEBUG] SelfTy refers to an ADT!
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ itertools[f416]::adaptors::coalesce::dedup_with_count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ itertools[f416]::adaptors::coalesce::dedup_by_with_count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2751 ~ itertools[f416]::adaptors::map::{impl#8}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2755 ~ itertools[f416]::adaptors::map::{impl#9}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:252 ~ itertools[f416]::adaptors::map::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ itertools[f416]::adaptors::map::MapSpecialCaseFn::call)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:254 ~ itertools[f416]::adaptors::map::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:36:44: 36:50 (#0), res: Local(HirId(DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold).6)), segments: [PathSegment { ident: fold_f#0, hir_id: HirId(DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold).27), res: Local(HirId(DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:36:44: 36:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:259 ~ itertools[f416]::adaptors::map::{impl#0}::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ itertools[f416]::adaptors::map::MapSpecialCaseFn::call)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:36:44: 36:50 (#0), res: Local(HirId(DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold).6)), segments: [PathSegment { ident: fold_f#0, hir_id: HirId(DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold).27), res: Local(HirId(DefId(0:255 ~ itertools[f416]::adaptors::map::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:36:44: 36:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ itertools[f416]::adaptors::map::{impl#1}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ itertools[f416]::adaptors::map::MapSpecialCaseFn::call)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).13), kind: Field(Expr { hir_id: HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:76:19: 76:23 (#0), res: Local(HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).15), res: Local(HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:76:19: 76:23 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:76:19: 76:25 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).13), kind: Field(Expr { hir_id: HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:76:19: 76:23 (#0), res: Local(HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).15), res: Local(HirId(DefId(0:279 ~ itertools[f416]::adaptors::map::{impl#3}::call).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:76:19: 76:23 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/map.rs:76:19: 76:25 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2762 ~ itertools[f416]::adaptors::map::{impl#10}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2763 ~ itertools[f416]::adaptors::map::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:283 ~ itertools[f416]::adaptors::map::map_ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:296 ~ itertools[f416]::adaptors::map::{impl#5}::call)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2764 ~ itertools[f416]::adaptors::map::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:305 ~ itertools[f416]::adaptors::map::{impl#7}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:306 ~ itertools[f416]::adaptors::map::map_into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2771 ~ itertools[f416]::adaptors::multi_product::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2778 ~ itertools[f416]::adaptors::multi_product::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2779 ~ itertools[f416]::adaptors::multi_product::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2780 ~ itertools[f416]::adaptors::multi_product::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:324 ~ itertools[f416]::adaptors::multi_product::multi_cartesian_product)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:329 ~ itertools[f416]::adaptors::multi_product::{impl#2}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2787 ~ itertools[f416]::adaptors::multi_product::{impl#7}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2790 ~ itertools[f416]::adaptors::multi_product::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:329 ~ itertools[f416]::adaptors::multi_product::{impl#2}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9663 ~ core[7d5a]::option::{impl#0}::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8905 ~ core[7d5a]::iter::traits::iterator::Iterator::zip)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13288 ~ core[7d5a]::slice::{impl#0}::iter_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13288 ~ core[7d5a]::slice::{impl#0}::iter_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13288 ~ core[7d5a]::slice::{impl#0}::iter_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).197), kind: MethodCall(PathSegment { ident: is_none#0, hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).198), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:20: 127:24 (#0), res: Local(HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).194)), segments: [PathSegment { ident: next#0, hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).200), res: Local(HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).194)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:20: 127:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:25: 127:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:20: 127:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).201), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).202), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).203), kind: Field(Expr { hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:38: 127:43 (#0), res: Local(HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).28)), segments: [PathSegment { ident: inner#0, hir_id: HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).205), res: Local(HirId(DefId(0:333 ~ itertools[f416]::adaptors::multi_product::{impl#3}::next).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:38: 127:43 (#0) }, iters#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:38: 127:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:50: 127:60 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:127:38: 127:60 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2920 ~ core[7d5a]::clone::Clone::clone_from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9674 ~ core[7d5a]::option::{impl#0}::unwrap_or_default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:151:24: 151:29 (#0), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).45)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).50), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:151:24: 151:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).51), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:151:33: 151:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:151:33: 151:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:154:30: 154:37 (#0), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).43)), segments: [PathSegment { ident: product#0, hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).63), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:154:30: 154:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:154:40: 154:45 (#0), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).45)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).65), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:154:40: 154:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:163:20: 163:23 (#0), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).90)), segments: [PathSegment { ident: acc#0, hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).97), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:163:20: 163:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).98), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:163:27: 163:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:163:27: 163:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:166:17: 166:20 (#0), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).90)), segments: [PathSegment { ident: acc#0, hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).114), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:166:17: 166:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).115), kind: MethodCall(PathSegment { ident: count#0, hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).116), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).117), kind: Field(Expr { hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:166:23: 166:27 (#0), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).92)), segments: [PathSegment { ident: iter#0, hir_id: HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).119), res: Local(HirId(DefId(0:335 ~ itertools[f416]::adaptors::multi_product::{impl#3}::count).92)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:166:23: 166:27 (#0) }, iter#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:166:23: 166:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:166:33: 166:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:166:23: 166:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:339 ~ itertools[f416]::adaptors::multi_product::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2060 ~ itertools[f416]::size_hint::mul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2060 ~ itertools[f416]::size_hint::mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:342 ~ itertools[f416]::adaptors::multi_product::{impl#3}::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8905 ~ core[7d5a]::iter::traits::iterator::Iterator::zip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9672 ~ core[7d5a]::option::{impl#0}::unwrap_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8897 ~ core[7d5a]::iter::traits::iterator::Iterator::last)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:342 ~ itertools[f416]::adaptors::multi_product::{impl#3}::last).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:214:16: 214:21 (#0), res: Local(HirId(DefId(0:342 ~ itertools[f416]::adaptors::multi_product::{impl#3}::last).45)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:342 ~ itertools[f416]::adaptors::multi_product::{impl#3}::last).89), res: Local(HirId(DefId(0:342 ~ itertools[f416]::adaptors::multi_product::{impl#3}::last).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:214:16: 214:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:342 ~ itertools[f416]::adaptors::multi_product::{impl#3}::last).90), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:214:25: 214:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/multi_product.rs:214:25: 214:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8897 ~ core[7d5a]::iter::traits::iterator::Iterator::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:2800 ~ itertools[f416]::adaptors::{impl#33}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2804 ~ itertools[f416]::adaptors::{impl#34}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:365 ~ itertools[f416]::adaptors::interleave)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:372 ~ itertools[f416]::adaptors::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:373 ~ itertools[f416]::adaptors::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:89:35: 89:36 (#0), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).37), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:89:35: 89:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:94:19: 94:20 (#0), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).75), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:94:19: 94:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:96:31: 96:32 (#0), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).95), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:96:31: 96:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:89:35: 89:36 (#0), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).37), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:89:35: 89:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:94:19: 94:20 (#0), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).75), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:94:19: 94:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:96:31: 96:32 (#0), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).95), res: Local(HirId(DefId(0:374 ~ itertools[f416]::adaptors::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:96:31: 96:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2814 ~ itertools[f416]::adaptors::{impl#35}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2818 ~ itertools[f416]::adaptors::{impl#36}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:381 ~ itertools[f416]::adaptors::interleave_shortest)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:388 ~ itertools[f416]::adaptors::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2061 ~ itertools[f416]::size_hint::mul_scalar)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:181:24: 181:34 (#0), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).49)), segments: [PathSegment { ident: curr_lower#0, hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).81), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:181:24: 181:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:181:37: 181:47 (#0), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).56)), segments: [PathSegment { ident: next_lower#0, hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).83), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:181:37: 181:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:182:13: 182:27 (#0), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).74)), segments: [PathSegment { ident: combined_lower#0, hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).87), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:182:13: 182:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).88), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:182:30: 182:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:182:30: 182:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:190:53: 190:61 (#0), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).121)), segments: [PathSegment { ident: curr_max#0, hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).130), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:190:53: 190:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).131), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:190:64: 190:72 (#0), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).124)), segments: [PathSegment { ident: next_max#0, hir_id: HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).132), res: Local(HirId(DefId(0:389 ~ itertools[f416]::adaptors::{impl#2}::size_hint).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:190:64: 190:72 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:212:35: 212:36 (#0), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).37), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:212:35: 212:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:217:19: 217:20 (#0), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).69), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:217:19: 217:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:219:31: 219:32 (#0), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).89), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:219:31: 219:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:212:35: 212:36 (#0), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).37), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:212:35: 212:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:217:19: 217:20 (#0), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).69), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:217:19: 217:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:219:31: 219:32 (#0), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).89), res: Local(HirId(DefId(0:391 ~ itertools[f416]::adaptors::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:219:31: 219:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2825 ~ itertools[f416]::adaptors::{impl#37}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2828 ~ itertools[f416]::adaptors::{impl#38}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ itertools[f416]::adaptors::{impl#4}::with_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:403 ~ itertools[f416]::adaptors::{impl#4}::into_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9716 ~ core[7d5a]::option::{impl#0}::replace)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:408 ~ itertools[f416]::adaptors::{impl#5}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:409 ~ itertools[f416]::adaptors::{impl#5}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).4), kind: MethodCall(PathSegment { ident: count#0, hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).5), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).6), kind: Field(Expr { hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:9: 307:13 (#0), res: Local(HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).8), res: Local(HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:9: 307:13 (#0) }, iter#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:9: 307:18 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:19: 307:26 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:9: 307:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).9), kind: Cast(Expr { hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).10), kind: MethodCall(PathSegment { ident: is_some#0, hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).12), kind: Field(Expr { hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:30: 307:34 (#0), res: Local(HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).14), res: Local(HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:30: 307:34 (#0) }, top#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:30: 307:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:39: 307:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:30: 307:48 (#0) }, Ty { hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:52: 307:57 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:410 ~ itertools[f416]::adaptors::{impl#5}::count).16), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:52: 307:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:307:29: 307:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:411 ~ itertools[f416]::adaptors::{impl#5}::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9704 ~ core[7d5a]::option::{impl#0}::or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8897 ~ core[7d5a]::iter::traits::iterator::Iterator::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8901 ~ core[7d5a]::iter::traits::iterator::Iterator::nth)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:318:20: 318:21 (#0), res: Local(HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).25), res: Local(HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:318:20: 318:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:318:25: 318:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:318:25: 318:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8901 ~ core[7d5a]::iter::traits::iterator::Iterator::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:322:35: 322:36 (#0), res: Local(HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).49), res: Local(HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:322:35: 322:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:412 ~ itertools[f416]::adaptors::{impl#5}::nth).50), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:322:39: 322:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:322:39: 322:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:333:17: 333:18 (#0), res: Local(HirId(DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all).19), res: Local(HirId(DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:333:17: 333:18 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:346:21: 346:22 (#0), res: Local(HirId(DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold).27), res: Local(HirId(DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:346:21: 346:22 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:333:17: 333:18 (#0), res: Local(HirId(DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all).19), res: Local(HirId(DefId(0:413 ~ itertools[f416]::adaptors::{impl#5}::all).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:333:17: 333:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:346:21: 346:22 (#0), res: Local(HirId(DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold).27), res: Local(HirId(DefId(0:415 ~ itertools[f416]::adaptors::{impl#5}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:346:21: 346:22 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2839 ~ itertools[f416]::adaptors::{impl#39}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2843 ~ itertools[f416]::adaptors::{impl#40}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:418 ~ itertools[f416]::adaptors::cartesian_product)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:425 ~ itertools[f416]::adaptors::{impl#6}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9711 ~ core[7d5a]::option::{impl#0}::get_or_insert_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:428 ~ itertools[f416]::adaptors::{impl#6}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2060 ~ itertools[f416]::size_hint::mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9672 ~ core[7d5a]::option::{impl#0}::unwrap_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:448:50: 448:51 (#0), res: Local(HirId(DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold).52), res: Local(HirId(DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:448:50: 448:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:448:50: 448:51 (#0), res: Local(HirId(DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold).52), res: Local(HirId(DefId(0:429 ~ itertools[f416]::adaptors::{impl#6}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:448:50: 448:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2852 ~ itertools[f416]::adaptors::{impl#41}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2853 ~ itertools[f416]::adaptors::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:440 ~ itertools[f416]::adaptors::batching)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).4), kind: Field(Expr { hir_id: HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:504:10: 504:14 (#0), res: Local(HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).6), res: Local(HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:504:10: 504:14 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:504:9: 504:17 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).4), kind: Field(Expr { hir_id: HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:504:10: 504:14 (#0), res: Local(HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).6), res: Local(HirId(DefId(0:448 ~ itertools[f416]::adaptors::{impl#9}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:504:10: 504:14 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:504:9: 504:17 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2854 ~ itertools[f416]::adaptors::{impl#10}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:459 ~ itertools[f416]::adaptors::take_while_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).29), kind: Field(Expr { hir_id: HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:545:21: 545:25 (#0), res: Local(HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).31), res: Local(HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:545:21: 545:25 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:545:20: 545:28 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:468 ~ itertools[f416]::adaptors::{impl#11}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).29), kind: Field(Expr { hir_id: HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:545:21: 545:25 (#0), res: Local(HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).31), res: Local(HirId(DefId(0:467 ~ itertools[f416]::adaptors::{impl#11}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:545:21: 545:25 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:545:20: 545:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2860 ~ itertools[f416]::adaptors::{impl#42}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2863 ~ itertools[f416]::adaptors::{impl#43}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:469 ~ itertools[f416]::adaptors::while_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:475 ~ itertools[f416]::adaptors::{impl#12}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:476 ~ itertools[f416]::adaptors::{impl#12}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:598:30: 598:31 (#0), res: Local(HirId(DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold).32), res: Local(HirId(DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:598:30: 598:31 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:598:30: 598:31 (#0), res: Local(HirId(DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold).32), res: Local(HirId(DefId(0:477 ~ itertools[f416]::adaptors::{impl#12}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:598:30: 598:31 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2872 ~ itertools[f416]::adaptors::{impl#44}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2876 ~ itertools[f416]::adaptors::{impl#45}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:484 ~ itertools[f416]::adaptors::tuple_combinations)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:491 ~ itertools[f416]::adaptors::{impl#13}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:492 ~ itertools[f416]::adaptors::{impl#13}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:493 ~ itertools[f416]::adaptors::{impl#13}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:494 ~ itertools[f416]::adaptors::{impl#13}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2882 ~ itertools[f416]::adaptors::{impl#46}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2885 ~ itertools[f416]::adaptors::{impl#47}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:502 ~ itertools[f416]::adaptors::{impl#15}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:506 ~ itertools[f416]::adaptors::{impl#16}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:508 ~ itertools[f416]::adaptors::{impl#16}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:509 ~ itertools[f416]::adaptors::{impl#16}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:510 ~ itertools[f416]::adaptors::{impl#16}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2920 ~ itertools[f416]::adaptors::{impl#52}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2923 ~ itertools[f416]::adaptors::{impl#53}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2888 ~ itertools[f416]::adaptors::{impl#48}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2891 ~ itertools[f416]::adaptors::{impl#49}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2896 ~ itertools[f416]::adaptors::{impl#50}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:2899 ~ itertools[f416]::adaptors::{impl#50}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).13), kind: MethodCall(PathSegment { ident: unwrap#67, hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#67), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#67, hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#67) }, [Expr { hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#67), res: Local(HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).11)), segments: [PathSegment { ident: n#67, hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).19), res: Local(HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#67) }, Expr { hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#67), res: Def(Const, DefId(0:2903 ~ itertools[f416]::adaptors::{impl#50}::count::K)), segments: [PathSegment { ident: K#67, hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).21), res: Def(Const, DefId(0:2903 ~ itertools[f416]::adaptors::{impl#50}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#67) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#67) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#67)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#67) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).22), kind: MethodCall(PathSegment { ident: count#67, hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#67), res: Local(HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).2)), segments: [PathSegment { ident: self#67, hir_id: HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).26), res: Local(HirId(DefId(0:2902 ~ itertools[f416]::adaptors::{impl#50}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#67) }, c#67), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#67) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#67)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#67) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2904 ~ itertools[f416]::adaptors::{impl#50}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:2958 ~ itertools[f416]::adaptors::{impl#58}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2961 ~ itertools[f416]::adaptors::{impl#59}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2926 ~ itertools[f416]::adaptors::{impl#54}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2929 ~ itertools[f416]::adaptors::{impl#55}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2934 ~ itertools[f416]::adaptors::{impl#56}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:2937 ~ itertools[f416]::adaptors::{impl#56}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).13), kind: MethodCall(PathSegment { ident: unwrap#74, hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#74), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#74, hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#74) }, [Expr { hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#74), res: Local(HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).11)), segments: [PathSegment { ident: n#74, hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).19), res: Local(HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#74) }, Expr { hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#74), res: Def(Const, DefId(0:2941 ~ itertools[f416]::adaptors::{impl#56}::count::K)), segments: [PathSegment { ident: K#74, hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).21), res: Def(Const, DefId(0:2941 ~ itertools[f416]::adaptors::{impl#56}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#74) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#74) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#74)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#74) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).22), kind: MethodCall(PathSegment { ident: count#74, hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#74), res: Local(HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).2)), segments: [PathSegment { ident: self#74, hir_id: HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).26), res: Local(HirId(DefId(0:2940 ~ itertools[f416]::adaptors::{impl#56}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#74) }, c#74), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#74) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#74)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#74) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2942 ~ itertools[f416]::adaptors::{impl#56}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:2996 ~ itertools[f416]::adaptors::{impl#64}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2999 ~ itertools[f416]::adaptors::{impl#65}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2964 ~ itertools[f416]::adaptors::{impl#60}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2967 ~ itertools[f416]::adaptors::{impl#61}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2972 ~ itertools[f416]::adaptors::{impl#62}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:2975 ~ itertools[f416]::adaptors::{impl#62}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).13), kind: MethodCall(PathSegment { ident: unwrap#83, hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#83), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#83, hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#83) }, [Expr { hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#83), res: Local(HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).11)), segments: [PathSegment { ident: n#83, hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).19), res: Local(HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#83) }, Expr { hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#83), res: Def(Const, DefId(0:2979 ~ itertools[f416]::adaptors::{impl#62}::count::K)), segments: [PathSegment { ident: K#83, hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).21), res: Def(Const, DefId(0:2979 ~ itertools[f416]::adaptors::{impl#62}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#83) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#83) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#83)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#83) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).22), kind: MethodCall(PathSegment { ident: count#83, hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#83), res: Local(HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).2)), segments: [PathSegment { ident: self#83, hir_id: HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).26), res: Local(HirId(DefId(0:2978 ~ itertools[f416]::adaptors::{impl#62}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#83) }, c#83), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#83) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#83)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#83) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2980 ~ itertools[f416]::adaptors::{impl#62}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3034 ~ itertools[f416]::adaptors::{impl#70}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3037 ~ itertools[f416]::adaptors::{impl#71}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3002 ~ itertools[f416]::adaptors::{impl#66}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3005 ~ itertools[f416]::adaptors::{impl#67}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3010 ~ itertools[f416]::adaptors::{impl#68}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3013 ~ itertools[f416]::adaptors::{impl#68}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).13), kind: MethodCall(PathSegment { ident: unwrap#94, hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#94), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#94, hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#94) }, [Expr { hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#94), res: Local(HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).11)), segments: [PathSegment { ident: n#94, hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).19), res: Local(HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#94) }, Expr { hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#94), res: Def(Const, DefId(0:3017 ~ itertools[f416]::adaptors::{impl#68}::count::K)), segments: [PathSegment { ident: K#94, hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).21), res: Def(Const, DefId(0:3017 ~ itertools[f416]::adaptors::{impl#68}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#94) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#94) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#94)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#94) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).22), kind: MethodCall(PathSegment { ident: count#94, hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#94), res: Local(HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).2)), segments: [PathSegment { ident: self#94, hir_id: HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).26), res: Local(HirId(DefId(0:3016 ~ itertools[f416]::adaptors::{impl#68}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#94) }, c#94), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#94) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#94)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#94) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3018 ~ itertools[f416]::adaptors::{impl#68}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3072 ~ itertools[f416]::adaptors::{impl#76}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3075 ~ itertools[f416]::adaptors::{impl#77}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3040 ~ itertools[f416]::adaptors::{impl#72}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3043 ~ itertools[f416]::adaptors::{impl#73}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3048 ~ itertools[f416]::adaptors::{impl#74}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3051 ~ itertools[f416]::adaptors::{impl#74}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).13), kind: MethodCall(PathSegment { ident: unwrap#107, hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#107), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#107, hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#107) }, [Expr { hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#107), res: Local(HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).11)), segments: [PathSegment { ident: n#107, hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).19), res: Local(HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#107) }, Expr { hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#107), res: Def(Const, DefId(0:3055 ~ itertools[f416]::adaptors::{impl#74}::count::K)), segments: [PathSegment { ident: K#107, hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).21), res: Def(Const, DefId(0:3055 ~ itertools[f416]::adaptors::{impl#74}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#107) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#107) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#107)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#107) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).22), kind: MethodCall(PathSegment { ident: count#107, hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#107), res: Local(HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).2)), segments: [PathSegment { ident: self#107, hir_id: HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).26), res: Local(HirId(DefId(0:3054 ~ itertools[f416]::adaptors::{impl#74}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#107) }, c#107), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#107) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#107)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#107) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3056 ~ itertools[f416]::adaptors::{impl#74}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3110 ~ itertools[f416]::adaptors::{impl#82}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3113 ~ itertools[f416]::adaptors::{impl#83}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3078 ~ itertools[f416]::adaptors::{impl#78}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3081 ~ itertools[f416]::adaptors::{impl#79}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3086 ~ itertools[f416]::adaptors::{impl#80}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3089 ~ itertools[f416]::adaptors::{impl#80}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).13), kind: MethodCall(PathSegment { ident: unwrap#122, hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#122), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#122, hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#122) }, [Expr { hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#122), res: Local(HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).11)), segments: [PathSegment { ident: n#122, hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).19), res: Local(HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#122) }, Expr { hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#122), res: Def(Const, DefId(0:3093 ~ itertools[f416]::adaptors::{impl#80}::count::K)), segments: [PathSegment { ident: K#122, hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).21), res: Def(Const, DefId(0:3093 ~ itertools[f416]::adaptors::{impl#80}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#122) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#122) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#122)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#122) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).22), kind: MethodCall(PathSegment { ident: count#122, hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#122), res: Local(HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).2)), segments: [PathSegment { ident: self#122, hir_id: HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).26), res: Local(HirId(DefId(0:3092 ~ itertools[f416]::adaptors::{impl#80}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#122) }, c#122), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#122) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#122)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#122) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3094 ~ itertools[f416]::adaptors::{impl#80}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3148 ~ itertools[f416]::adaptors::{impl#88}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3151 ~ itertools[f416]::adaptors::{impl#89}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3116 ~ itertools[f416]::adaptors::{impl#84}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3119 ~ itertools[f416]::adaptors::{impl#85}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3124 ~ itertools[f416]::adaptors::{impl#86}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3127 ~ itertools[f416]::adaptors::{impl#86}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).13), kind: MethodCall(PathSegment { ident: unwrap#139, hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#139), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#139, hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#139) }, [Expr { hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#139), res: Local(HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).11)), segments: [PathSegment { ident: n#139, hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).19), res: Local(HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#139) }, Expr { hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#139), res: Def(Const, DefId(0:3131 ~ itertools[f416]::adaptors::{impl#86}::count::K)), segments: [PathSegment { ident: K#139, hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).21), res: Def(Const, DefId(0:3131 ~ itertools[f416]::adaptors::{impl#86}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#139) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#139) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#139)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#139) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).22), kind: MethodCall(PathSegment { ident: count#139, hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#139), res: Local(HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).2)), segments: [PathSegment { ident: self#139, hir_id: HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).26), res: Local(HirId(DefId(0:3130 ~ itertools[f416]::adaptors::{impl#86}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#139) }, c#139), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#139) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#139)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#139) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3132 ~ itertools[f416]::adaptors::{impl#86}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3186 ~ itertools[f416]::adaptors::{impl#94}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3189 ~ itertools[f416]::adaptors::{impl#95}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3154 ~ itertools[f416]::adaptors::{impl#90}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3157 ~ itertools[f416]::adaptors::{impl#91}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3162 ~ itertools[f416]::adaptors::{impl#92}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3165 ~ itertools[f416]::adaptors::{impl#92}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).13), kind: MethodCall(PathSegment { ident: unwrap#158, hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#158), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#158, hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#158) }, [Expr { hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#158), res: Local(HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).11)), segments: [PathSegment { ident: n#158, hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).19), res: Local(HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#158) }, Expr { hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#158), res: Def(Const, DefId(0:3169 ~ itertools[f416]::adaptors::{impl#92}::count::K)), segments: [PathSegment { ident: K#158, hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).21), res: Def(Const, DefId(0:3169 ~ itertools[f416]::adaptors::{impl#92}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#158) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#158) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#158)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#158) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).22), kind: MethodCall(PathSegment { ident: count#158, hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#158), res: Local(HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).2)), segments: [PathSegment { ident: self#158, hir_id: HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).26), res: Local(HirId(DefId(0:3168 ~ itertools[f416]::adaptors::{impl#92}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#158) }, c#158), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#158) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#158)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#158) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3170 ~ itertools[f416]::adaptors::{impl#92}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3224 ~ itertools[f416]::adaptors::{impl#100}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3227 ~ itertools[f416]::adaptors::{impl#101}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3192 ~ itertools[f416]::adaptors::{impl#96}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3195 ~ itertools[f416]::adaptors::{impl#97}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3200 ~ itertools[f416]::adaptors::{impl#98}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3203 ~ itertools[f416]::adaptors::{impl#98}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).13), kind: MethodCall(PathSegment { ident: unwrap#179, hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#179), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#179, hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#179) }, [Expr { hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#179), res: Local(HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).11)), segments: [PathSegment { ident: n#179, hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).19), res: Local(HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#179) }, Expr { hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#179), res: Def(Const, DefId(0:3207 ~ itertools[f416]::adaptors::{impl#98}::count::K)), segments: [PathSegment { ident: K#179, hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).21), res: Def(Const, DefId(0:3207 ~ itertools[f416]::adaptors::{impl#98}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#179) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#179) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#179)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#179) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).22), kind: MethodCall(PathSegment { ident: count#179, hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#179), res: Local(HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).2)), segments: [PathSegment { ident: self#179, hir_id: HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).26), res: Local(HirId(DefId(0:3206 ~ itertools[f416]::adaptors::{impl#98}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#179) }, c#179), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#179) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#179)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#179) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3208 ~ itertools[f416]::adaptors::{impl#98}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3262 ~ itertools[f416]::adaptors::{impl#106}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3265 ~ itertools[f416]::adaptors::{impl#107}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3230 ~ itertools[f416]::adaptors::{impl#102}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3233 ~ itertools[f416]::adaptors::{impl#103}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3238 ~ itertools[f416]::adaptors::{impl#104}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3241 ~ itertools[f416]::adaptors::{impl#104}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).13), kind: MethodCall(PathSegment { ident: unwrap#202, hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#202), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#202, hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#202) }, [Expr { hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#202), res: Local(HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).11)), segments: [PathSegment { ident: n#202, hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).19), res: Local(HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#202) }, Expr { hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#202), res: Def(Const, DefId(0:3245 ~ itertools[f416]::adaptors::{impl#104}::count::K)), segments: [PathSegment { ident: K#202, hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).21), res: Def(Const, DefId(0:3245 ~ itertools[f416]::adaptors::{impl#104}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#202) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#202) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#202)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#202) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).22), kind: MethodCall(PathSegment { ident: count#202, hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#202), res: Local(HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).2)), segments: [PathSegment { ident: self#202, hir_id: HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).26), res: Local(HirId(DefId(0:3244 ~ itertools[f416]::adaptors::{impl#104}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#202) }, c#202), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#202) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#202)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#202) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3246 ~ itertools[f416]::adaptors::{impl#104}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3300 ~ itertools[f416]::adaptors::{impl#112}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3303 ~ itertools[f416]::adaptors::{impl#113}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3268 ~ itertools[f416]::adaptors::{impl#108}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3271 ~ itertools[f416]::adaptors::{impl#109}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3276 ~ itertools[f416]::adaptors::{impl#110}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3279 ~ itertools[f416]::adaptors::{impl#110}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).13), kind: MethodCall(PathSegment { ident: unwrap#227, hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).15), kind: Call(Expr { hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#227), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), segments: [PathSegment { ident: checked_binomial#227, hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).17), res: Def(Fn, DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:33 (#227) }, [Expr { hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#227), res: Local(HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).11)), segments: [PathSegment { ident: n#227, hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).19), res: Local(HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:34: 769:35 (#227) }, Expr { hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#227), res: Def(Const, DefId(0:3283 ~ itertools[f416]::adaptors::{impl#110}::count::K)), segments: [PathSegment { ident: K#227, hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).21), res: Def(Const, DefId(0:3283 ~ itertools[f416]::adaptors::{impl#110}::count::K)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:37: 769:38 (#227) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:39 (#227) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:40: 769:48 (#227)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:17: 769:48 (#227) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).22), kind: MethodCall(PathSegment { ident: count#227, hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).24), kind: Field(Expr { hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#227), res: Local(HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).2)), segments: [PathSegment { ident: self#227, hir_id: HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).26), res: Local(HirId(DefId(0:3282 ~ itertools[f416]::adaptors::{impl#110}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:55 (#227) }, c#227), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:57 (#227) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:58: 769:65 (#227)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:769:51: 769:65 (#227) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3284 ~ itertools[f416]::adaptors::{impl#110}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:827:8: 827:9 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).8), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:827:8: 827:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:827:12: 827:13 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).4)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).10), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:827:12: 827:13 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3003 ~ core[7d5a]::cmp::Ord::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:831:10: 831:11 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).28), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:831:10: 831:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:831:14: 831:15 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).4)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).30), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:831:14: 831:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3784 ~ core[7d5a]::ops::range::{impl#7}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25399 ~ core[7d5a]::num::{impl#11}::checked_mul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:834:14: 834:15 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).37)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).61), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:834:14: 834:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:834:18: 834:19 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).43)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).63), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:834:18: 834:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).84), kind: Match(Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).95), kind: Call(Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).94), kind: Path(LangItem(TryTraitBranch, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#970))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#970) }, [Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).85), kind: MethodCall(PathSegment { ident: checked_mul#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).86), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).87), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:29: 836:30 (#0) }, Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:27: 836:28 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).37)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).89), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:27: 836:28 (#0) }, Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:31: 836:32 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).43)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).91), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:31: 836:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:33 (#0) }, [Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:46: 836:47 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).93), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:46: 836:47 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:34: 836:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:48 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#970) }, [Arm { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).110), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971), pat: Pat { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).109), kind: Struct(LangItem(ControlFlowBreak, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971)), [PatField { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).108), ident: 0#971, pat: Pat { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).102), kind: Binding(BindingMode(No, Not), HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).102), residual#0, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).107), kind: Ret(Some(Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).106), kind: Call(Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).105), kind: Path(LangItem(TryTraitFromResidual, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971) }, [Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).102)), segments: [PathSegment { ident: residual#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).103), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).102)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#970) })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:48: 836:49 (#971) } }, Arm { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).101), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#0), pat: Pat { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).100), kind: Struct(LangItem(ControlFlowContinue, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#970)), [PatField { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).99), ident: 0#970, pat: Pat { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).96), kind: Binding(BindingMode(No, Not), HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).96), val#0, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#0), default_binding_modes: true }, is_shorthand: false, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#970) }], false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#970), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).96)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).97), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).96)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#0) } }], TryDesugar(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).95))), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:26: 836:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:52: 836:53 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).43)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).112), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:52: 836:53 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25399 ~ core[7d5a]::num::{impl#11}::checked_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:27: 836:28 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).37)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).89), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:27: 836:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:31: 836:32 (#0), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).43)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).91), res: Local(HirId(DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:836:31: 836:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3312 ~ itertools[f416]::adaptors::{impl#114}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3313 ~ itertools[f416]::adaptors::{impl#18}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:522 ~ itertools[f416]::adaptors::filter_ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9022 ~ core[7d5a]::iter::traits::iterator::Iterator::find)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:897:22: 897:23 (#0), res: Local(HirId(DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next).9)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next).27), res: Local(HirId(DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:897:22: 897:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:535 ~ itertools[f416]::adaptors::{impl#19}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:536 ~ itertools[f416]::adaptors::{impl#19}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8920 ~ core[7d5a]::iter::traits::iterator::Iterator::filter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10435 ~ core[7d5a]::result::{impl#0}::unwrap_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10393 ~ core[7d5a]::result::{impl#0}::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:540 ~ itertools[f416]::adaptors::{impl#19}::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8920 ~ core[7d5a]::iter::traits::iterator::Iterator::filter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10435 ~ core[7d5a]::result::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10393 ~ core[7d5a]::result::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:897:22: 897:23 (#0), res: Local(HirId(DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next).9)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next).27), res: Local(HirId(DefId(0:533 ~ itertools[f416]::adaptors::{impl#19}::next).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:897:22: 897:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3322 ~ itertools[f416]::adaptors::{impl#115}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3323 ~ itertools[f416]::adaptors::{impl#21}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:551 ~ itertools[f416]::adaptors::transpose_result)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:554 ~ itertools[f416]::adaptors::filter_map_ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9029 ~ core[7d5a]::iter::traits::iterator::Iterator::find_map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:978:22: 978:23 (#0), res: Local(HirId(DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next).9)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next).29), res: Local(HirId(DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:978:22: 978:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:569 ~ itertools[f416]::adaptors::{impl#22}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:570 ~ itertools[f416]::adaptors::{impl#22}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8922 ~ core[7d5a]::iter::traits::iterator::Iterator::filter_map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:551 ~ itertools[f416]::adaptors::transpose_result)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:574 ~ itertools[f416]::adaptors::{impl#22}::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8922 ~ core[7d5a]::iter::traits::iterator::Iterator::filter_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:551 ~ itertools[f416]::adaptors::transpose_result)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:978:22: 978:23 (#0), res: Local(HirId(DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next).9)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next).29), res: Local(HirId(DefId(0:567 ~ itertools[f416]::adaptors::{impl#22}::next).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:978:22: 978:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3332 ~ itertools[f416]::adaptors::{impl#116}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3333 ~ itertools[f416]::adaptors::{impl#24}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:586 ~ itertools[f416]::adaptors::positions)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9029 ~ core[7d5a]::iter::traits::iterator::Iterator::find_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1053:41: 1053:42 (#0), res: Local(HirId(DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next).9)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next).23), res: Local(HirId(DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1053:41: 1053:42 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ itertools[f416]::adaptors::{impl#25}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1066:16: 1066:17 (#0), res: Local(HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).12)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).31), res: Local(HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1066:16: 1066:17 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1067:23: 1067:27 (#0), res: Local(HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).6)), segments: [PathSegment { ident: func#0, hir_id: HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).40), res: Local(HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1067:23: 1067:27 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1053:41: 1053:42 (#0), res: Local(HirId(DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next).9)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next).23), res: Local(HirId(DefId(0:593 ~ itertools[f416]::adaptors::{impl#25}::next).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1053:41: 1053:42 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1066:16: 1066:17 (#0), res: Local(HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).12)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).31), res: Local(HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1066:16: 1066:17 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1067:23: 1067:27 (#0), res: Local(HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).6)), segments: [PathSegment { ident: func#0, hir_id: HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).40), res: Local(HirId(DefId(0:596 ~ itertools[f416]::adaptors::{impl#25}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1067:23: 1067:27 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9029 ~ core[7d5a]::iter::traits::iterator::Iterator::find_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1085:41: 1085:42 (#0), res: Local(HirId(DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back).9)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back).27), res: Local(HirId(DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1085:41: 1085:42 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1094:16: 1094:17 (#0), res: Local(HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).12)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).31), res: Local(HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1094:16: 1094:17 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1095:23: 1095:27 (#0), res: Local(HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).6)), segments: [PathSegment { ident: func#0, hir_id: HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).40), res: Local(HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1095:23: 1095:27 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1085:41: 1085:42 (#0), res: Local(HirId(DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back).9)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back).27), res: Local(HirId(DefId(0:603 ~ itertools[f416]::adaptors::{impl#26}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1085:41: 1085:42 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1094:16: 1094:17 (#0), res: Local(HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).12)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).31), res: Local(HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1094:16: 1094:17 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1095:23: 1095:27 (#0), res: Local(HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).6)), segments: [PathSegment { ident: func#0, hir_id: HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).40), res: Local(HirId(DefId(0:605 ~ itertools[f416]::adaptors::{impl#26}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1095:23: 1095:27 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3342 ~ itertools[f416]::adaptors::{impl#117}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3343 ~ itertools[f416]::adaptors::{impl#28}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:615 ~ itertools[f416]::adaptors::update)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).14), kind: Field(Expr { hir_id: HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1144:14: 1144:18 (#0), res: Local(HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).16), res: Local(HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1144:14: 1144:18 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1144:13: 1144:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:623 ~ itertools[f416]::adaptors::{impl#29}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1161:13: 1161:14 (#0), res: Local(HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).12)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).28), res: Local(HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1161:13: 1161:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1162:13: 1162:14 (#0), res: Local(HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).6)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).35), res: Local(HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1162:13: 1162:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1174:17: 1174:18 (#0), res: Local(HirId(DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect).22), res: Local(HirId(DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1174:17: 1174:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).14), kind: Field(Expr { hir_id: HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1144:14: 1144:18 (#0), res: Local(HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).16), res: Local(HirId(DefId(0:622 ~ itertools[f416]::adaptors::{impl#29}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1144:14: 1144:18 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1144:13: 1144:21 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1161:13: 1161:14 (#0), res: Local(HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).12)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).28), res: Local(HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1161:13: 1161:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1162:13: 1162:14 (#0), res: Local(HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).6)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).35), res: Local(HirId(DefId(0:624 ~ itertools[f416]::adaptors::{impl#29}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1162:13: 1162:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1174:17: 1174:18 (#0), res: Local(HirId(DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect).22), res: Local(HirId(DefId(0:628 ~ itertools[f416]::adaptors::{impl#29}::collect).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1174:17: 1174:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).14), kind: Field(Expr { hir_id: HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1195:14: 1195:18 (#0), res: Local(HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).16), res: Local(HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1195:14: 1195:18 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1195:13: 1195:21 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).14), kind: Field(Expr { hir_id: HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1195:14: 1195:18 (#0), res: Local(HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).16), res: Local(HirId(DefId(0:637 ~ itertools[f416]::adaptors::{impl#31}::next_back).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1195:14: 1195:18 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/adaptors/mod.rs:1195:13: 1195:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3360 ~ itertools[f416]::either_or_both::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).14)), segments: [PathSegment { ident: __self_discr#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).28), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).24)), segments: [PathSegment { ident: __arg1_discr#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).30), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).31), kind: Match(Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).32), kind: Tup([Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:17 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).34), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).4)), segments: [PathSegment { ident: other#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).36), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }, [Arm { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), pat: Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).47), kind: Tuple([Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).41), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:5: 11:5 (#271), res: Def(Ctor(Variant, Fn), DefId(0:3348 ~ itertools[f416]::either_or_both::EitherOrBoth::Both::{constructor#0})), segments: [PathSegment { ident: EitherOrBoth#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).37), res: Def(Enum, DefId(0:3344 ~ itertools[f416]::either_or_both::EitherOrBoth)), args: None, infer_args: true }, PathSegment { ident: Both#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).38), res: Def(Ctor(Variant, Fn), DefId(0:3348 ~ itertools[f416]::either_or_both::EitherOrBoth::Both::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).39), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).39), __self_0#271, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).40), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).40), __self_1#271, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).46), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:5: 11:5 (#271), res: Def(Ctor(Variant, Fn), DefId(0:3348 ~ itertools[f416]::either_or_both::EitherOrBoth::Both::{constructor#0})), segments: [PathSegment { ident: EitherOrBoth#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).42), res: Def(Enum, DefId(0:3344 ~ itertools[f416]::either_or_both::EitherOrBoth)), args: None, infer_args: true }, PathSegment { ident: Both#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).43), res: Def(Ctor(Variant, Fn), DefId(0:3348 ~ itertools[f416]::either_or_both::EitherOrBoth::Both::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).44), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).44), __arg1_0#271, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).45), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).45), __arg1_1#271, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).49), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).50), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).39)), segments: [PathSegment { ident: __self_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).52), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).44)), segments: [PathSegment { ident: __arg1_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).54), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).55), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).40)), segments: [PathSegment { ident: __self_1#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).57), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).45)), segments: [PathSegment { ident: __arg1_1#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).59), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) } }, Arm { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).69), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), pat: Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).68), kind: Tuple([Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).63), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:5: 13:5 (#271), res: Def(Ctor(Variant, Fn), DefId(0:3352 ~ itertools[f416]::either_or_both::EitherOrBoth::Left::{constructor#0})), segments: [PathSegment { ident: EitherOrBoth#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).60), res: Def(Enum, DefId(0:3344 ~ itertools[f416]::either_or_both::EitherOrBoth)), args: None, infer_args: true }, PathSegment { ident: Left#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).61), res: Def(Ctor(Variant, Fn), DefId(0:3352 ~ itertools[f416]::either_or_both::EitherOrBoth::Left::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).62), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).62), __self_0#271, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).67), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:5: 13:5 (#271), res: Def(Ctor(Variant, Fn), DefId(0:3352 ~ itertools[f416]::either_or_both::EitherOrBoth::Left::{constructor#0})), segments: [PathSegment { ident: EitherOrBoth#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).64), res: Def(Enum, DefId(0:3344 ~ itertools[f416]::either_or_both::EitherOrBoth)), args: None, infer_args: true }, PathSegment { ident: Left#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).65), res: Def(Ctor(Variant, Fn), DefId(0:3352 ~ itertools[f416]::either_or_both::EitherOrBoth::Left::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).66), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).66), __arg1_0#271, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).70), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).62)), segments: [PathSegment { ident: __self_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).72), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).66)), segments: [PathSegment { ident: __arg1_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).74), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).66)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271) } }, Arm { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).84), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), pat: Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).83), kind: Tuple([Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).78), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:5: 15:5 (#271), res: Def(Ctor(Variant, Fn), DefId(0:3355 ~ itertools[f416]::either_or_both::EitherOrBoth::Right::{constructor#0})), segments: [PathSegment { ident: EitherOrBoth#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).75), res: Def(Enum, DefId(0:3344 ~ itertools[f416]::either_or_both::EitherOrBoth)), args: None, infer_args: true }, PathSegment { ident: Right#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).76), res: Def(Ctor(Variant, Fn), DefId(0:3355 ~ itertools[f416]::either_or_both::EitherOrBoth::Right::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).77), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).77), __self_0#271, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).82), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:5: 15:5 (#271), res: Def(Ctor(Variant, Fn), DefId(0:3355 ~ itertools[f416]::either_or_both::EitherOrBoth::Right::{constructor#0})), segments: [PathSegment { ident: EitherOrBoth#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).79), res: Def(Enum, DefId(0:3344 ~ itertools[f416]::either_or_both::EitherOrBoth)), args: None, infer_args: true }, PathSegment { ident: Right#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).80), res: Def(Ctor(Variant, Fn), DefId(0:3355 ~ itertools[f416]::either_or_both::EitherOrBoth::Right::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).81), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).81), __arg1_0#271, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).85), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).77)), segments: [PathSegment { ident: __self_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).87), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).77)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).81)), segments: [PathSegment { ident: __arg1_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).89), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).81)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271) } }, Arm { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).91), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), pat: Pat { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).90), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).92), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).93), kind: Call(Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:17 (#271), res: Def(Fn, DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)), segments: [PathSegment { ident: $crate#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).95), res: Err, args: None, infer_args: true }, PathSegment { ident: intrinsics#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).96), res: Def(Mod, DefId(2:1290 ~ core[7d5a]::intrinsics)), args: None, infer_args: true }, PathSegment { ident: unreachable#0, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).97), res: Def(Fn, DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }), hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).98), rules: UnsafeBlock(CompilerGenerated), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) } }], Normal), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).14)), segments: [PathSegment { ident: __self_discr#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).28), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).24)), segments: [PathSegment { ident: __arg1_discr#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).30), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:8:17: 8:26 (#271) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).50), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).39)), segments: [PathSegment { ident: __self_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).52), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).44)), segments: [PathSegment { ident: __arg1_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).54), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).55), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).40)), segments: [PathSegment { ident: __self_1#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).57), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }, Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).45)), segments: [PathSegment { ident: __arg1_1#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).59), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).39)), segments: [PathSegment { ident: __self_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).52), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).44)), segments: [PathSegment { ident: __arg1_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).54), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:10: 11:11 (#271) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).40)), segments: [PathSegment { ident: __self_1#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).57), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).45)), segments: [PathSegment { ident: __arg1_1#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).59), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:11:13: 11:14 (#271) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).62)), segments: [PathSegment { ident: __self_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).72), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).66)), segments: [PathSegment { ident: __arg1_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).74), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).66)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:13:10: 13:11 (#271) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).77)), segments: [PathSegment { ident: __self_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).87), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).77)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).81)), segments: [PathSegment { ident: __arg1_0#271, hir_id: HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).89), res: Local(HirId(DefId(0:3367 ~ itertools[f416]::either_or_both::{impl#6}::eq).81)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:15:11: 15:12 (#271) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3371 ~ itertools[f416]::either_or_both::{impl#7}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3375 ~ itertools[f416]::either_or_both::{impl#8}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3380 ~ itertools[f416]::either_or_both::{impl#9}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11212 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field2_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:650 ~ itertools[f416]::either_or_both::{impl#0}::has_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:655 ~ itertools[f416]::either_or_both::{impl#0}::left)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ itertools[f416]::either_or_both::{impl#0}::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:651 ~ itertools[f416]::either_or_both::{impl#0}::has_right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:656 ~ itertools[f416]::either_or_both::{impl#0}::right)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ itertools[f416]::either_or_both::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:652 ~ itertools[f416]::either_or_both::{impl#0}::is_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:653 ~ itertools[f416]::either_or_both::{impl#0}::is_right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:654 ~ itertools[f416]::either_or_both::{impl#0}::is_both)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:660 ~ itertools[f416]::either_or_both::{impl#0}::both)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ itertools[f416]::either_or_both::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:655 ~ itertools[f416]::either_or_both::{impl#0}::left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:656 ~ itertools[f416]::either_or_both::{impl#0}::right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:657 ~ itertools[f416]::either_or_both::{impl#0}::left_and_right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:686 ~ itertools[f416]::either_or_both::{impl#0}::or_default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:658 ~ itertools[f416]::either_or_both::{impl#0}::just_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:659 ~ itertools[f416]::either_or_both::{impl#0}::just_right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:660 ~ itertools[f416]::either_or_both::{impl#0}::both)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:661 ~ itertools[f416]::either_or_both::{impl#0}::into_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:662 ~ itertools[f416]::either_or_both::{impl#0}::into_right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:663 ~ itertools[f416]::either_or_both::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ itertools[f416]::either_or_both::{impl#0}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ itertools[f416]::either_or_both::{impl#0}::as_deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:666 ~ itertools[f416]::either_or_both::{impl#0}::as_deref_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ itertools[f416]::either_or_both::{impl#0}::flip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:210:32: 210:33 (#0), res: Local(HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).18), res: Local(HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:210:32: 210:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:211:29: 211:30 (#0), res: Local(HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).32), res: Local(HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:211:29: 211:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:224:31: 224:32 (#0), res: Local(HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).26), res: Local(HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:224:31: 224:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:225:35: 225:36 (#0), res: Local(HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).41), res: Local(HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:225:35: 225:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:238:29: 238:30 (#0), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).19), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:238:29: 238:30 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:239:31: 239:32 (#0), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).6)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).31), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:239:31: 239:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:240:32: 240:33 (#0), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).44), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:240:32: 240:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:240:38: 240:39 (#0), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).6)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).49), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:240:38: 240:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:251:37: 251:38 (#0), res: Local(HirId(DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then).19), res: Local(HirId(DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:251:37: 251:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:264:38: 264:39 (#0), res: Local(HirId(DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then).28), res: Local(HirId(DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:264:38: 264:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:685 ~ itertools[f416]::either_or_both::{impl#0}::or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:686 ~ itertools[f416]::either_or_both::{impl#0}::or_default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:326:40: 326:41 (#0), res: Local(HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).6)), segments: [PathSegment { ident: r#0, hir_id: HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).19), res: Local(HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:326:40: 326:41 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:327:32: 327:33 (#0), res: Local(HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).4)), segments: [PathSegment { ident: l#0, hir_id: HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).27), res: Local(HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:327:32: 327:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:690 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:692 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:698 ~ itertools[f416]::either_or_both::{impl#0}::insert_left)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:352:42: 352:43 (#0), res: Local(HirId(DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with).29), res: Local(HirId(DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:352:42: 352:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:699 ~ itertools[f416]::either_or_both::{impl#0}::insert_right)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:364:42: 364:43 (#0), res: Local(HirId(DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with).29), res: Local(HirId(DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:364:42: 364:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:698 ~ itertools[f416]::either_or_both::{impl#0}::insert_left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2785 ~ core[7d5a]::ptr::read)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2789 ~ core[7d5a]::ptr::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:699 ~ itertools[f416]::either_or_both::{impl#0}::insert_right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2785 ~ core[7d5a]::ptr::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2789 ~ core[7d5a]::ptr::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:700 ~ itertools[f416]::either_or_both::{impl#0}::insert_both)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1283 ~ core[7d5a]::hint::unreachable_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:210:32: 210:33 (#0), res: Local(HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).18), res: Local(HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:210:32: 210:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:211:29: 211:30 (#0), res: Local(HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).32), res: Local(HirId(DefId(0:668 ~ itertools[f416]::either_or_both::{impl#0}::map_left).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:211:29: 211:30 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:224:31: 224:32 (#0), res: Local(HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).26), res: Local(HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:224:31: 224:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:225:35: 225:36 (#0), res: Local(HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).41), res: Local(HirId(DefId(0:671 ~ itertools[f416]::either_or_both::{impl#0}::map_right).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:225:35: 225:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:238:29: 238:30 (#0), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).19), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:238:29: 238:30 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:239:31: 239:32 (#0), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).6)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).31), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:239:31: 239:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:240:32: 240:33 (#0), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).44), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:240:32: 240:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:240:38: 240:39 (#0), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).6)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).49), res: Local(HirId(DefId(0:674 ~ itertools[f416]::either_or_both::{impl#0}::map_any).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:240:38: 240:39 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:251:37: 251:38 (#0), res: Local(HirId(DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then).19), res: Local(HirId(DefId(0:679 ~ itertools[f416]::either_or_both::{impl#0}::left_and_then).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:251:37: 251:38 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:264:38: 264:39 (#0), res: Local(HirId(DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then).28), res: Local(HirId(DefId(0:682 ~ itertools[f416]::either_or_both::{impl#0}::right_and_then).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:264:38: 264:39 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:326:40: 326:41 (#0), res: Local(HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).6)), segments: [PathSegment { ident: r#0, hir_id: HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).19), res: Local(HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:326:40: 326:41 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:327:32: 327:33 (#0), res: Local(HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).4)), segments: [PathSegment { ident: l#0, hir_id: HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).27), res: Local(HirId(DefId(0:687 ~ itertools[f416]::either_or_both::{impl#0}::or_else).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:327:32: 327:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:352:42: 352:43 (#0), res: Local(HirId(DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with).29), res: Local(HirId(DefId(0:694 ~ itertools[f416]::either_or_both::{impl#0}::left_or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:352:42: 352:43 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:364:42: 364:43 (#0), res: Local(HirId(DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with).29), res: Local(HirId(DefId(0:696 ~ itertools[f416]::either_or_both::{impl#0}::right_or_insert_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:364:42: 364:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:492:27: 492:28 (#0), res: Local(HirId(DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce).27), res: Local(HirId(DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:492:27: 492:28 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:492:27: 492:28 (#0), res: Local(HirId(DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce).27), res: Local(HirId(DefId(0:703 ~ itertools[f416]::either_or_both::{impl#1}::reduce).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/either_or_both.rs:492:27: 492:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:708 ~ itertools[f416]::either_or_both::{impl#2}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:712 ~ itertools[f416]::either_or_both::{impl#3}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:738 ~ itertools[f416]::free::intersperse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2369 ~ itertools[f416]::Itertools::intersperse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:740 ~ itertools[f416]::free::intersperse_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2370 ~ itertools[f416]::Itertools::intersperse_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:743 ~ itertools[f416]::free::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:745 ~ itertools[f416]::free::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:747 ~ itertools[f416]::free::zip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8905 ~ core[7d5a]::iter::traits::iterator::Iterator::zip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:750 ~ itertools[f416]::free::chain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8903 ~ core[7d5a]::iter::traits::iterator::Iterator::chain)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:753 ~ itertools[f416]::free::cloned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9112 ~ core[7d5a]::iter::traits::iterator::Iterator::cloned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:757 ~ itertools[f416]::free::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:761 ~ itertools[f416]::free::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:764 ~ itertools[f416]::free::any)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9015 ~ core[7d5a]::iter::traits::iterator::Iterator::any)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:767 ~ itertools[f416]::free::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9063 ~ core[7d5a]::iter::traits::iterator::Iterator::max)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:769 ~ itertools[f416]::free::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:771 ~ itertools[f416]::free::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2506 ~ itertools[f416]::Itertools::join)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ itertools[f416]::free::sorted)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2556 ~ itertools[f416]::Itertools::sorted)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:775 ~ itertools[f416]::free::sorted_unstable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2550 ~ itertools[f416]::Itertools::sorted_unstable)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3381 ~ itertools[f416]::combinations::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3382 ~ itertools[f416]::combinations::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ itertools[f416]::combinations::combinations)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1577 ~ itertools[f416]::lazy_buffer::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:798 ~ itertools[f416]::combinations::{impl#2}::n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1578 ~ itertools[f416]::lazy_buffer::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:799 ~ itertools[f416]::combinations::{impl#2}::src)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:74:12: 74:13 (#0), res: Local(HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).4)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).14), res: Local(HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:74:12: 74:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).15), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).17), kind: Field(Expr { hir_id: HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:74:16: 74:20 (#0), res: Local(HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).19), res: Local(HirId(DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:74:16: 74:20 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:74:16: 74:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:74:29: 74:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:74:16: 74:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7447 ~ alloc[5873]::vec::{impl#1}::truncate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:801 ~ itertools[f416]::combinations::{impl#2}::n_and_count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:815 ~ itertools[f416]::combinations::remaining_for)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).15), kind: MethodCall(PathSegment { ident: k#0, hir_id: HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:102:20: 102:24 (#0), res: Local(HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).18), res: Local(HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:102:20: 102:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:102:25: 102:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:102:20: 102:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).19), kind: MethodCall(PathSegment { ident: n#0, hir_id: HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).20), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:102:31: 102:35 (#0), res: Local(HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).22), res: Local(HirId(DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:102:31: 102:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:102:36: 102:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:102:31: 102:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:798 ~ itertools[f416]::combinations::{impl#2}::n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).20), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).21), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).22), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:121:28: 121:32 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).24), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:121:28: 121:32 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:121:28: 121:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:121:41: 121:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:121:28: 121:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).25), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:121:49: 121:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:121:49: 121:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).30), kind: Index(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).31), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:12: 124:16 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).33), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:12: 124:16 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:12: 124:24 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:25: 124:26 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).35), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:25: 124:26 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:24: 124:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:12: 124:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).36), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:47: 124:48 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).37), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).38), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).39), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:35 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).41), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:35 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:41: 124:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:46 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).42), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:49: 124:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:49: 124:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).37), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).38), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).39), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:35 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).41), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:35 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:41: 124:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:31: 124:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).42), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:49: 124:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:124:49: 124:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1578 ~ itertools[f416]::lazy_buffer::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1581 ~ itertools[f416]::lazy_buffer::{impl#0}::get_next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).55), kind: Index(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).56), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:15: 128:19 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).58), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:15: 128:19 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:15: 128:27 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:28: 128:29 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).60), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:28: 128:29 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:27: 128:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:15: 128:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).61), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:54: 128:55 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).62), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:36: 128:37 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:35 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).64), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:35 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).65), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).66), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).67), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:42 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).69), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:42 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:48: 128:53 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:53 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).70), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).71), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).72), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:56: 128:60 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).74), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:56: 128:60 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:56: 128:68 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:69: 128:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:56: 128:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).62), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:36: 128:37 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:35 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).64), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:35 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).65), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).66), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).67), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:42 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).69), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:42 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:48: 128:53 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).70), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).71), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).72), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:56: 128:60 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).74), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:56: 128:60 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:56: 128:68 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:69: 128:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:56: 128:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:35 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).64), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:34: 128:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).65), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).66), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).67), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:42 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).69), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:42 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:48: 128:53 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:128:38: 128:53 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1578 ~ itertools[f416]::lazy_buffer::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:129:16: 129:17 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).79), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:129:16: 129:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).80), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:129:20: 129:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:129:20: 129:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:139:18: 139:19 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).115), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:139:18: 139:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).116), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:139:22: 139:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:139:22: 139:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:139:18: 139:19 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).115), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:139:18: 139:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).116), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:139:22: 139:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:139:22: 139:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).139), kind: Index(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).140), kind: Field(Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).141), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:31: 140:35 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).142), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:31: 140:35 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:31: 140:43 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).143), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:46: 140:47 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:44: 140:45 (#0), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).124)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).145), res: Local(HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:44: 140:45 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).146), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:48: 140:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:48: 140:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:44: 140:49 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:43: 140:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:31: 140:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices).147), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:53: 140:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:140:53: 140:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:804 ~ itertools[f416]::combinations::{impl#2}::try_nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:804 ~ itertools[f416]::combinations::{impl#2}::try_nth).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:162:28: 162:29 (#0), res: Local(HirId(DefId(0:804 ~ itertools[f416]::combinations::{impl#2}::try_nth).44)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:804 ~ itertools[f416]::combinations::{impl#2}::try_nth).63), res: Local(HirId(DefId(0:804 ~ itertools[f416]::combinations::{impl#2}::try_nth).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:162:28: 162:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:804 ~ itertools[f416]::combinations::{impl#2}::try_nth).64), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:162:32: 162:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:162:32: 162:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1585 ~ itertools[f416]::lazy_buffer::{impl#1}::get_at)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:808 ~ itertools[f416]::combinations::{impl#3}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:802 ~ itertools[f416]::combinations::{impl#2}::init)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ itertools[f416]::combinations::{impl#2}::increment_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1585 ~ itertools[f416]::lazy_buffer::{impl#1}::get_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:809 ~ itertools[f416]::combinations::{impl#3}::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:804 ~ itertools[f416]::combinations::{impl#2}::try_nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:810 ~ itertools[f416]::combinations::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1579 ~ itertools[f416]::lazy_buffer::{impl#0}::size_hint)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:815 ~ itertools[f416]::combinations::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:815 ~ itertools[f416]::combinations::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:812 ~ itertools[f416]::combinations::{impl#3}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:801 ~ itertools[f416]::combinations::{impl#2}::n_and_count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:815 ~ itertools[f416]::combinations::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:216:8: 216:9 (#0), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).17), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:216:8: 216:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:216:12: 216:13 (#0), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).13)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).19), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:216:12: 216:13 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).67), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:48: 240:49 (#0) }, Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:46: 240:47 (#0), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).69), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:46: 240:47 (#0) }, Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).70), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:50: 240:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:50: 240:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:46: 240:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).71), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:55: 240:57 (#0), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).55)), segments: [PathSegment { ident: n0#0, hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).73), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:55: 240:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:54: 240:57 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:46: 240:47 (#0), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).69), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:46: 240:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).70), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:50: 240:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:50: 240:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:59: 240:60 (#0), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).13)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).76), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:59: 240:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:63: 240:64 (#0), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).54)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).78), res: Local(HirId(DefId(0:815 ~ itertools[f416]::combinations::remaining_for).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations.rs:240:63: 240:64 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3390 ~ itertools[f416]::combinations_with_replacement::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3391 ~ itertools[f416]::combinations_with_replacement::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:826 ~ itertools[f416]::combinations_with_replacement::combinations_with_replacement)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7446 ~ alloc[5873]::vec::{impl#1}::into_boxed_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7545 ~ alloc[5873]::vec::from_elem)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1577 ~ itertools[f416]::lazy_buffer::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1581 ~ itertools[f416]::lazy_buffer::{impl#0}::get_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).34), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:17: 66:28 (#0), res: Local(HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).24)), segments: [PathSegment { ident: indices_int#0, hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).36), res: Local(HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:17: 66:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:16: 66:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).37), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:47: 66:48 (#0) }, Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).38), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).39), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).40), kind: Field(Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:35 (#0), res: Local(HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).42), res: Local(HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:35 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:41: 66:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:46 (#0) }, Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).43), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:49: 66:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:49: 66:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).38), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).39), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).40), kind: Field(Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:35 (#0), res: Local(HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).42), res: Local(HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:35 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:41: 66:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:31: 66:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).43), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:49: 66:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:66:49: 66:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1578 ~ itertools[f416]::lazy_buffer::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:67:38: 67:49 (#0), res: Local(HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).24)), segments: [PathSegment { ident: indices_int#0, hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).56), res: Local(HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:67:38: 67:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices).57), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:67:52: 67:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:67:52: 67:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).11), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).13), kind: Field(Expr { hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:18: 99:22 (#0), res: Local(HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).15), res: Local(HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:18: 99:22 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:18: 99:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:31: 99:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:18: 99:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).16), kind: MethodCall(PathSegment { ident: get_next#0, hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).17), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).18), kind: Field(Expr { hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:45: 99:49 (#0), res: Local(HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).20), res: Local(HirId(DefId(0:834 ~ itertools[f416]::combinations_with_replacement::{impl#2}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:45: 99:49 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:45: 99:54 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:55: 99:65 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:99:45: 99:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13229 ~ core[7d5a]::slice::{impl#0}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1581 ~ itertools[f416]::lazy_buffer::{impl#0}::get_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1585 ~ itertools[f416]::lazy_buffer::{impl#1}::get_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).13), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).14), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).15), kind: Field(Expr { hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:18: 112:22 (#0), res: Local(HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).17), res: Local(HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:18: 112:22 (#0) }, indices#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:18: 112:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:31: 112:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:18: 112:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).18), kind: MethodCall(PathSegment { ident: get_next#0, hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).19), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).20), kind: Field(Expr { hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:45: 112:49 (#0), res: Local(HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).22), res: Local(HirId(DefId(0:835 ~ itertools[f416]::combinations_with_replacement::{impl#2}::nth).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:45: 112:49 (#0) }, pool#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:45: 112:54 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:55: 112:65 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:112:45: 112:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13229 ~ core[7d5a]::slice::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1581 ~ itertools[f416]::lazy_buffer::{impl#0}::get_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:830 ~ itertools[f416]::combinations_with_replacement::{impl#1}::increment_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1585 ~ itertools[f416]::lazy_buffer::{impl#1}::get_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:836 ~ itertools[f416]::combinations_with_replacement::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1579 ~ itertools[f416]::lazy_buffer::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:838 ~ itertools[f416]::combinations_with_replacement::{impl#2}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:159:28: 159:29 (#0), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).10)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).18), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:159:28: 159:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:159:33: 159:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:159:33: 159:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:162:14: 162:15 (#0), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).10)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).34), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:162:14: 162:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).35), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:162:18: 162:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:162:18: 162:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:168:9: 168:14 (#0), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).71)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).85), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).71)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:168:9: 168:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:189:29: 189:34 (#0), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).71)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).117), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).71)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:189:29: 189:34 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:168:9: 168:14 (#0), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).71)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).85), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).71)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:168:9: 168:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:189:29: 189:34 (#0), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).71)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).117), res: Local(HirId(DefId(0:841 ~ itertools[f416]::combinations_with_replacement::remaining_for).71)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/combinations_with_replacement.rs:189:29: 189:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:846 ~ itertools[f416]::concat_impl::concat)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9674 ~ core[7d5a]::option::{impl#0}::unwrap_or_default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2520 ~ itertools[f416]::Itertools::fold1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3560 ~ itertools[f416]::cons_tuples_impl::{impl#10}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3562 ~ itertools[f416]::cons_tuples_impl::{impl#10}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#299), res: Local(HirId(DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold).6)), segments: [PathSegment { ident: f#299, hir_id: HirId(DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold).25), res: Local(HirId(DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#299) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#299), res: Local(HirId(DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold).6)), segments: [PathSegment { ident: f#299, hir_id: HirId(DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold).25), res: Local(HirId(DefId(0:3563 ~ itertools[f416]::cons_tuples_impl::{impl#10}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#299) }
[DEBUG] Trying to get func ty of defid DefId(0:3547 ~ itertools[f416]::cons_tuples_impl::{impl#9}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3549 ~ itertools[f416]::cons_tuples_impl::{impl#9}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#298), res: Local(HirId(DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold).6)), segments: [PathSegment { ident: f#298, hir_id: HirId(DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold).26), res: Local(HirId(DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#298) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#298), res: Local(HirId(DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold).6)), segments: [PathSegment { ident: f#298, hir_id: HirId(DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold).26), res: Local(HirId(DefId(0:3550 ~ itertools[f416]::cons_tuples_impl::{impl#9}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#298) }
[DEBUG] Trying to get func ty of defid DefId(0:3533 ~ itertools[f416]::cons_tuples_impl::{impl#8}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3535 ~ itertools[f416]::cons_tuples_impl::{impl#8}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#297), res: Local(HirId(DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold).6)), segments: [PathSegment { ident: f#297, hir_id: HirId(DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold).27), res: Local(HirId(DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#297) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#297), res: Local(HirId(DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold).6)), segments: [PathSegment { ident: f#297, hir_id: HirId(DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold).27), res: Local(HirId(DefId(0:3536 ~ itertools[f416]::cons_tuples_impl::{impl#8}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#297) }
[DEBUG] Trying to get func ty of defid DefId(0:3518 ~ itertools[f416]::cons_tuples_impl::{impl#7}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3520 ~ itertools[f416]::cons_tuples_impl::{impl#7}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#296), res: Local(HirId(DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold).6)), segments: [PathSegment { ident: f#296, hir_id: HirId(DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold).28), res: Local(HirId(DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#296) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#296), res: Local(HirId(DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold).6)), segments: [PathSegment { ident: f#296, hir_id: HirId(DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold).28), res: Local(HirId(DefId(0:3521 ~ itertools[f416]::cons_tuples_impl::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#296) }
[DEBUG] Trying to get func ty of defid DefId(0:3502 ~ itertools[f416]::cons_tuples_impl::{impl#6}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3504 ~ itertools[f416]::cons_tuples_impl::{impl#6}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#295), res: Local(HirId(DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold).6)), segments: [PathSegment { ident: f#295, hir_id: HirId(DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold).29), res: Local(HirId(DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#295) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#295), res: Local(HirId(DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold).6)), segments: [PathSegment { ident: f#295, hir_id: HirId(DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold).29), res: Local(HirId(DefId(0:3505 ~ itertools[f416]::cons_tuples_impl::{impl#6}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#295) }
[DEBUG] Trying to get func ty of defid DefId(0:3485 ~ itertools[f416]::cons_tuples_impl::{impl#5}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3487 ~ itertools[f416]::cons_tuples_impl::{impl#5}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#294), res: Local(HirId(DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold).6)), segments: [PathSegment { ident: f#294, hir_id: HirId(DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold).30), res: Local(HirId(DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#294) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#294), res: Local(HirId(DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold).6)), segments: [PathSegment { ident: f#294, hir_id: HirId(DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold).30), res: Local(HirId(DefId(0:3488 ~ itertools[f416]::cons_tuples_impl::{impl#5}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#294) }
[DEBUG] Trying to get func ty of defid DefId(0:3467 ~ itertools[f416]::cons_tuples_impl::{impl#4}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3469 ~ itertools[f416]::cons_tuples_impl::{impl#4}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#293), res: Local(HirId(DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold).6)), segments: [PathSegment { ident: f#293, hir_id: HirId(DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold).31), res: Local(HirId(DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#293) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#293), res: Local(HirId(DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold).6)), segments: [PathSegment { ident: f#293, hir_id: HirId(DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold).31), res: Local(HirId(DefId(0:3470 ~ itertools[f416]::cons_tuples_impl::{impl#4}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#293) }
[DEBUG] Trying to get func ty of defid DefId(0:3448 ~ itertools[f416]::cons_tuples_impl::{impl#3}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3450 ~ itertools[f416]::cons_tuples_impl::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#292), res: Local(HirId(DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold).6)), segments: [PathSegment { ident: f#292, hir_id: HirId(DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold).32), res: Local(HirId(DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#292) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#292), res: Local(HirId(DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold).6)), segments: [PathSegment { ident: f#292, hir_id: HirId(DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold).32), res: Local(HirId(DefId(0:3451 ~ itertools[f416]::cons_tuples_impl::{impl#3}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#292) }
[DEBUG] Trying to get func ty of defid DefId(0:3428 ~ itertools[f416]::cons_tuples_impl::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3430 ~ itertools[f416]::cons_tuples_impl::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#291), res: Local(HirId(DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold).6)), segments: [PathSegment { ident: f#291, hir_id: HirId(DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold).33), res: Local(HirId(DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#291) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#291), res: Local(HirId(DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold).6)), segments: [PathSegment { ident: f#291, hir_id: HirId(DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold).33), res: Local(HirId(DefId(0:3431 ~ itertools[f416]::cons_tuples_impl::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#291) }
[DEBUG] Trying to get func ty of defid DefId(0:3407 ~ itertools[f416]::cons_tuples_impl::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3409 ~ itertools[f416]::cons_tuples_impl::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#290), res: Local(HirId(DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold).6)), segments: [PathSegment { ident: f#290, hir_id: HirId(DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold).34), res: Local(HirId(DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#290) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#290), res: Local(HirId(DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold).6)), segments: [PathSegment { ident: f#290, hir_id: HirId(DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold).34), res: Local(HirId(DefId(0:3410 ~ itertools[f416]::cons_tuples_impl::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/cons_tuples_impl.rs:21:66: 21:67 (#290) }
[DEBUG] Trying to get func ty of defid DefId(0:3574 ~ itertools[f416]::cons_tuples_impl::{impl#11}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3575 ~ itertools[f416]::cons_tuples_impl::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:854 ~ itertools[f416]::cons_tuples_impl::cons_tuples)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:880 ~ itertools[f416]::diff::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10817 ~ core[7d5a]::fmt::builders::{impl#4}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10810 ~ core[7d5a]::fmt::builders::{impl#4}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11208 ~ core[7d5a]::fmt::{impl#9}::debug_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:884 ~ itertools[f416]::diff::{impl#1}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:885 ~ itertools[f416]::diff::diff_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ itertools[f416]::adaptors::{impl#4}::with_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:885 ~ itertools[f416]::diff::diff_with).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/diff.rs:93:21: 93:29 (#0), res: Local(HirId(DefId(0:885 ~ itertools[f416]::diff::diff_with).6)), segments: [PathSegment { ident: is_equal#0, hir_id: HirId(DefId(0:885 ~ itertools[f416]::diff::diff_with).70), res: Local(HirId(DefId(0:885 ~ itertools[f416]::diff::diff_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/diff.rs:93:21: 93:29 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ itertools[f416]::adaptors::{impl#4}::with_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ itertools[f416]::adaptors::{impl#4}::with_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ itertools[f416]::adaptors::{impl#4}::with_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:885 ~ itertools[f416]::diff::diff_with).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/diff.rs:93:21: 93:29 (#0), res: Local(HirId(DefId(0:885 ~ itertools[f416]::diff::diff_with).6)), segments: [PathSegment { ident: is_equal#0, hir_id: HirId(DefId(0:885 ~ itertools[f416]::diff::diff_with).70), res: Local(HirId(DefId(0:885 ~ itertools[f416]::diff::diff_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/diff.rs:93:21: 93:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3586 ~ itertools[f416]::duplicates_impl::private::{impl#10}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3587 ~ itertools[f416]::duplicates_impl::private::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:904 ~ itertools[f416]::duplicates_impl::private::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:876 ~ std[e3cd]::collections::hash::map::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3597 ~ itertools[f416]::duplicates_impl::private::{impl#11}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:908 ~ itertools[f416]::duplicates_impl::private::{impl#2}::filter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:929 ~ itertools[f416]::duplicates_impl::private::KeyMethod::make)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:926 ~ std[e3cd]::collections::hash::map::{impl#2}::get_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:945 ~ itertools[f416]::duplicates_impl::private::KeyXorValue::key_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:928 ~ std[e3cd]::collections::hash::map::{impl#2}::insert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:946 ~ itertools[f416]::duplicates_impl::private::KeyXorValue::key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:947 ~ itertools[f416]::duplicates_impl::private::KeyXorValue::value)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:915 ~ itertools[f416]::duplicates_impl::private::{impl#3}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9029 ~ core[7d5a]::iter::traits::iterator::Iterator::find_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:908 ~ itertools[f416]::duplicates_impl::private::{impl#2}::filter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:88:20: 88:22 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).20)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).25), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:88:20: 88:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).26), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).27), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:88:26: 88:30 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).29), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:88:26: 88:30 (#0) }, meta#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:88:26: 88:35 (#0) }, pending#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:88:26: 88:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).37), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).38), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:21: 97:25 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).40), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:21: 97:25 (#0) }, meta#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:21: 97:30 (#0) }, pending#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:21: 97:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).41), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:66: 97:67 (#0) }, Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).42), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:45: 97:46 (#0) }, Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:42: 97:44 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).20)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).44), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:42: 97:44 (#0) }, Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).45), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).46), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:51 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).48), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:51 (#0) }, meta#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:56 (#0) }, pending#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:41: 97:65 (#0) }, Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).49), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:68: 97:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:68: 97:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:41: 97:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).42), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:45: 97:46 (#0) }, Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:42: 97:44 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).20)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).44), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:42: 97:44 (#0) }, Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).45), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).46), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:51 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).48), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:51 (#0) }, meta#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:56 (#0) }, pending#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:41: 97:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).49), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:68: 97:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:68: 97:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:42: 97:44 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).20)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).44), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:42: 97:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).45), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).46), kind: Field(Expr { hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:51 (#0), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).48), res: Local(HirId(DefId(0:917 ~ itertools[f416]::duplicates_impl::private::{impl#3}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:51 (#0) }, meta#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:56 (#0) }, pending#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:97:47: 97:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:923 ~ itertools[f416]::duplicates_impl::private::{impl#4}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9029 ~ core[7d5a]::iter::traits::iterator::Iterator::find_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:908 ~ itertools[f416]::duplicates_impl::private::{impl#2}::filter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3601 ~ itertools[f416]::duplicates_impl::private::{impl#12}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3603 ~ itertools[f416]::duplicates_impl::private::{impl#13}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:933 ~ itertools[f416]::duplicates_impl::private::{impl#5}::make)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3610 ~ itertools[f416]::duplicates_impl::private::{impl#14}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3611 ~ itertools[f416]::duplicates_impl::private::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).9), kind: Field(Expr { hir_id: HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:148:23: 148:27 (#0), res: Local(HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).11), res: Local(HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:148:23: 148:27 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:148:22: 148:30 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).9), kind: Field(Expr { hir_id: HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:148:23: 148:27 (#0), res: Local(HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).11), res: Local(HirId(DefId(0:941 ~ itertools[f416]::duplicates_impl::private::{impl#7}::make).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:148:23: 148:27 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/duplicates_impl.rs:148:22: 148:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3621 ~ itertools[f416]::duplicates_impl::private::{impl#15}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11212 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:951 ~ itertools[f416]::duplicates_impl::private::{impl#8}::key_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:952 ~ itertools[f416]::duplicates_impl::private::{impl#8}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:953 ~ itertools[f416]::duplicates_impl::private::{impl#8}::value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3628 ~ itertools[f416]::duplicates_impl::private::{impl#16}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:956 ~ itertools[f416]::duplicates_impl::private::{impl#9}::key_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:957 ~ itertools[f416]::duplicates_impl::private::{impl#9}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:958 ~ itertools[f416]::duplicates_impl::private::{impl#9}::value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:963 ~ itertools[f416]::duplicates_impl::duplicates_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:904 ~ itertools[f416]::duplicates_impl::private::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:969 ~ itertools[f416]::duplicates_impl::duplicates)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:904 ~ itertools[f416]::duplicates_impl::private::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3636 ~ itertools[f416]::exactly_one_err::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:983 ~ itertools[f416]::exactly_one_err::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:985 ~ itertools[f416]::exactly_one_err::{impl#0}::additional_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:989 ~ itertools[f416]::exactly_one_err::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:990 ~ itertools[f416]::exactly_one_err::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:985 ~ itertools[f416]::exactly_one_err::{impl#0}::additional_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:73:24: 73:25 (#0), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).26), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:73:24: 73:25 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:74:24: 74:25 (#0), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).37), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:74:24: 74:25 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:76:51: 76:52 (#0), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).56), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:76:51: 76:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:73:24: 73:25 (#0), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).26), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:73:24: 73:25 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:74:24: 74:25 (#0), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).37), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:74:24: 74:25 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:76:51: 76:52 (#0), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).56), res: Local(HirId(DefId(0:991 ~ itertools[f416]::exactly_one_err::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:76:51: 76:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:998 ~ itertools[f416]::exactly_one_err::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:985 ~ itertools[f416]::exactly_one_err::{impl#0}::additional_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:998 ~ itertools[f416]::exactly_one_err::{impl#3}::fmt).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:91:12: 91:22 (#0), res: Local(HirId(DefId(0:998 ~ itertools[f416]::exactly_one_err::{impl#3}::fmt).11)), segments: [PathSegment { ident: additional#0, hir_id: HirId(DefId(0:998 ~ itertools[f416]::exactly_one_err::{impl#3}::fmt).15), res: Local(HirId(DefId(0:998 ~ itertools[f416]::exactly_one_err::{impl#3}::fmt).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:91:12: 91:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:998 ~ itertools[f416]::exactly_one_err::{impl#3}::fmt).16), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:91:25: 91:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/exactly_one_err.rs:91:25: 91:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1001 ~ itertools[f416]::exactly_one_err::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:19:35: 19:42 (#0), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).28), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:19:35: 19:42 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8913 ~ core[7d5a]::iter::traits::iterator::Iterator::for_each)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:22:27: 22:34 (#0), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).63), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:22:27: 22:34 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:23:23: 23:30 (#0), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).6)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).72), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:23:23: 23:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7511 ~ alloc[5873]::vec::{impl#1}::clear)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:19:35: 19:42 (#0), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).28), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:19:35: 19:42 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:22:27: 22:34 (#0), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).63), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:22:27: 22:34 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:23:23: 23:30 (#0), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).6)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).72), res: Local(HirId(DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:23:23: 23:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1009 ~ itertools[f416]::extrema_set::min_set_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:48:9: 48:16 (#0), res: Local(HirId(DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl).6)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl).26), res: Local(HirId(DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:48:9: 48:16 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:48:9: 48:16 (#0), res: Local(HirId(DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl).6)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl).26), res: Local(HirId(DefId(0:1015 ~ itertools[f416]::extrema_set::max_set_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/extrema_set.rs:48:9: 48:16 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1028 ~ itertools[f416]::flatten_ok::flatten_ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1044 ~ itertools[f416]::flatten_ok::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:82:44: 82:45 (#0), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).29), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:82:44: 82:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:87:55: 87:56 (#0), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).83), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:87:55: 87:56 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:88:23: 88:24 (#0), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).99), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:88:23: 88:24 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:93:43: 93:44 (#0), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).131), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:93:43: 93:44 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:105:27: 105:37 (#0), res: Local(HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).36)), segments: [PathSegment { ident: inner_hint#0, hir_id: HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).40), res: Local(HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:105:27: 105:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:106:26: 106:36 (#0), res: Local(HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).36)), segments: [PathSegment { ident: inner_hint#0, hir_id: HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).50), res: Local(HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:106:26: 106:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:82:44: 82:45 (#0), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).29), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:82:44: 82:45 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:87:55: 87:56 (#0), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).83), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:87:55: 87:56 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:88:23: 88:24 (#0), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).99), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:88:23: 88:24 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:93:43: 93:44 (#0), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).131), res: Local(HirId(DefId(0:1045 ~ itertools[f416]::flatten_ok::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:93:43: 93:44 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:105:27: 105:37 (#0), res: Local(HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).36)), segments: [PathSegment { ident: inner_hint#0, hir_id: HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).40), res: Local(HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:105:27: 105:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:106:26: 106:36 (#0), res: Local(HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).36)), segments: [PathSegment { ident: inner_hint#0, hir_id: HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).50), res: Local(HirId(DefId(0:1052 ~ itertools[f416]::flatten_ok::{impl#0}::size_hint).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:106:26: 106:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1058 ~ itertools[f416]::flatten_ok::{impl#1}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:164:45: 164:46 (#0), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).29), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:164:45: 164:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:169:56: 169:57 (#0), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).83), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:169:56: 169:57 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:170:23: 170:24 (#0), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).99), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:170:23: 170:24 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:175:44: 175:45 (#0), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).131), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:175:44: 175:45 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:164:45: 164:46 (#0), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).29), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:164:45: 164:46 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:169:56: 169:57 (#0), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).83), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:169:56: 169:57 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:170:23: 170:24 (#0), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).99), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:170:23: 170:24 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:175:44: 175:45 (#0), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).131), res: Local(HirId(DefId(0:1059 ~ itertools[f416]::flatten_ok::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/flatten_ok.rs:175:44: 175:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3637 ~ itertools[f416]::flatten_ok::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3638 ~ itertools[f416]::flatten_ok::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1092 ~ itertools[f416]::format::new_format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4950 ~ core[7d5a]::cell::{impl#9}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1095 ~ itertools[f416]::format::new_format_default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4950 ~ core[7d5a]::cell::{impl#9}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4969 ~ core[7d5a]::cell::{impl#12}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:62:13: 62:19 (#0), res: Local(HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).32)), segments: [PathSegment { ident: format#0, hir_id: HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).46), res: Local(HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:62:13: 62:19 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8991 ~ core[7d5a]::iter::traits::iterator::Iterator::try_for_each)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:67:17: 67:23 (#0), res: Local(HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).32)), segments: [PathSegment { ident: format#0, hir_id: HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).133), res: Local(HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:67:17: 67:23 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:62:13: 62:19 (#0), res: Local(HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).32)), segments: [PathSegment { ident: format#0, hir_id: HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).46), res: Local(HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:62:13: 62:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:67:17: 67:23 (#0), res: Local(HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).32)), segments: [PathSegment { ident: format#0, hir_id: HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).133), res: Local(HirId(DefId(0:1101 ~ itertools[f416]::format::{impl#0}::fmt).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:67:17: 67:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1109 ~ itertools[f416]::format::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4969 ~ core[7d5a]::cell::{impl#12}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:99:13: 99:15 (#0), res: Local(HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).6)), segments: [PathSegment { ident: cb#0, hir_id: HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).46), res: Local(HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:99:13: 99:15 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8991 ~ core[7d5a]::iter::traits::iterator::Iterator::try_for_each)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:104:17: 104:19 (#0), res: Local(HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).6)), segments: [PathSegment { ident: cb#0, hir_id: HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).118), res: Local(HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:104:17: 104:19 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:99:13: 99:15 (#0), res: Local(HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).6)), segments: [PathSegment { ident: cb#0, hir_id: HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).46), res: Local(HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:99:13: 99:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:104:17: 104:19 (#0), res: Local(HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).6)), segments: [PathSegment { ident: cb#0, hir_id: HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).118), res: Local(HirId(DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/format.rs:104:17: 104:19 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3642 ~ itertools[f416]::format::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3646 ~ itertools[f416]::format::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11137 ~ core[7d5a]::fmt::Debug::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:3650 ~ itertools[f416]::format::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11156 ~ core[7d5a]::fmt::UpperExp::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:3654 ~ itertools[f416]::format::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11154 ~ core[7d5a]::fmt::LowerExp::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:3658 ~ itertools[f416]::format::{impl#9}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11150 ~ core[7d5a]::fmt::UpperHex::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:3662 ~ itertools[f416]::format::{impl#10}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11148 ~ core[7d5a]::fmt::LowerHex::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:3666 ~ itertools[f416]::format::{impl#11}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11144 ~ core[7d5a]::fmt::Octal::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:3670 ~ itertools[f416]::format::{impl#12}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11146 ~ core[7d5a]::fmt::Binary::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:3674 ~ itertools[f416]::format::{impl#13}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1113 ~ itertools[f416]::format::{impl#2}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11152 ~ core[7d5a]::fmt::Pointer::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1120 ~ itertools[f416]::format::{impl#3}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1133 ~ itertools[f416]::format::{impl#3}::clone::{impl#0}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4951 ~ core[7d5a]::cell::{impl#9}::set)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4969 ~ core[7d5a]::cell::{impl#12}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4950 ~ core[7d5a]::cell::{impl#9}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1133 ~ itertools[f416]::format::{impl#3}::clone::{impl#0}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4951 ~ core[7d5a]::cell::{impl#9}::set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1137 ~ itertools[f416]::format::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1148 ~ itertools[f416]::format::{impl#4}::clone::{impl#0}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4951 ~ core[7d5a]::cell::{impl#9}::set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4969 ~ core[7d5a]::cell::{impl#12}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4950 ~ core[7d5a]::cell::{impl#9}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1148 ~ itertools[f416]::format::{impl#4}::clone::{impl#0}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4951 ~ core[7d5a]::cell::{impl#9}::set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1153 ~ itertools[f416]::group_map::into_group_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:876 ~ std[e3cd]::collections::hash::map::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8913 ~ core[7d5a]::iter::traits::iterator::Iterator::for_each)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1477 ~ std[e3cd]::collections::hash::map::{impl#75}::or_insert_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:909 ~ std[e3cd]::collections::hash::map::{impl#2}::entry)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1153 ~ itertools[f416]::group_map::into_group_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/group_map.rs:31:34: 31:35 (#0), res: Local(HirId(DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by).18), res: Local(HirId(DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/group_map.rs:31:34: 31:35 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/group_map.rs:31:34: 31:35 (#0), res: Local(HirId(DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by).18), res: Local(HirId(DefId(0:1158 ~ itertools[f416]::group_map::into_group_map_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/group_map.rs:31:34: 31:35 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:17:11: 17:15 (#0), res: Local(HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).8), res: Local(HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:17:11: 17:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:17:9: 17:16 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).6), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:17:11: 17:15 (#0), res: Local(HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).8), res: Local(HirId(DefId(0:1180 ~ itertools[f416]::groupbylazy::{impl#0}::call_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:17:11: 17:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:17:9: 17:16 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3680 ~ itertools[f416]::groupbylazy::{impl#16}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3682 ~ itertools[f416]::groupbylazy::{impl#17}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1182 ~ itertools[f416]::groupbylazy::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).7), kind: Field(Expr { hir_id: HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:44:12: 44:16 (#0), res: Local(HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).9), res: Local(HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:44:12: 44:16 (#0) }, index#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:44:12: 44:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).10), kind: Field(Expr { hir_id: HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:44:26: 44:30 (#0), res: Local(HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).12), res: Local(HirId(DefId(0:1186 ~ itertools[f416]::groupbylazy::{impl#2}::call_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:44:26: 44:30 (#0) }, size#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:44:26: 44:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3701 ~ itertools[f416]::groupbylazy::{impl#18}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:94:12: 94:18 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).8), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:94:12: 94:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).9), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:94:21: 94:25 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).11), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:94:21: 94:25 (#0) }, oldest_buffered_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:94:21: 94:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).19), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:26: 96:27 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:19: 96:25 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).21), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:19: 96:25 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).22), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:28: 96:32 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).24), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:28: 96:32 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:28: 96:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:19: 96:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).25), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:42: 97:44 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:24: 97:26 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:17: 97:23 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).28), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:17: 97:23 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).29), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:31 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).31), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:31 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:17: 97:41 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).32), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:63: 97:64 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).33), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).35), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:49 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).37), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:49 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:56 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:57: 97:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:62 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).38), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:80: 97:81 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).39), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:69 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).41), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:69 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:79 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).42), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:86 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).44), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:86 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:16: 97:100 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:19: 96:25 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).21), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:19: 96:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).22), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:28: 96:32 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).24), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:28: 96:32 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:96:28: 96:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:24: 97:26 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:17: 97:23 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).28), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:17: 97:23 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).29), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:31 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).31), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:31 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:17: 97:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).32), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:63: 97:64 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).33), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).35), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:49 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).37), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:49 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:56 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:57: 97:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:62 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).38), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:80: 97:81 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).39), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:69 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).41), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:69 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:79 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).42), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:86 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).44), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:86 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:99 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:17: 97:23 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).28), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:17: 97:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).29), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:31 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).31), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:31 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:27: 97:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).33), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).35), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:49 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).37), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:49 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:56 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:57: 97:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:45: 97:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).38), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:80: 97:81 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).39), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:69 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).41), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:69 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:79 (#0) }, Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).42), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:86 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).44), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:86 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:99 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).39), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:69 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).41), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:69 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:65: 97:79 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).42), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:86 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).44), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:86 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:97:82: 97:99 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).65), kind: Field(Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:102:19: 102:23 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).67), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:102:19: 102:23 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:102:19: 102:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:102:37: 102:43 (#0), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).69), res: Local(HirId(DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:102:37: 102:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:112:22: 112:28 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).8), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:112:22: 112:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).9), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:112:31: 112:35 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).11), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:112:31: 112:35 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:112:31: 112:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:113:12: 113:18 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).17), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:113:12: 113:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).18), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:113:21: 113:25 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).20), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:113:21: 113:25 (#0) }, oldest_buffered_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:113:21: 113:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).51), kind: MethodCall(PathSegment { ident: is_none#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).52), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:12: 117:15 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).48)), segments: [PathSegment { ident: elt#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).54), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).48)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:12: 117:15 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:16: 117:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:12: 117:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).55), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:36: 117:38 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:29: 117:35 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).57), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:29: 117:35 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).58), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:39: 117:43 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).60), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:39: 117:43 (#0) }, oldest_buffered_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:39: 117:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:29: 117:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:29: 117:35 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).57), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:29: 117:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).58), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:39: 117:43 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).60), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:39: 117:43 (#0) }, oldest_buffered_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:117:39: 117:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9681 ~ core[7d5a]::option::{impl#0}::map_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).77), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:125:22: 125:26 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).79), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:125:22: 125:26 (#0) }, oldest_buffered_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:125:22: 125:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).80), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:125:51: 125:55 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).82), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:125:51: 125:55 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:125:51: 125:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).88), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).89), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:126:38: 126:41 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).86)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).91), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).86)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:126:38: 126:41 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:126:42: 126:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:126:38: 126:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).92), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:126:51: 126:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:126:51: 126:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).112), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:131:26: 131:30 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).114), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:131:26: 131:30 (#0) }, oldest_buffered_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:131:26: 131:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).115), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:131:55: 131:59 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).117), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:131:55: 131:59 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:131:55: 131:72 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).122), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:23: 132:24 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:16: 132:22 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), segments: [PathSegment { ident: nclear#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).124), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:16: 132:22 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).125), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:25: 132:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:25: 132:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:16: 132:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).126), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:37: 132:39 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:30: 132:36 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), segments: [PathSegment { ident: nclear#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).128), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:30: 132:36 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).129), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:58: 132:59 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).130), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).131), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).132), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:44 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).134), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:44 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:51 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:52: 132:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:57 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).135), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:60: 132:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:60: 132:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:30: 132:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:16: 132:22 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), segments: [PathSegment { ident: nclear#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).124), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:16: 132:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).125), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:25: 132:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:25: 132:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:30: 132:36 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), segments: [PathSegment { ident: nclear#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).128), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:30: 132:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).129), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:58: 132:59 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).130), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).131), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).132), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:44 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).134), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:44 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:51 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:52: 132:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:57 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).135), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:60: 132:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:60: 132:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).130), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).131), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).132), kind: Field(Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:44 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).134), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:44 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:51 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:52: 132:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:40: 132:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).135), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:60: 132:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:132:60: 132:61 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7460 ~ alloc[5873]::vec::{impl#1}::retain)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).161), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:45: 136:47 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).162), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).163), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:35: 136:38 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).148)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).165), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:35: 136:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:39: 136:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:35: 136:44 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).166), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:48: 136:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:48: 136:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:35: 136:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).167), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:55: 136:56 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).168), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:53: 136:54 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).140)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).169), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).140)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:53: 136:54 (#0) }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:57: 136:63 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), segments: [PathSegment { ident: nclear#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).171), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:57: 136:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:53: 136:63 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).162), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).163), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:35: 136:38 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).148)), segments: [PathSegment { ident: buf#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).165), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:35: 136:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:39: 136:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:35: 136:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).166), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:48: 136:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:48: 136:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).168), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:53: 136:54 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).140)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).169), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).140)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:53: 136:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:57: 136:63 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), segments: [PathSegment { ident: nclear#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).171), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:136:57: 136:63 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:137:21: 137:22 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).140)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).187), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).140)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:137:21: 137:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).188), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:137:25: 137:31 (#0), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), segments: [PathSegment { ident: nclear#0, hir_id: HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).189), res: Local(HirId(DefId(0:1193 ~ itertools[f416]::groupbylazy::{impl#3}::lookup_buffer).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:137:25: 137:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1197 ~ itertools[f416]::groupbylazy::{impl#3}::next_element)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:38: 166:39 (#0) }, Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).12), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:23: 166:27 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).14), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:23: 166:27 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:23: 166:37 (#0) }, Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).15), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:40: 166:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:40: 166:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:23: 166:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:45: 166:51 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).17), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:45: 166:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).12), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:23: 166:27 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).14), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:23: 166:27 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:23: 166:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).15), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:40: 166:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:166:40: 166:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).51), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:170:16: 170:20 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).53), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:170:16: 170:20 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:170:16: 170:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).54), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:170:34: 170:38 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).56), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:170:34: 170:38 (#0) }, dropped_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:170:34: 170:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1197 ~ itertools[f416]::groupbylazy::{impl#3}::next_element)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1174 ~ itertools[f416]::groupbylazy::KeyFunction::call_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:181:24: 181:31 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).107)), segments: [PathSegment { ident: old_key#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).114), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).107)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:181:24: 181:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:181:35: 181:38 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).94)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).116), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).94)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:181:35: 181:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).155), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:189:16: 189:20 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).157), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:189:16: 189:20 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:189:16: 189:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).158), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:189:34: 189:38 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).160), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:189:34: 189:38 (#0) }, dropped_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:189:34: 189:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).182), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:194:12: 194:16 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).184), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:194:12: 194:16 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:194:12: 194:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).185), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:194:30: 194:34 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).187), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:194:30: 194:34 (#0) }, dropped_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:194:30: 194:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).217), kind: Field(Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).218), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:199:27: 199:31 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).219), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:199:27: 199:31 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:199:27: 199:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:199:45: 199:51 (#0), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).221), res: Local(HirId(DefId(0:1198 ~ itertools[f416]::groupbylazy::{impl#3}::step_buffering).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:199:45: 199:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).7), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:30: 206:31 (#0) }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).8), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:15: 206:19 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).10), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:15: 206:19 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:15: 206:29 (#0) }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).11), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:32: 206:36 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).13), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:32: 206:36 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:32: 206:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:15: 206:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).14), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).16), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:52: 206:56 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).18), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:52: 206:56 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:52: 206:63 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:64: 206:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:52: 206:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).8), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:15: 206:19 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).10), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:15: 206:19 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:15: 206:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).11), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:32: 206:36 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).13), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:32: 206:36 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:206:32: 206:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).81), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:42: 215:43 (#0) }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).82), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:38: 215:39 (#0) }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).83), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:27 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).85), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:27 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:37 (#0) }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).86), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:40: 215:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:40: 215:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:41 (#0) }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).87), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:44: 215:48 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).89), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:44: 215:48 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:44: 215:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).90), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).91), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).92), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:65: 215:69 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).94), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:65: 215:69 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:65: 215:76 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:77: 215:82 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:65: 215:82 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).82), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:38: 215:39 (#0) }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).83), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:27 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).85), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:27 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:37 (#0) }, Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).86), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:40: 215:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:40: 215:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).87), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:44: 215:48 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).89), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:44: 215:48 (#0) }, bottom_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:44: 215:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).83), kind: Field(Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:27 (#0), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).85), res: Local(HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:27 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:23: 215:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1199 ~ itertools[f416]::groupbylazy::{impl#3}::push_next_group).86), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:40: 215:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:215:40: 215:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1197 ~ itertools[f416]::groupbylazy::{impl#3}::next_element)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1174 ~ itertools[f416]::groupbylazy::KeyFunction::call_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:232:28: 232:35 (#0), res: Local(HirId(DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current).80)), segments: [PathSegment { ident: old_key#0, hir_id: HirId(DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current).87), res: Local(HirId(DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:232:28: 232:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:232:39: 232:42 (#0), res: Local(HirId(DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current).67)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current).89), res: Local(HirId(DefId(0:1200 ~ itertools[f416]::groupbylazy::{impl#3}::step_current).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:232:39: 232:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:257:23: 257:29 (#0), res: Local(HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).34), res: Local(HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:257:23: 257:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).35), kind: Field(Expr { hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:257:33: 257:37 (#0), res: Local(HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).37), res: Local(HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:257:33: 257:37 (#0) }, top_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:257:33: 257:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1197 ~ itertools[f416]::groupbylazy::{impl#3}::next_element)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1174 ~ itertools[f416]::groupbylazy::KeyFunction::call_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:263:16: 263:23 (#0), res: Local(HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).106)), segments: [PathSegment { ident: old_key#0, hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).130), res: Local(HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).106)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:263:16: 263:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).131), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:263:27: 263:30 (#0), res: Local(HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).126)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).132), res: Local(HirId(DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:263:27: 263:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).7), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:31: 280:33 (#0) }, Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).8), kind: Field(Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:12: 280:16 (#0), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).10), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:12: 280:16 (#0) }, dropped_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:12: 280:30 (#0) }, Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).11), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).12), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:35: 280:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:35: 280:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:34: 280:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:12: 280:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).13), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:47: 280:48 (#0) }, Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:40: 280:46 (#0), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).15), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:40: 280:46 (#0) }, Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).16), kind: Field(Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:49: 280:53 (#0), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).18), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:49: 280:53 (#0) }, dropped_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:49: 280:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:40: 280:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).8), kind: Field(Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:12: 280:16 (#0), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).10), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:12: 280:16 (#0) }, dropped_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:12: 280:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).11), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).12), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:35: 280:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:35: 280:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:34: 280:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:40: 280:46 (#0), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).4)), segments: [PathSegment { ident: client#0, hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).15), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:40: 280:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).16), kind: Field(Expr { hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:49: 280:53 (#0), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).18), res: Local(HirId(DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:49: 280:53 (#0) }, dropped_group#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:280:49: 280:67 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1217 ~ itertools[f416]::groupbylazy::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5009 ~ core[7d5a]::cell::{impl#21}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:4950 ~ core[7d5a]::cell::{impl#9}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ itertools[f416]::groupbylazy::{impl#5}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1226 ~ itertools[f416]::groupbylazy::{impl#5}::drop_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1234 ~ itertools[f416]::groupbylazy::{impl#6}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1247 ~ itertools[f416]::groupbylazy::{impl#7}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4959 ~ core[7d5a]::cell::{impl#10}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:4951 ~ core[7d5a]::cell::{impl#9}::set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1247 ~ itertools[f416]::groupbylazy::{impl#7}::next).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:400:31: 400:36 (#0), res: Local(HirId(DefId(0:1247 ~ itertools[f416]::groupbylazy::{impl#7}::next).11)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:1247 ~ itertools[f416]::groupbylazy::{impl#7}::next).20), res: Local(HirId(DefId(0:1247 ~ itertools[f416]::groupbylazy::{impl#7}::next).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:400:31: 400:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1247 ~ itertools[f416]::groupbylazy::{impl#7}::next).21), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:400:39: 400:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:400:39: 400:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1201 ~ itertools[f416]::groupbylazy::{impl#3}::group_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1262 ~ itertools[f416]::groupbylazy::{impl#8}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1226 ~ itertools[f416]::groupbylazy::{impl#5}::drop_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1269 ~ itertools[f416]::groupbylazy::{impl#9}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1225 ~ itertools[f416]::groupbylazy::{impl#5}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1270 ~ itertools[f416]::groupbylazy::new_chunks)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5009 ~ core[7d5a]::cell::{impl#21}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1182 ~ itertools[f416]::groupbylazy::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:4950 ~ core[7d5a]::cell::{impl#9}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3702 ~ itertools[f416]::groupbylazy::{impl#10}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1280 ~ itertools[f416]::groupbylazy::{impl#11}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1281 ~ itertools[f416]::groupbylazy::{impl#11}::drop_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1206 ~ itertools[f416]::groupbylazy::{impl#4}::drop_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1287 ~ itertools[f416]::groupbylazy::{impl#12}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3710 ~ itertools[f416]::groupbylazy::{impl#19}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1292 ~ itertools[f416]::groupbylazy::{impl#13}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4959 ~ core[7d5a]::cell::{impl#10}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4951 ~ core[7d5a]::cell::{impl#9}::set)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1292 ~ itertools[f416]::groupbylazy::{impl#13}::next).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:567:31: 567:36 (#0), res: Local(HirId(DefId(0:1292 ~ itertools[f416]::groupbylazy::{impl#13}::next).11)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:1292 ~ itertools[f416]::groupbylazy::{impl#13}::next).20), res: Local(HirId(DefId(0:1292 ~ itertools[f416]::groupbylazy::{impl#13}::next).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:567:31: 567:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1292 ~ itertools[f416]::groupbylazy::{impl#13}::next).21), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:567:39: 567:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/groupbylazy.rs:567:39: 567:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1192 ~ itertools[f416]::groupbylazy::{impl#3}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1303 ~ itertools[f416]::groupbylazy::{impl#14}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1281 ~ itertools[f416]::groupbylazy::{impl#11}::drop_group)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1308 ~ itertools[f416]::groupbylazy::{impl#15}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1280 ~ itertools[f416]::groupbylazy::{impl#11}::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3717 ~ itertools[f416]::grouping_map::{impl#3}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3718 ~ itertools[f416]::grouping_map::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).7), kind: Field(Expr { hir_id: HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:26:11: 26:15 (#0), res: Local(HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).9), res: Local(HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:26:11: 26:15 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:26:10: 26:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).7), kind: Field(Expr { hir_id: HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:26:11: 26:15 (#0), res: Local(HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).9), res: Local(HirId(DefId(0:1332 ~ itertools[f416]::grouping_map::{impl#1}::call).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:26:11: 26:15 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:26:10: 26:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1333 ~ itertools[f416]::grouping_map::new_map_for_grouping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1337 ~ itertools[f416]::grouping_map::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3724 ~ itertools[f416]::grouping_map::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3727 ~ itertools[f416]::grouping_map::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:876 ~ std[e3cd]::collections::hash::map::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8913 ~ core[7d5a]::iter::traits::iterator::Iterator::for_each)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:930 ~ std[e3cd]::collections::hash::map::{impl#2}::remove)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:118:35: 118:44 (#0), res: Local(HirId(DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate).4)), segments: [PathSegment { ident: operation#0, hir_id: HirId(DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate).41), res: Local(HirId(DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:118:35: 118:44 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:928 ~ std[e3cd]::collections::hash::map::{impl#2}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9672 ~ core[7d5a]::option::{impl#0}::unwrap_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:165:45: 165:49 (#0), res: Local(HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).4)), segments: [PathSegment { ident: init#0, hir_id: HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).27), res: Local(HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:165:45: 165:49 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:166:18: 166:27 (#0), res: Local(HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).6)), segments: [PathSegment { ident: operation#0, hir_id: HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).40), res: Local(HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:166:18: 166:27 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1358 ~ itertools[f416]::grouping_map::{impl#2}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:236:30: 236:39 (#0), res: Local(HirId(DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce).4)), segments: [PathSegment { ident: operation#0, hir_id: HirId(DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce).29), res: Local(HirId(DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:236:30: 236:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1365 ~ itertools[f416]::grouping_map::{impl#2}::fold_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1367 ~ itertools[f416]::grouping_map::{impl#2}::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:876 ~ std[e3cd]::collections::hash::map::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8913 ~ core[7d5a]::iter::traits::iterator::Iterator::for_each)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1477 ~ std[e3cd]::collections::hash::map::{impl#75}::or_insert_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:909 ~ std[e3cd]::collections::hash::map::{impl#2}::entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:1370 ~ itertools[f416]::grouping_map::{impl#2}::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:333:43: 333:50 (#0), res: Local(HirId(DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by).19), res: Local(HirId(DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:333:43: 333:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:363:35: 363:36 (#0), res: Local(HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).20), res: Local(HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:363:35: 363:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:363:51: 363:52 (#0), res: Local(HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).28), res: Local(HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:363:51: 363:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1379 ~ itertools[f416]::grouping_map::{impl#2}::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:414:43: 414:50 (#0), res: Local(HirId(DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by).19), res: Local(HirId(DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:414:43: 414:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:444:35: 444:36 (#0), res: Local(HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).20), res: Local(HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:444:35: 444:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:444:51: 444:52 (#0), res: Local(HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).28), res: Local(HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:444:51: 444:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1388 ~ itertools[f416]::grouping_map::{impl#2}::minmax)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).33), kind: Call(Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:24: 511:31 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).35), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:24: 511:31 (#0) }, [Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:32: 511:35 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).13)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).37), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:32: 511:35 (#0) }, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).38), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:38: 511:41 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).15)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).40), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:38: 511:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:37: 511:41 (#0) }, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).41), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:44: 511:45 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).26)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).43), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:44: 511:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:43: 511:45 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:24: 511:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:50: 511:64 (#0), res: Def(Ctor(Variant, Const), DefId(2:26147 ~ core[7d5a]::cmp::Ordering::Less::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).45), res: Def(Enum, DefId(2:26145 ~ core[7d5a]::cmp::Ordering)), args: None, infer_args: true }, PathSegment { ident: Less#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).46), res: Def(Ctor(Variant, Const), DefId(2:26147 ~ core[7d5a]::cmp::Ordering::Less::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:50: 511:64 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:24: 511:31 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).35), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:24: 511:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).80), kind: Call(Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:24: 518:31 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).82), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:24: 518:31 (#0) }, [Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:32: 518:35 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).13)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).84), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:32: 518:35 (#0) }, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).85), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:38: 518:41 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).15)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).87), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:38: 518:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:37: 518:41 (#0) }, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).88), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:44: 518:47 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).72)), segments: [PathSegment { ident: min#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).90), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:44: 518:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:43: 518:47 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:24: 518:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:52: 518:66 (#0), res: Def(Ctor(Variant, Const), DefId(2:26147 ~ core[7d5a]::cmp::Ordering::Less::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).92), res: Def(Enum, DefId(2:26145 ~ core[7d5a]::cmp::Ordering)), args: None, infer_args: true }, PathSegment { ident: Less#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).93), res: Def(Ctor(Variant, Const), DefId(2:26147 ~ core[7d5a]::cmp::Ordering::Less::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:52: 518:66 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:24: 518:31 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).82), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:24: 518:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).107), kind: Call(Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:31: 520:38 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).109), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:31: 520:38 (#0) }, [Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:39: 520:42 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).13)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).111), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:39: 520:42 (#0) }, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).112), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:45: 520:48 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).15)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).114), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:45: 520:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:44: 520:48 (#0) }, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).115), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:51: 520:54 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).73)), segments: [PathSegment { ident: max#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).117), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).73)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:51: 520:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:50: 520:54 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:31: 520:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:59: 520:73 (#0), res: Def(Ctor(Variant, Const), DefId(2:26147 ~ core[7d5a]::cmp::Ordering::Less::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).119), res: Def(Enum, DefId(2:26145 ~ core[7d5a]::cmp::Ordering)), args: None, infer_args: true }, PathSegment { ident: Less#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).120), res: Def(Ctor(Variant, Const), DefId(2:26147 ~ core[7d5a]::cmp::Ordering::Less::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:59: 520:73 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:31: 520:38 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).109), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:31: 520:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:560:38: 560:39 (#0), res: Local(HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).20), res: Local(HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:560:38: 560:39 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:560:54: 560:55 (#0), res: Local(HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).28), res: Local(HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:560:54: 560:55 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:586:35: 586:38 (#0), res: Local(HirId(DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum).9)), segments: [PathSegment { ident: acc#0, hir_id: HirId(DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum).16), res: Local(HirId(DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:586:35: 586:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:586:41: 586:44 (#0), res: Local(HirId(DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum).13)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum).18), res: Local(HirId(DefId(0:1397 ~ itertools[f416]::grouping_map::{impl#2}::sum).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:586:41: 586:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:612:35: 612:38 (#0), res: Local(HirId(DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product).9)), segments: [PathSegment { ident: acc#0, hir_id: HirId(DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product).16), res: Local(HirId(DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:612:35: 612:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:612:41: 612:44 (#0), res: Local(HirId(DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product).13)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product).18), res: Local(HirId(DefId(0:1399 ~ itertools[f416]::grouping_map::{impl#2}::product).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:612:41: 612:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:118:35: 118:44 (#0), res: Local(HirId(DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate).4)), segments: [PathSegment { ident: operation#0, hir_id: HirId(DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate).41), res: Local(HirId(DefId(0:1348 ~ itertools[f416]::grouping_map::{impl#2}::aggregate).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:118:35: 118:44 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:165:45: 165:49 (#0), res: Local(HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).4)), segments: [PathSegment { ident: init#0, hir_id: HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).27), res: Local(HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:165:45: 165:49 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:166:18: 166:27 (#0), res: Local(HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).6)), segments: [PathSegment { ident: operation#0, hir_id: HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).40), res: Local(HirId(DefId(0:1352 ~ itertools[f416]::grouping_map::{impl#2}::fold_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:166:18: 166:27 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:236:30: 236:39 (#0), res: Local(HirId(DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce).4)), segments: [PathSegment { ident: operation#0, hir_id: HirId(DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce).29), res: Local(HirId(DefId(0:1362 ~ itertools[f416]::grouping_map::{impl#2}::reduce).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:236:30: 236:39 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:333:43: 333:50 (#0), res: Local(HirId(DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by).19), res: Local(HirId(DefId(0:1372 ~ itertools[f416]::grouping_map::{impl#2}::max_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:333:43: 333:50 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:363:35: 363:36 (#0), res: Local(HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).20), res: Local(HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:363:35: 363:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:363:51: 363:52 (#0), res: Local(HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).28), res: Local(HirId(DefId(0:1375 ~ itertools[f416]::grouping_map::{impl#2}::max_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:363:51: 363:52 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:414:43: 414:50 (#0), res: Local(HirId(DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by).19), res: Local(HirId(DefId(0:1381 ~ itertools[f416]::grouping_map::{impl#2}::min_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:414:43: 414:50 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:444:35: 444:36 (#0), res: Local(HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).20), res: Local(HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:444:35: 444:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:444:51: 444:52 (#0), res: Local(HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).28), res: Local(HirId(DefId(0:1384 ~ itertools[f416]::grouping_map::{impl#2}::min_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:444:51: 444:52 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:24: 511:31 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).35), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:511:24: 511:31 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:24: 518:31 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).82), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:518:24: 518:31 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:31: 520:38 (#0), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), segments: [PathSegment { ident: compare#0, hir_id: HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).109), res: Local(HirId(DefId(0:1390 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:520:31: 520:38 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:560:38: 560:39 (#0), res: Local(HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).20), res: Local(HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:560:38: 560:39 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:560:54: 560:55 (#0), res: Local(HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).28), res: Local(HirId(DefId(0:1393 ~ itertools[f416]::grouping_map::{impl#2}::minmax_by_key).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/grouping_map.rs:560:54: 560:55 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3734 ~ itertools[f416]::intersperse::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3737 ~ itertools[f416]::intersperse::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1411 ~ itertools[f416]::intersperse::{impl#0}::generate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1414 ~ itertools[f416]::intersperse::intersperse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1420 ~ itertools[f416]::intersperse::intersperse_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:37:9: 37:13 (#0), res: Local(HirId(DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate).5), res: Local(HirId(DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:37:9: 37:13 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:37:9: 37:13 (#0), res: Local(HirId(DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate).5), res: Local(HirId(DefId(0:1419 ~ itertools[f416]::intersperse::{impl#1}::generate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:37:9: 37:13 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3747 ~ itertools[f416]::intersperse::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3751 ~ itertools[f416]::intersperse::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1420 ~ itertools[f416]::intersperse::intersperse_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1427 ~ itertools[f416]::intersperse::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1408 ~ itertools[f416]::intersperse::IntersperseElement::generate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1428 ~ itertools[f416]::intersperse::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2058 ~ itertools[f416]::size_hint::sub_scalar)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9672 ~ core[7d5a]::option::{impl#0}::unwrap_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:127:21: 127:22 (#0), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).43), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:127:21: 127:22 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:131:25: 131:26 (#0), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).67), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:131:25: 131:26 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:132:13: 132:14 (#0), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).78), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:132:13: 132:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:127:21: 127:22 (#0), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).43), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:127:21: 127:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:131:25: 131:26 (#0), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).67), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:131:25: 131:26 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:132:13: 132:14 (#0), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).78), res: Local(HirId(DefId(0:1429 ~ itertools[f416]::intersperse::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/intersperse.rs:132:13: 132:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1464 ~ itertools[f416]::iter_index::{impl#0}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8934 ~ core[7d5a]::iter::traits::iterator::Iterator::skip)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).8), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).9), kind: MethodCall(PathSegment { ident: end#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:55:26: 55:30 (#0), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).12), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:55:26: 55:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:55:31: 55:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:55:26: 55:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:55:25: 55:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).13), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:55:40: 55:45 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).14), res: PrimTy(Uint(Usize)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:55:40: 55:45 (#0) }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).16), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:55:40: 55:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:3786 ~ core[7d5a]::ops::range::{impl#7}::end)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3785 ~ core[7d5a]::ops::range::{impl#7}::start)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).35), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#392), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).28)), segments: [PathSegment { ident: left_val#392, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).37), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#392) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:20: 102:29 (#392) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).38), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#392), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).29)), segments: [PathSegment { ident: right_val#392, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).40), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#392) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:33: 102:43 (#392) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).76), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:24: 57:25 (#0) }, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).77), kind: MethodCall(PathSegment { ident: end#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).78), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:13: 57:17 (#0), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).80), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:13: 57:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:18: 57:23 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:13: 57:23 (#0) }, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).81), kind: MethodCall(PathSegment { ident: start#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).82), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:26: 57:30 (#0), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).84), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:26: 57:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:31: 57:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:26: 57:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:13: 57:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).85), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:41: 57:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:41: 57:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).77), kind: MethodCall(PathSegment { ident: end#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).78), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:13: 57:17 (#0), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).80), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:13: 57:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:18: 57:23 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:13: 57:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).81), kind: MethodCall(PathSegment { ident: start#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).82), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:26: 57:30 (#0), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).84), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:26: 57:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:31: 57:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:57:26: 57:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:3786 ~ core[7d5a]::ops::range::{impl#7}::end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3785 ~ core[7d5a]::ops::range::{impl#7}::start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).92), kind: MethodCall(PathSegment { ident: end#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).93), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:59:14: 59:18 (#0), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).95), res: Local(HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:59:14: 59:18 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:59:19: 59:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:59:14: 59:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1468 ~ itertools[f416]::iter_index::{impl#1}::index).96), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:59:27: 59:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:59:27: 59:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:3786 ~ core[7d5a]::ops::range::{impl#7}::end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3785 ~ core[7d5a]::ops::range::{impl#7}::start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8934 ~ core[7d5a]::iter::traits::iterator::Iterator::skip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3785 ~ core[7d5a]::ops::range::{impl#7}::start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1472 ~ itertools[f416]::iter_index::{impl#2}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).23), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#393), res: Local(HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).16)), segments: [PathSegment { ident: left_val#393, hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).25), res: Local(HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#393) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:20: 102:29 (#393) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).26), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#393), res: Local(HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).17)), segments: [PathSegment { ident: right_val#393, hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).28), res: Local(HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#393) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:33: 102:43 (#393) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).68), kind: Field(Expr { hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:84:19: 84:23 (#0), res: Local(HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).70), res: Local(HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:84:19: 84:23 (#0) }, end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:84:19: 84:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1476 ~ itertools[f416]::iter_index::{impl#3}::index).71), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:84:30: 84:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/iter_index.rs:84:30: 84:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1480 ~ itertools[f416]::iter_index::{impl#4}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8934 ~ core[7d5a]::iter::traits::iterator::Iterator::skip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1484 ~ itertools[f416]::iter_index::{impl#5}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1485 ~ itertools[f416]::iter_index::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1460 ~ itertools[f416]::iter_index::IteratorIndex::index)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).5), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:16: 19:17 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).6), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).8), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).9), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:22: 19:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:22: 19:23 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).6), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).8), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).11), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:27: 19:28 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).12), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).14), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).15), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:33: 19:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:33: 19:34 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).12), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).14), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:15: 22:21 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).6)), segments: [PathSegment { ident: origin#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).11), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:15: 22:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).12), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:24: 22:28 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).15), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:24: 22:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:29: 22:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:24: 22:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:16: 24:24 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).24)), segments: [PathSegment { ident: left_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).30), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:16: 24:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).31), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:28: 24:32 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).34), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:28: 24:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:33: 24:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:28: 24:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).44), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:30: 29:31 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:29 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), segments: [PathSegment { ident: right_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).46), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:29 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).47), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).48), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:36 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).50), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:37: 29:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).51), kind: Call(Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).53), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0) }, [Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).54), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).55), kind: Index(Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:60: 29:64 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).57), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:60: 29:64 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:65: 29:73 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).24)), segments: [PathSegment { ident: left_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).59), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:65: 29:73 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:64: 29:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:60: 29:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:59: 29:74 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).60), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).61), kind: Index(Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:77: 29:81 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).63), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:77: 29:81 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:82: 29:91 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), segments: [PathSegment { ident: right_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).65), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:82: 29:91 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:81: 29:92 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:77: 29:92 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:76: 29:92 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:93 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:29 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), segments: [PathSegment { ident: right_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).46), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).47), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).48), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:36 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).50), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:37: 29:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:42 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).53), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:35:16: 35:28 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).80), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:35:16: 35:28 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13282 ~ core[7d5a]::slice::{impl#0}::swap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:44:8: 44:9 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).4)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).11), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:44:8: 44:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).12), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:44:13: 44:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:44:13: 44:14 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8897 ~ core[7d5a]::iter::traits::iterator::Iterator::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:48:8: 48:9 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).4)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).32), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:48:8: 48:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:48:13: 48:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:48:13: 48:14 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9096 ~ core[7d5a]::iter::traits::iterator::Iterator::min_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).83), kind: Call(Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:48: 54:58 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).6)), segments: [PathSegment { ident: comparator#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).85), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:48: 54:58 (#0) }, [Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:59: 54:60 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).79)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).87), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:59: 54:60 (#0) }, Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:62: 54:63 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).81)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).89), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).81)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:62: 54:63 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:48: 54:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:68: 54:82 (#0), res: Def(Ctor(Variant, Const), DefId(2:26147 ~ core[7d5a]::cmp::Ordering::Less::{constructor#0})), segments: [PathSegment { ident: Ordering#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).91), res: Def(Enum, DefId(2:26145 ~ core[7d5a]::cmp::Ordering)), args: None, infer_args: true }, PathSegment { ident: Less#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).92), res: Def(Ctor(Variant, Const), DefId(2:26147 ~ core[7d5a]::cmp::Ordering::Less::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:68: 54:82 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:48: 54:58 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).6)), segments: [PathSegment { ident: comparator#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).85), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:48: 54:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Adt({}) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3784 ~ core[7d5a]::ops::range::{impl#7}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).108), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).109), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:59:20: 59:27 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).75)), segments: [PathSegment { ident: storage#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).111), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).75)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:59:20: 59:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:59:28: 59:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:59:20: 59:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).112), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:59:36: 59:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:59:36: 59:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8913 ~ core[7d5a]::iter::traits::iterator::Iterator::for_each)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).180), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#396), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).172)), segments: [PathSegment { ident: left_val#396, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).182), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).172)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#396) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#396) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).183), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#396), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).173)), segments: [PathSegment { ident: right_val#396, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).185), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).173)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#396) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#396) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).225), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:65:12: 65:24 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).102)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).226), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).102)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:65:12: 65:24 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).270), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).271), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).272), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:80:11: 80:15 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).267)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).273), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).267)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:80:11: 80:15 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:80:16: 80:21 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:80:11: 80:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).274), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:80:24: 80:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:80:24: 80:25 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).278), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).279), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:81:24: 81:28 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).267)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).281), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).267)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:81:24: 81:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:81:29: 81:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:81:24: 81:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).282), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:81:37: 81:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:81:37: 81:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13282 ~ core[7d5a]::slice::{impl#0}::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).53), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:35:16: 35:28 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).80), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:35:16: 35:28 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:48: 54:58 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).6)), segments: [PathSegment { ident: comparator#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).85), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:54:48: 54:58 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).225), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:65:12: 65:24 (#0), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).102)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).226), res: Local(HirId(DefId(0:1491 ~ itertools[f416]::k_smallest::k_smallest_general).102)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:65:12: 65:24 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).5), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:16: 19:17 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).6), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).8), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).9), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:22: 19:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:22: 19:23 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).6), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).8), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).11), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:27: 19:28 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).12), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).14), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).15), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:33: 19:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:33: 19:34 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).12), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).14), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:15: 22:21 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).6)), segments: [PathSegment { ident: origin#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).11), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:15: 22:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).12), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:24: 22:28 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).15), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:24: 22:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:29: 22:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:22:24: 22:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:16: 24:24 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).24)), segments: [PathSegment { ident: left_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).30), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:16: 24:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).31), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:28: 24:32 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).34), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:28: 24:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:33: 24:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:24:28: 24:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).44), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:30: 29:31 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:29 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), segments: [PathSegment { ident: right_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).46), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:29 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).47), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).48), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:36 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).50), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:37: 29:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).51), kind: Call(Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).53), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0) }, [Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).54), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).55), kind: Index(Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:60: 29:64 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).57), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:60: 29:64 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:65: 29:73 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).24)), segments: [PathSegment { ident: left_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).59), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:65: 29:73 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:64: 29:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:60: 29:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:59: 29:74 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).60), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).61), kind: Index(Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:77: 29:81 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).63), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:77: 29:81 (#0) }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:82: 29:91 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), segments: [PathSegment { ident: right_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).65), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:82: 29:91 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:81: 29:92 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:77: 29:92 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:76: 29:92 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:93 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:29 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), segments: [PathSegment { ident: right_idx#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).46), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:20: 29:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).47), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).48), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:36 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).50), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:37: 29:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:32: 29:42 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).53), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:35:16: 35:28 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).80), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:35:16: 35:28 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13282 ~ core[7d5a]::slice::{impl#0}::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).53), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:29:46: 29:58 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:35:16: 35:28 (#0), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), segments: [PathSegment { ident: is_less_than#0, hir_id: HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).80), res: Local(HirId(DefId(0:1494 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:35:16: 35:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).5), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:16: 19:17 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).6), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).8), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).9), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:22: 19:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:22: 19:23 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).6), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:14: 19:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).8), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:18: 19:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).11), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:27: 19:28 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).12), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }, Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).14), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).15), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:33: 19:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:33: 19:34 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).12), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:25: 19:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).14), res: Local(HirId(DefId(0:1497 ~ itertools[f416]::k_smallest::k_smallest_general::sift_down::children_of).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:19:29: 19:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:97:17: 97:20 (#0), res: Local(HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).2)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).12), res: Local(HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:97:17: 97:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:97:29: 97:32 (#0), res: Local(HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).2)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).18), res: Local(HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:97:29: 97:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:97:17: 97:20 (#0), res: Local(HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).2)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).12), res: Local(HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:97:17: 97:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:97:29: 97:32 (#0), res: Local(HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).2)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).18), res: Local(HirId(DefId(0:1500 ~ itertools[f416]::k_smallest::key_to_cmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/k_smallest.rs:97:29: 97:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3758 ~ itertools[f416]::kmerge_impl::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1515 ~ itertools[f416]::kmerge_impl::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1517 ~ itertools[f416]::kmerge_impl::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1518 ~ itertools[f416]::kmerge_impl::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3759 ~ itertools[f416]::kmerge_impl::{impl#1}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:18: 65:22 (#0), res: Local(HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).2)), segments: [PathSegment { ident: data#0, hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).14), res: Local(HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:18: 65:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:23: 65:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:18: 65:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).15), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:31: 65:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:31: 65:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).11), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:18: 65:22 (#0), res: Local(HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).2)), segments: [PathSegment { ident: data#0, hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).14), res: Local(HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:18: 65:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:23: 65:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:18: 65:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify).15), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:31: 65:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:65:31: 65:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:75:19: 75:24 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).4)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).14), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:75:19: 75:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).15), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:75:28: 75:32 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).18), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:75:28: 75:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:75:33: 75:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:75:28: 75:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).39), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:23: 77:24 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).40), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:21: 77:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:21: 77:22 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:25: 77:28 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).42), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:25: 77:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:21: 77:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).43), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:31: 77:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:31: 77:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).40), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:21: 77:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:21: 77:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:25: 77:28 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).42), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:77:25: 77:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).48), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:17: 81:18 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:11: 81:16 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), segments: [PathSegment { ident: child#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).50), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:11: 81:16 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).51), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:19: 81:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:19: 81:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:11: 81:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).52), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).53), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:23: 81:27 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).55), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:23: 81:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:28: 81:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:23: 81:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:11: 81:16 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), segments: [PathSegment { ident: child#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).50), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:11: 81:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).51), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:19: 81:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:81:19: 81:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:84:18: 84:27 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), segments: [PathSegment { ident: less_than#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).63), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:84:18: 84:27 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:87:13: 87:22 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), segments: [PathSegment { ident: less_than#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).85), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:87:13: 87:22 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13282 ~ core[7d5a]::slice::{impl#0}::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).123), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:19: 92:20 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).124), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:17: 92:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:17: 92:18 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:21: 92:24 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).126), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:21: 92:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:17: 92:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).127), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:27: 92:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:27: 92:28 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).124), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:17: 92:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:17: 92:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:21: 92:24 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).126), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:92:21: 92:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).140), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:18: 96:20 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).141), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:14: 96:15 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:13 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), segments: [PathSegment { ident: child#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).143), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:13 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).144), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:16: 96:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:16: 96:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:17 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).145), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).146), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:21: 96:25 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).148), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:21: 96:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:26: 96:31 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:21: 96:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).149), kind: Call(Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:35: 96:44 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), segments: [PathSegment { ident: less_than#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).151), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:35: 96:44 (#0) }, [Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).152), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).153), kind: Index(Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:46: 96:50 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).155), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:46: 96:50 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:51: 96:56 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), segments: [PathSegment { ident: child#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).157), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:51: 96:56 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:50: 96:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:46: 96:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:45: 96:57 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).158), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).159), kind: Index(Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).160), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:60: 96:64 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).161), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:60: 96:64 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:65: 96:68 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).163), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:65: 96:68 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:64: 96:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:60: 96:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:59: 96:69 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:35: 96:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).141), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:14: 96:15 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:13 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), segments: [PathSegment { ident: child#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).143), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:13 (#0) }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).144), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:16: 96:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:16: 96:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).145), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).146), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:21: 96:25 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), segments: [PathSegment { ident: heap#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).148), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:21: 96:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:26: 96:31 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:21: 96:31 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:13 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), segments: [PathSegment { ident: child#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).143), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:8: 96:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).144), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:16: 96:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:16: 96:17 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:35: 96:44 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), segments: [PathSegment { ident: less_than#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).151), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:35: 96:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13282 ~ core[7d5a]::slice::{impl#0}::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:84:18: 84:27 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), segments: [PathSegment { ident: less_than#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).63), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:84:18: 84:27 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:87:13: 87:22 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), segments: [PathSegment { ident: less_than#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).85), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:87:13: 87:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:35: 96:44 (#0), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), segments: [PathSegment { ident: less_than#0, hir_id: HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).151), res: Local(HirId(DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:96:35: 96:44 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3763 ~ itertools[f416]::kmerge_impl::{impl#9}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3765 ~ itertools[f416]::kmerge_impl::{impl#10}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:118:9: 118:10 (#0), res: Local(HirId(DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred).4)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred).9), res: Local(HirId(DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:118:9: 118:10 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:118:13: 118:14 (#0), res: Local(HirId(DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred).6)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred).11), res: Local(HirId(DefId(0:1534 ~ itertools[f416]::kmerge_impl::{impl#2}::kmerge_pred).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:118:13: 118:14 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:124:9: 124:13 (#0), res: Local(HirId(DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred).9), res: Local(HirId(DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:124:9: 124:13 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:124:9: 124:13 (#0), res: Local(HirId(DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred).9), res: Local(HirId(DefId(0:1538 ~ itertools[f416]::kmerge_impl::{impl#3}::kmerge_pred).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/kmerge_impl.rs:124:9: 124:13 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1539 ~ itertools[f416]::kmerge_impl::kmerge)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1549 ~ itertools[f416]::kmerge_impl::kmerge_by)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3766 ~ itertools[f416]::kmerge_impl::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1549 ~ itertools[f416]::kmerge_impl::kmerge_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7425 ~ alloc[5873]::vec::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8922 ~ core[7d5a]::iter::traits::iterator::Iterator::filter_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1515 ~ itertools[f416]::kmerge_impl::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1521 ~ itertools[f416]::kmerge_impl::heapify)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1531 ~ itertools[f416]::kmerge_impl::KMergePredicate::kmerge_pred)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3767 ~ itertools[f416]::kmerge_impl::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1561 ~ itertools[f416]::kmerge_impl::{impl#6}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7513 ~ alloc[5873]::vec::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1517 ~ itertools[f416]::kmerge_impl::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7454 ~ alloc[5873]::vec::{impl#1}::swap_remove)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1524 ~ itertools[f416]::kmerge_impl::sift_down)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1531 ~ itertools[f416]::kmerge_impl::KMergePredicate::kmerge_pred)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1563 ~ itertools[f416]::kmerge_impl::{impl#6}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2520 ~ itertools[f416]::Itertools::fold1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1518 ~ itertools[f416]::kmerge_impl::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3774 ~ itertools[f416]::lazy_buffer::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3777 ~ itertools[f416]::lazy_buffer::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1577 ~ itertools[f416]::lazy_buffer::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1578 ~ itertools[f416]::lazy_buffer::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1579 ~ itertools[f416]::lazy_buffer::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1578 ~ itertools[f416]::lazy_buffer::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).4), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).5), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:9: 33:13 (#0), res: Local(HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).7), res: Local(HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:9: 33:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:14: 33:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:9: 33:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).8), kind: MethodCall(PathSegment { ident: count#0, hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).10), kind: Field(Expr { hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:22: 33:26 (#0), res: Local(HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).12), res: Local(HirId(DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:22: 33:26 (#0) }, it#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:22: 33:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:30: 33:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:33:22: 33:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1578 ~ itertools[f416]::lazy_buffer::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1581 ~ itertools[f416]::lazy_buffer::{impl#0}::get_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:47:12: 47:15 (#0), res: Local(HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).16), res: Local(HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:47:12: 47:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:47:18: 47:28 (#0), res: Local(HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).12)), segments: [PathSegment { ident: buffer_len#0, hir_id: HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).18), res: Local(HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:47:18: 47:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:48:25: 48:28 (#0), res: Local(HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).4)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).23), res: Local(HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:48:25: 48:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:48:31: 48:41 (#0), res: Local(HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).12)), segments: [PathSegment { ident: buffer_len#0, hir_id: HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).25), res: Local(HirId(DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lazy_buffer.rs:48:31: 48:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1585 ~ itertools[f416]::lazy_buffer::{impl#1}::get_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1591 ~ itertools[f416]::lazy_buffer::{impl#2}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:34723 ~ core[7d5a]::ops::index::Index::index)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:3781 ~ itertools[f416]::merge_join::{impl#9}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3783 ~ itertools[f416]::merge_join::{impl#10}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1610 ~ itertools[f416]::merge_join::merge)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1620 ~ itertools[f416]::merge_join::merge_by_new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1620 ~ itertools[f416]::merge_join::merge_by_new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1624 ~ itertools[f416]::merge_join::merge_join_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ itertools[f416]::adaptors::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3793 ~ itertools[f416]::merge_join::{impl#11}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3797 ~ itertools[f416]::merge_join::{impl#12}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11212 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1656 ~ itertools[f416]::merge_join::{impl#1}::left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1657 ~ itertools[f416]::merge_join::{impl#1}::right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).9), kind: Field(Expr { hir_id: HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:131:15: 131:19 (#0), res: Local(HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).11), res: Local(HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:131:15: 131:19 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:131:15: 131:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1659 ~ itertools[f416]::merge_join::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).9), kind: Field(Expr { hir_id: HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:131:15: 131:19 (#0), res: Local(HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).11), res: Local(HirId(DefId(0:1658 ~ itertools[f416]::merge_join::{impl#1}::merge).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:131:15: 131:19 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:131:15: 131:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1665 ~ itertools[f416]::merge_join::{impl#2}::left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1666 ~ itertools[f416]::merge_join::{impl#2}::right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).9), kind: Field(Expr { hir_id: HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:158:12: 158:16 (#0), res: Local(HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).11), res: Local(HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:158:12: 158:16 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:158:12: 158:18 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1668 ~ itertools[f416]::merge_join::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).9), kind: Field(Expr { hir_id: HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:158:12: 158:16 (#0), res: Local(HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).11), res: Local(HirId(DefId(0:1667 ~ itertools[f416]::merge_join::{impl#2}::merge).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:158:12: 158:16 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:158:12: 158:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1673 ~ itertools[f416]::merge_join::{impl#3}::left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1674 ~ itertools[f416]::merge_join::{impl#3}::right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:179:12: 179:16 (#0), res: Local(HirId(DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge).10), res: Local(HirId(DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:179:12: 179:16 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1676 ~ itertools[f416]::merge_join::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:179:12: 179:16 (#0), res: Local(HirId(DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge).10), res: Local(HirId(DefId(0:1675 ~ itertools[f416]::merge_join::{impl#3}::merge).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:179:12: 179:16 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1680 ~ itertools[f416]::merge_join::{impl#4}::left)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1681 ~ itertools[f416]::merge_join::{impl#4}::right)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:200:12: 200:16 (#0), res: Local(HirId(DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge).4)), segments: [PathSegment { ident: left#0, hir_id: HirId(DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge).10), res: Local(HirId(DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:200:12: 200:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:200:20: 200:25 (#0), res: Local(HirId(DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge).6)), segments: [PathSegment { ident: right#0, hir_id: HirId(DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge).12), res: Local(HirId(DefId(0:1682 ~ itertools[f416]::merge_join::{impl#4}::merge).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:200:20: 200:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1683 ~ itertools[f416]::merge_join::{impl#4}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3798 ~ itertools[f416]::merge_join::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3799 ~ itertools[f416]::merge_join::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1697 ~ itertools[f416]::merge_join::{impl#7}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1647 ~ itertools[f416]::merge_join::OrderingOrBool::left)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1648 ~ itertools[f416]::merge_join::OrderingOrBool::right)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1649 ~ itertools[f416]::merge_join::OrderingOrBool::merge)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1649 ~ itertools[f416]::merge_join::OrderingOrBool::merge)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:276:31: 276:32 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).68), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:276:31: 276:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:281:31: 281:32 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).108), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:281:31: 281:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:286:31: 286:32 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).144), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:286:31: 286:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:293:56: 293:57 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).202), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:293:56: 293:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:298:57: 298:58 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).251), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:298:57: 298:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1703 ~ itertools[f416]::merge_join::{impl#7}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1650 ~ itertools[f416]::merge_join::OrderingOrBool::size_hint)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1704 ~ itertools[f416]::merge_join::{impl#7}::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1704 ~ itertools[f416]::merge_join::{impl#7}::nth).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:316:16: 316:17 (#0), res: Local(HirId(DefId(0:1704 ~ itertools[f416]::merge_join::{impl#7}::nth).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1704 ~ itertools[f416]::merge_join::{impl#7}::nth).9), res: Local(HirId(DefId(0:1704 ~ itertools[f416]::merge_join::{impl#7}::nth).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:316:16: 316:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1704 ~ itertools[f416]::merge_join::{impl#7}::nth).10), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:316:21: 316:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:316:21: 316:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1649 ~ itertools[f416]::merge_join::OrderingOrBool::merge)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:276:31: 276:32 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).68), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:276:31: 276:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:281:31: 281:32 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).108), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:281:31: 281:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:286:31: 286:32 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).144), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:286:31: 286:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:293:56: 293:57 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).202), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:293:56: 293:57 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:298:57: 298:58 (#0), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).251), res: Local(HirId(DefId(0:1698 ~ itertools[f416]::merge_join::{impl#7}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/merge_join.rs:298:57: 298:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3815 ~ itertools[f416]::minmax::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).14)), segments: [PathSegment { ident: __self_discr#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).28), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).24)), segments: [PathSegment { ident: __arg1_discr#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).30), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).31), kind: Match(Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).32), kind: Tup([Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:23 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).34), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).4)), segments: [PathSegment { ident: other#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).36), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }, [Arm { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).46), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), pat: Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).45), kind: Tuple([Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).40), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:5: 10:5 (#422), res: Def(Ctor(Variant, Fn), DefId(0:3805 ~ itertools[f416]::minmax::MinMaxResult::OneElement::{constructor#0})), segments: [PathSegment { ident: MinMaxResult#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).37), res: Def(Enum, DefId(0:3800 ~ itertools[f416]::minmax::MinMaxResult)), args: None, infer_args: true }, PathSegment { ident: OneElement#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).38), res: Def(Ctor(Variant, Fn), DefId(0:3805 ~ itertools[f416]::minmax::MinMaxResult::OneElement::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).39), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).39), __self_0#422, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).44), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:5: 10:5 (#422), res: Def(Ctor(Variant, Fn), DefId(0:3805 ~ itertools[f416]::minmax::MinMaxResult::OneElement::{constructor#0})), segments: [PathSegment { ident: MinMaxResult#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).41), res: Def(Enum, DefId(0:3800 ~ itertools[f416]::minmax::MinMaxResult)), args: None, infer_args: true }, PathSegment { ident: OneElement#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).42), res: Def(Ctor(Variant, Fn), DefId(0:3805 ~ itertools[f416]::minmax::MinMaxResult::OneElement::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).43), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).43), __arg1_0#422, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).47), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).39)), segments: [PathSegment { ident: __self_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).49), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).43)), segments: [PathSegment { ident: __arg1_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).51), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422) } }, Arm { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), pat: Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).62), kind: Tuple([Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).56), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:5: 14:5 (#422), res: Def(Ctor(Variant, Fn), DefId(0:3808 ~ itertools[f416]::minmax::MinMaxResult::MinMax::{constructor#0})), segments: [PathSegment { ident: MinMaxResult#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).52), res: Def(Enum, DefId(0:3800 ~ itertools[f416]::minmax::MinMaxResult)), args: None, infer_args: true }, PathSegment { ident: MinMax#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).53), res: Def(Ctor(Variant, Fn), DefId(0:3808 ~ itertools[f416]::minmax::MinMaxResult::MinMax::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).54), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).54), __self_0#422, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).55), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).55), __self_1#422, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).61), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:5: 14:5 (#422), res: Def(Ctor(Variant, Fn), DefId(0:3808 ~ itertools[f416]::minmax::MinMaxResult::MinMax::{constructor#0})), segments: [PathSegment { ident: MinMaxResult#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).57), res: Def(Enum, DefId(0:3800 ~ itertools[f416]::minmax::MinMaxResult)), args: None, infer_args: true }, PathSegment { ident: MinMax#0, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).58), res: Def(Ctor(Variant, Fn), DefId(0:3808 ~ itertools[f416]::minmax::MinMaxResult::MinMax::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).59), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).59), __arg1_0#422, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).60), kind: Binding(BindingMode(No, Not), HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).60), __arg1_1#422, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).64), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).65), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).54)), segments: [PathSegment { ident: __self_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).67), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).59)), segments: [PathSegment { ident: __arg1_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).69), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).70), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).55)), segments: [PathSegment { ident: __self_1#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).72), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).60)), segments: [PathSegment { ident: __arg1_1#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).74), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) } }, Arm { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).76), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), pat: Pat { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).75), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).77), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) } }], Normal), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).14)), segments: [PathSegment { ident: __self_discr#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).28), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).24)), segments: [PathSegment { ident: __arg1_discr#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).30), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:4:23: 4:32 (#422) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).39)), segments: [PathSegment { ident: __self_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).49), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).43)), segments: [PathSegment { ident: __arg1_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).51), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:10:16: 10:17 (#422) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).65), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).54)), segments: [PathSegment { ident: __self_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).67), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).59)), segments: [PathSegment { ident: __arg1_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).69), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).70), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).55)), segments: [PathSegment { ident: __self_1#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).72), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }, Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).60)), segments: [PathSegment { ident: __arg1_1#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).74), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).54)), segments: [PathSegment { ident: __self_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).67), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).59)), segments: [PathSegment { ident: __arg1_0#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).69), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:12: 14:13 (#422) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).55)), segments: [PathSegment { ident: __self_1#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).72), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).60)), segments: [PathSegment { ident: __arg1_1#422, hir_id: HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).74), res: Local(HirId(DefId(0:3820 ~ itertools[f416]::minmax::{impl#4}::eq).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:14:15: 14:16 (#422) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3823 ~ itertools[f416]::minmax::{impl#5}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3826 ~ itertools[f416]::minmax::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11212 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1712 ~ itertools[f416]::minmax::{impl#0}::into_option)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:59:26: 59:33 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).47), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:59:26: 59:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:60:26: 60:33 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).56), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:60:26: 60:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:61:21: 61:23 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).66), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:61:21: 61:23 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:82:33: 82:40 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).141), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:82:33: 82:40 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:83:20: 83:22 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).150), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:83:20: 83:22 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:85:28: 85:30 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).176), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:85:28: 85:30 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:92:25: 92:32 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).213), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:92:25: 92:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:93:26: 93:33 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).222), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:93:26: 93:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).231), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:94:13: 94:15 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).232), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:94:13: 94:15 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:95:16: 95:18 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).249), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:95:16: 95:18 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).281), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:99:17: 99:19 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).282), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:99:17: 99:19 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:104:16: 104:18 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).316), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:104:16: 104:18 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).348), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:108:17: 108:19 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).349), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:108:17: 108:19 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:59:26: 59:33 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).47), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:59:26: 59:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:60:26: 60:33 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).56), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:60:26: 60:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:61:21: 61:23 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).66), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:61:21: 61:23 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:82:33: 82:40 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).141), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:82:33: 82:40 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:83:20: 83:22 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).150), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:83:20: 83:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:85:28: 85:30 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).176), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:85:28: 85:30 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:92:25: 92:32 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).213), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:92:25: 92:32 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:93:26: 93:33 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), segments: [PathSegment { ident: key_for#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).222), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:93:26: 93:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).231), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:94:13: 94:15 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).232), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:94:13: 94:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:95:16: 95:18 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).249), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:95:16: 95:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).281), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:99:17: 99:19 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).282), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:99:17: 99:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:104:16: 104:18 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).316), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:104:16: 104:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).348), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:108:17: 108:19 (#0), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), segments: [PathSegment { ident: lt#0, hir_id: HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).349), res: Local(HirId(DefId(0:1713 ~ itertools[f416]::minmax::minmax_impl).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/minmax.rs:108:17: 108:19 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3834 ~ itertools[f416]::multipeek_impl::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3837 ~ itertools[f416]::multipeek_impl::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1723 ~ itertools[f416]::multipeek_impl::multipeek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4700 ~ alloc[5873]::collections::vec_deque::{impl#4}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1727 ~ itertools[f416]::multipeek_impl::{impl#0}::reset_peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).6), kind: Field(Expr { hir_id: HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:51:22: 51:26 (#0), res: Local(HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).8), res: Local(HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:51:22: 51:26 (#0) }, index#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:51:22: 51:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).11), kind: Field(Expr { hir_id: HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:51:35: 51:39 (#0), res: Local(HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).13), res: Local(HirId(DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:51:35: 51:39 (#0) }, buf#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:51:35: 51:43 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:51:44: 51:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:51:35: 51:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:4746 ~ alloc[5873]::collections::vec_deque::{impl#5}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4765 ~ alloc[5873]::collections::vec_deque::{impl#5}::push_back)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4747 ~ alloc[5873]::collections::vec_deque::{impl#5}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1730 ~ itertools[f416]::multipeek_impl::{impl#1}::peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:78:21: 78:27 (#0), res: Local(HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).25), res: Local(HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:78:21: 78:27 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:4758 ~ alloc[5873]::collections::vec_deque::{impl#5}::front)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:83:17: 83:23 (#0), res: Local(HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).53), res: Local(HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:83:17: 83:23 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:78:21: 78:27 (#0), res: Local(HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).25), res: Local(HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:78:21: 78:27 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:83:17: 83:23 (#0), res: Local(HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).53), res: Local(HirId(DefId(0:1733 ~ itertools[f416]::multipeek_impl::{impl#2}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/multipeek_impl.rs:83:17: 83:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1738 ~ itertools[f416]::multipeek_impl::{impl#3}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:4762 ~ alloc[5873]::collections::vec_deque::{impl#5}::pop_front)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1740 ~ itertools[f416]::multipeek_impl::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4746 ~ alloc[5873]::collections::vec_deque::{impl#5}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1741 ~ itertools[f416]::multipeek_impl::{impl#3}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3848 ~ itertools[f416]::pad_tail::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3849 ~ itertools[f416]::pad_tail::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1754 ~ itertools[f416]::pad_tail::pad_using)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).15), kind: Field(Expr { hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:51:20: 51:24 (#0), res: Local(HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).17), res: Local(HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:51:20: 51:24 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:51:20: 51:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).18), kind: Field(Expr { hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:51:31: 51:35 (#0), res: Local(HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).20), res: Local(HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:51:31: 51:35 (#0) }, min#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:51:31: 51:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).27), kind: Field(Expr { hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:52:35: 52:39 (#0), res: Local(HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).29), res: Local(HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:52:35: 52:39 (#0) }, filler#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:52:34: 52:47 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1762 ~ itertools[f416]::pad_tail::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2063 ~ itertools[f416]::size_hint::max)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:78:13: 78:14 (#0), res: Local(HirId(DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold).36), res: Local(HirId(DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:78:13: 78:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).27), kind: Field(Expr { hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:52:35: 52:39 (#0), res: Local(HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).29), res: Local(HirId(DefId(0:1761 ~ itertools[f416]::pad_tail::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:52:35: 52:39 (#0) }, filler#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:52:34: 52:47 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:78:13: 78:14 (#0), res: Local(HirId(DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold).36), res: Local(HirId(DefId(0:1763 ~ itertools[f416]::pad_tail::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:78:13: 78:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).5), kind: Field(Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:90:12: 90:16 (#0), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).7), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:90:12: 90:16 (#0) }, min#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:90:12: 90:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).8), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:90:24: 90:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:90:24: 90:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).19), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).20), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).21), kind: Field(Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:92:19: 92:23 (#0), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).23), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:92:19: 92:23 (#0) }, iter#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:92:19: 92:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:92:29: 92:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:92:19: 92:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).24), kind: Field(Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:92:38: 92:42 (#0), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).26), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:92:38: 92:42 (#0) }, min#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:92:38: 92:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).52), kind: Field(Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:97:19: 97:23 (#0), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).54), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:97:19: 97:23 (#0) }, filler#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:97:18: 97:31 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1771 ~ itertools[f416]::pad_tail::{impl#2}::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).52), kind: Field(Expr { hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:97:19: 97:23 (#0), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).54), res: Local(HirId(DefId(0:1770 ~ itertools[f416]::pad_tail::{impl#2}::next_back).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:97:19: 97:23 (#0) }, filler#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/pad_tail.rs:97:18: 97:31 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3856 ~ itertools[f416]::peek_nth::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3859 ~ itertools[f416]::peek_nth::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1785 ~ itertools[f416]::peek_nth::peek_nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4700 ~ alloc[5873]::collections::vec_deque::{impl#4}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1789 ~ itertools[f416]::peek_nth::{impl#0}::peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1791 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1790 ~ itertools[f416]::peek_nth::{impl#0}::peek_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1792 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1791 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1791 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:72:33: 72:34 (#0), res: Local(HirId(DefId(0:1791 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1791 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth).10), res: Local(HirId(DefId(0:1791 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:72:33: 72:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1791 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:72:37: 72:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:72:37: 72:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:4746 ~ alloc[5873]::collections::vec_deque::{impl#5}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4709 ~ alloc[5873]::collections::vec_deque::{impl#5}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1792 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1792 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth_mut).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:113:33: 113:34 (#0), res: Local(HirId(DefId(0:1792 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth_mut).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1792 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth_mut).10), res: Local(HirId(DefId(0:1792 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth_mut).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:113:33: 113:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1792 ~ itertools[f416]::peek_nth::{impl#0}::peek_nth_mut).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:113:37: 113:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:113:37: 113:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:4746 ~ alloc[5873]::collections::vec_deque::{impl#5}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4710 ~ alloc[5873]::collections::vec_deque::{impl#5}::get_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1793 ~ itertools[f416]::peek_nth::{impl#0}::next_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4764 ~ alloc[5873]::collections::vec_deque::{impl#5}::push_front)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1793 ~ itertools[f416]::peek_nth::{impl#0}::next_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:138:29: 138:33 (#0), res: Local(HirId(DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq).11)), segments: [PathSegment { ident: next#0, hir_id: HirId(DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq).14), res: Local(HirId(DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:138:29: 138:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:138:37: 138:45 (#0), res: Local(HirId(DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq).4)), segments: [PathSegment { ident: expected#0, hir_id: HirId(DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq).16), res: Local(HirId(DefId(0:1795 ~ itertools[f416]::peek_nth::{impl#0}::next_if_eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:138:37: 138:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1801 ~ itertools[f416]::peek_nth::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4762 ~ alloc[5873]::collections::vec_deque::{impl#5}::pop_front)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1803 ~ itertools[f416]::peek_nth::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4746 ~ alloc[5873]::collections::vec_deque::{impl#5}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1804 ~ itertools[f416]::peek_nth::{impl#1}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9702 ~ core[7d5a]::option::{impl#0}::filter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1789 ~ itertools[f416]::peek_nth::{impl#0}::peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:175:35: 175:41 (#0), res: Local(HirId(DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next).17), res: Local(HirId(DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:175:35: 175:41 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:175:35: 175:41 (#0), res: Local(HirId(DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next).17), res: Local(HirId(DefId(0:1811 ~ itertools[f416]::peek_nth::{impl#3}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peek_nth.rs:175:35: 175:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1825 ~ itertools[f416]::peeking_take_while::{impl#0}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1820 ~ itertools[f416]::peeking_take_while::PeekingNext::peeking_next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:7462 ~ core[7d5a]::iter::adapters::peekable::{impl#5}::peek)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:46:17: 46:23 (#0), res: Local(HirId(DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next).18), res: Local(HirId(DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:46:17: 46:23 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:46:17: 46:23 (#0), res: Local(HirId(DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next).18), res: Local(HirId(DefId(0:1829 ~ itertools[f416]::peeking_take_while::{impl#1}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:46:17: 46:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:63:17: 63:23 (#0), res: Local(HirId(DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next).18), res: Local(HirId(DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:63:17: 63:23 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:404 ~ itertools[f416]::adaptors::{impl#4}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:63:17: 63:23 (#0), res: Local(HirId(DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next).18), res: Local(HirId(DefId(0:1833 ~ itertools[f416]::peeking_take_while::{impl#2}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:63:17: 63:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:84:17: 84:23 (#0), res: Local(HirId(DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next).18), res: Local(HirId(DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:84:17: 84:23 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1991 ~ itertools[f416]::put_back_n_impl::{impl#0}::put_back)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:84:17: 84:23 (#0), res: Local(HirId(DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next).18), res: Local(HirId(DefId(0:1837 ~ itertools[f416]::peeking_take_while::{impl#3}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:84:17: 84:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:101:13: 101:19 (#0), res: Local(HirId(DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next).35), res: Local(HirId(DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:101:13: 101:19 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:101:13: 101:19 (#0), res: Local(HirId(DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next).4)), segments: [PathSegment { ident: accept#0, hir_id: HirId(DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next).35), res: Local(HirId(DefId(0:1841 ~ itertools[f416]::peeking_take_while::{impl#4}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:101:13: 101:19 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3860 ~ itertools[f416]::peeking_take_while::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1853 ~ itertools[f416]::peeking_take_while::peeking_take_while)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1861 ~ itertools[f416]::peeking_take_while::{impl#6}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1820 ~ itertools[f416]::peeking_take_while::PeekingNext::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1862 ~ itertools[f416]::peeking_take_while::{impl#6}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1820 ~ itertools[f416]::peeking_take_while::PeekingNext::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).21), kind: Call(Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:36: 161:37 (#0), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).11)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).23), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:36: 161:37 (#0) }, [Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:38: 161:39 (#0), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).19)), segments: [PathSegment { ident: r#0, hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).25), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:38: 161:39 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:36: 161:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).26), kind: Call(Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:44: 161:45 (#0), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).4)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).28), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:44: 161:45 (#0) }, [Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:46: 161:47 (#0), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).19)), segments: [PathSegment { ident: r#0, hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).30), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:46: 161:47 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:44: 161:48 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:36: 161:37 (#0), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).11)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).23), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:36: 161:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:44: 161:45 (#0), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).4)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).28), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:44: 161:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:36: 161:37 (#0), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).11)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).23), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:36: 161:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:44: 161:45 (#0), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).4)), segments: [PathSegment { ident: g#0, hir_id: HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).28), res: Local(HirId(DefId(0:1867 ~ itertools[f416]::peeking_take_while::{impl#7}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:161:44: 161:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#438), res: Local(HirId(DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next).4)), segments: [PathSegment { ident: accept#438, hir_id: HirId(DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next).25), res: Local(HirId(DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#438) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#438), res: Local(HirId(DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next).4)), segments: [PathSegment { ident: accept#438, hir_id: HirId(DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next).25), res: Local(HirId(DefId(0:3864 ~ itertools[f416]::peeking_take_while::{impl#8}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#438) }
[DEBUG] Trying to get func ty of defid DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#439), res: Local(HirId(DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next).4)), segments: [PathSegment { ident: accept#439, hir_id: HirId(DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next).25), res: Local(HirId(DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#439) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#439), res: Local(HirId(DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next).4)), segments: [PathSegment { ident: accept#439, hir_id: HirId(DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next).25), res: Local(HirId(DefId(0:3868 ~ itertools[f416]::peeking_take_while::{impl#9}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#439) }
[DEBUG] Trying to get func ty of defid DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#440), res: Local(HirId(DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next).4)), segments: [PathSegment { ident: accept#440, hir_id: HirId(DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next).25), res: Local(HirId(DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#440) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#440), res: Local(HirId(DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next).4)), segments: [PathSegment { ident: accept#440, hir_id: HirId(DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next).25), res: Local(HirId(DefId(0:3872 ~ itertools[f416]::peeking_take_while::{impl#10}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#440) }
[DEBUG] Trying to get func ty of defid DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#441), res: Local(HirId(DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next).4)), segments: [PathSegment { ident: accept#441, hir_id: HirId(DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next).25), res: Local(HirId(DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#441) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#441), res: Local(HirId(DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next).4)), segments: [PathSegment { ident: accept#441, hir_id: HirId(DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next).25), res: Local(HirId(DefId(0:3876 ~ itertools[f416]::peeking_take_while::{impl#11}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#441) }
[DEBUG] Trying to get func ty of defid DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#442), res: Local(HirId(DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next).4)), segments: [PathSegment { ident: accept#442, hir_id: HirId(DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next).25), res: Local(HirId(DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#442) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#442), res: Local(HirId(DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next).4)), segments: [PathSegment { ident: accept#442, hir_id: HirId(DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next).25), res: Local(HirId(DefId(0:3881 ~ itertools[f416]::peeking_take_while::{impl#12}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#442) }
[DEBUG] Trying to get func ty of defid DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#443), res: Local(HirId(DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next).4)), segments: [PathSegment { ident: accept#443, hir_id: HirId(DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next).25), res: Local(HirId(DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#443) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#443), res: Local(HirId(DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next).4)), segments: [PathSegment { ident: accept#443, hir_id: HirId(DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next).25), res: Local(HirId(DefId(0:3886 ~ itertools[f416]::peeking_take_while::{impl#13}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#443) }
[DEBUG] Trying to get func ty of defid DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#444), res: Local(HirId(DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next).4)), segments: [PathSegment { ident: accept#444, hir_id: HirId(DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next).25), res: Local(HirId(DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#444) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#444), res: Local(HirId(DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next).4)), segments: [PathSegment { ident: accept#444, hir_id: HirId(DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next).25), res: Local(HirId(DefId(0:3890 ~ itertools[f416]::peeking_take_while::{impl#14}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#444) }
[DEBUG] Trying to get func ty of defid DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#445), res: Local(HirId(DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next).4)), segments: [PathSegment { ident: accept#445, hir_id: HirId(DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next).25), res: Local(HirId(DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#445) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#445), res: Local(HirId(DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next).4)), segments: [PathSegment { ident: accept#445, hir_id: HirId(DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next).25), res: Local(HirId(DefId(0:3895 ~ itertools[f416]::peeking_take_while::{impl#15}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#445) }
[DEBUG] Trying to get func ty of defid DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#446), res: Local(HirId(DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next).4)), segments: [PathSegment { ident: accept#446, hir_id: HirId(DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next).25), res: Local(HirId(DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#446) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#446), res: Local(HirId(DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next).4)), segments: [PathSegment { ident: accept#446, hir_id: HirId(DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next).25), res: Local(HirId(DefId(0:3900 ~ itertools[f416]::peeking_take_while::{impl#16}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#446) }
[DEBUG] Trying to get func ty of defid DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#447), res: Local(HirId(DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next).4)), segments: [PathSegment { ident: accept#447, hir_id: HirId(DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next).25), res: Local(HirId(DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#447) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#447), res: Local(HirId(DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next).4)), segments: [PathSegment { ident: accept#447, hir_id: HirId(DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next).25), res: Local(HirId(DefId(0:3904 ~ itertools[f416]::peeking_take_while::{impl#17}::peeking_next).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/peeking_take_while.rs:175:25: 175:31 (#447) }
[DEBUG] Trying to get func ty of defid DefId(0:3906 ~ itertools[f416]::permutations::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3919 ~ itertools[f416]::permutations::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3921 ~ itertools[f416]::permutations::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3922 ~ itertools[f416]::permutations::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1889 ~ itertools[f416]::permutations::permutations)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1577 ~ itertools[f416]::lazy_buffer::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1582 ~ itertools[f416]::lazy_buffer::{impl#0}::prefill)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).58), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).59), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:75:20: 75:24 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).9)), segments: [PathSegment { ident: vals#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).61), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:75:20: 75:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:75:25: 75:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:75:20: 75:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:75:34: 75:35 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).44)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).63), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:75:34: 75:35 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1578 ~ itertools[f416]::lazy_buffer::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1581 ~ itertools[f416]::lazy_buffer::{impl#0}::get_next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8903 ~ core[7d5a]::iter::traits::iterator::Iterator::chain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).135), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:37: 84:38 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).137), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:37: 84:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:36: 84:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).138), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:41: 84:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:41: 84:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).135), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:37: 84:38 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).137), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:37: 84:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:36: 84:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).138), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:41: 84:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:84:41: 84:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).181), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:50: 92:51 (#0) }, Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).182), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:48: 92:49 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).178)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).183), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).178)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:48: 92:49 (#0) }, Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).184), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:53: 92:54 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).186), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:53: 92:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:52: 92:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:48: 92:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).187), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:57: 92:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:57: 92:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).182), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:48: 92:49 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).178)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).183), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).178)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:48: 92:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).184), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:53: 92:54 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).186), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:53: 92:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:92:52: 92:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:94:49: 94:50 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).178)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).217), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).178)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:94:49: 94:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).218), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:94:53: 94:54 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).219), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:94:53: 94:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:94:49: 94:50 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).178)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).217), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).178)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:94:49: 94:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).218), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:94:53: 94:54 (#0), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).219), res: Local(HirId(DefId(0:1894 ~ itertools[f416]::permutations::{impl#2}::next).112)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:94:53: 94:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1901 ~ itertools[f416]::permutations::advance)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1585 ~ itertools[f416]::lazy_buffer::{impl#1}::get_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1901 ~ itertools[f416]::permutations::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1585 ~ itertools[f416]::lazy_buffer::{impl#1}::get_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1896 ~ itertools[f416]::permutations::{impl#2}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1580 ~ itertools[f416]::lazy_buffer::{impl#0}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:1897 ~ itertools[f416]::permutations::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1579 ~ itertools[f416]::lazy_buffer::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1901 ~ itertools[f416]::permutations::advance)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).36), kind: Index(Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:145:12: 145:18 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).4)), segments: [PathSegment { ident: cycles#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).38), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:145:12: 145:18 (#0) }, Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:145:19: 145:20 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).40), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:145:19: 145:20 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:145:18: 145:21 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:145:12: 145:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).41), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:145:25: 145:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:145:25: 145:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).50), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:27: 146:28 (#0) }, Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:25: 146:26 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).11)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).52), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:25: 146:26 (#0) }, Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:29: 146:30 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).54), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:29: 146:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:25: 146:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).55), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:33: 146:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:33: 146:34 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:25: 146:26 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).11)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).52), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:25: 146:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:29: 146:30 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).54), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:146:29: 146:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13397 ~ core[7d5a]::slice::{impl#0}::rotate_left)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:149:30: 149:31 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).11)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).74), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:149:30: 149:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).75), kind: Index(Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:149:34: 149:40 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).4)), segments: [PathSegment { ident: cycles#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).77), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:149:34: 149:40 (#0) }, Expr { hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:149:41: 149:42 (#0), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).27)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).79), res: Local(HirId(DefId(0:1901 ~ itertools[f416]::permutations::advance).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:149:41: 149:42 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:149:40: 149:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:149:34: 149:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13282 ~ core[7d5a]::slice::{impl#0}::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:162:27: 162:28 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).8)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).19), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:162:27: 162:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:162:32: 162:33 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).10)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).21), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:162:32: 162:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3784 ~ core[7d5a]::ops::range::{impl#7}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).40), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:28: 163:29 (#0) }, Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:26: 163:27 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).8)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).42), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:26: 163:27 (#0) }, Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:30: 163:31 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).10)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).44), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:30: 163:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:26: 163:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).45), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:34: 163:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:34: 163:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:26: 163:27 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).8)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).42), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:26: 163:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:30: 163:31 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).10)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).44), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:163:30: 163:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:25399 ~ core[7d5a]::num::{impl#11}::checked_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:168:34: 168:42 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).80)), segments: [PathSegment { ident: at_start#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).112), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:168:34: 168:42 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2058 ~ itertools[f416]::size_hint::sub_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:39: 171:47 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).80)), segments: [PathSegment { ident: at_start#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).133), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:39: 171:47 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).139), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:61: 171:62 (#0) }, Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:55: 171:60 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).123)), segments: [PathSegment { ident: min_n#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).141), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).123)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:55: 171:60 (#0) }, Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:63: 171:64 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).121)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).143), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:63: 171:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:55: 171:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).144), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:67: 171:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:67: 171:68 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:55: 171:60 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).123)), segments: [PathSegment { ident: min_n#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).141), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).123)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:55: 171:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:63: 171:64 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).121)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).143), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:63: 171:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25399 ~ core[7d5a]::num::{impl#11}::checked_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).182), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).183), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:178:37: 178:44 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).150)), segments: [PathSegment { ident: indices#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).185), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).150)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:178:37: 178:44 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:178:45: 178:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:178:37: 178:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:178:53: 178:54 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).170)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).187), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).170)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:178:53: 178:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:168:34: 168:42 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).80)), segments: [PathSegment { ident: at_start#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).112), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:168:34: 168:42 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:39: 171:47 (#0), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).80)), segments: [PathSegment { ident: at_start#0, hir_id: HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).133), res: Local(HirId(DefId(0:1903 ~ itertools[f416]::permutations::{impl#4}::size_hint_for).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/permutations.rs:171:39: 171:47 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:3923 ~ itertools[f416]::powerset::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3924 ~ itertools[f416]::powerset::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1926 ~ itertools[f416]::powerset::powerset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ itertools[f416]::combinations::combinations)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).5), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:27: 48:28 (#0) }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).6), kind: MethodCall(PathSegment { ident: k#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).8), kind: Field(Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:16 (#0), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).10), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:16 (#0) }, combs#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:23: 48:26 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:26 (#0) }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).11), kind: MethodCall(PathSegment { ident: n#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).13), kind: Field(Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:29: 48:33 (#0), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).15), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:29: 48:33 (#0) }, combs#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:29: 48:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:40: 48:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:29: 48:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).16), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:62: 48:64 (#0) }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).17), kind: MethodCall(PathSegment { ident: k#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).19), kind: Field(Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:51 (#0), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).21), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:51 (#0) }, combs#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:57 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:58: 48:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:61 (#0) }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).22), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:65: 48:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:65: 48:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).6), kind: MethodCall(PathSegment { ident: k#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).8), kind: Field(Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:16 (#0), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).10), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:16 (#0) }, combs#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:23: 48:26 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:12: 48:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).11), kind: MethodCall(PathSegment { ident: n#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).13), kind: Field(Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:29: 48:33 (#0), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).15), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:29: 48:33 (#0) }, combs#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:29: 48:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:40: 48:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:29: 48:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:798 ~ itertools[f416]::combinations::{impl#2}::n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).17), kind: MethodCall(PathSegment { ident: k#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).19), kind: Field(Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:51 (#0), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).21), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:51 (#0) }, combs#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:57 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:58: 48:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:47: 48:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).22), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:65: 48:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:48:65: 48:66 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).30), kind: MethodCall(PathSegment { ident: k#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).31), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).32), kind: Field(Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:49:30: 49:34 (#0), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).34), res: Local(HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:49:30: 49:34 (#0) }, combs#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:49:30: 49:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:49:41: 49:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:49:30: 49:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k).35), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:49:47: 49:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:49:47: 49:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1934 ~ itertools[f416]::powerset::{impl#3}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1935 ~ itertools[f416]::powerset::{impl#3}::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:804 ~ itertools[f416]::combinations::{impl#2}::try_nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1930 ~ itertools[f416]::powerset::{impl#2}::increment_k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1936 ~ itertools[f416]::powerset::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1579 ~ itertools[f416]::lazy_buffer::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:799 ~ itertools[f416]::combinations::{impl#2}::src)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1944 ~ itertools[f416]::powerset::remaining_for)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1944 ~ itertools[f416]::powerset::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:801 ~ itertools[f416]::combinations::{impl#2}::n_and_count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:9: 100:20 (#0), res: Local(HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).19)), segments: [PathSegment { ident: combs_count#0, hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).23), res: Local(HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:9: 100:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).24), kind: MethodCall(PathSegment { ident: unwrap#0, hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).25), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).26), kind: Call(Expr { hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:23: 100:36 (#0), res: Def(Fn, DefId(0:1944 ~ itertools[f416]::powerset::remaining_for)), segments: [PathSegment { ident: remaining_for#0, hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).28), res: Def(Fn, DefId(0:1944 ~ itertools[f416]::powerset::remaining_for)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:23: 100:36 (#0) }, [Expr { hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:37: 100:38 (#0), res: Local(HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).18)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).30), res: Local(HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:37: 100:38 (#0) }, Expr { hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:40: 100:41 (#0), res: Local(HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).10)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).32), res: Local(HirId(DefId(0:1938 ~ itertools[f416]::powerset::{impl#3}::count).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:40: 100:41 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:23: 100:42 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:43: 100:51 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:100:23: 100:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1944 ~ itertools[f416]::powerset::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).15), kind: MethodCall(PathSegment { ident: k#0, hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:108:12: 108:14 (#0), res: Local(HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).12)), segments: [PathSegment { ident: it#0, hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).18), res: Local(HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:108:12: 108:14 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:108:15: 108:18 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:108:12: 108:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:108:22: 108:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:108:22: 108:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3784 ~ core[7d5a]::ops::range::{impl#7}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).62), kind: MethodCall(PathSegment { ident: k#0, hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).63), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:114:18: 114:20 (#0), res: Local(HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).12)), segments: [PathSegment { ident: it#0, hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).65), res: Local(HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:114:18: 114:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:114:21: 114:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:114:18: 114:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1939 ~ itertools[f416]::powerset::{impl#3}::fold).66), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:114:27: 114:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:114:27: 114:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:797 ~ itertools[f416]::combinations::{impl#2}::k)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:798 ~ itertools[f416]::combinations::{impl#2}::n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:800 ~ itertools[f416]::combinations::{impl#2}::reset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1944 ~ itertools[f416]::powerset::remaining_for)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3784 ~ core[7d5a]::ops::range::{impl#7}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1944 ~ itertools[f416]::powerset::remaining_for).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:130:6: 130:7 (#0), res: Local(HirId(DefId(0:1944 ~ itertools[f416]::powerset::remaining_for).4)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:1944 ~ itertools[f416]::powerset::remaining_for).10), res: Local(HirId(DefId(0:1944 ~ itertools[f416]::powerset::remaining_for).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:130:6: 130:7 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1944 ~ itertools[f416]::powerset::remaining_for).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:130:10: 130:11 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/powerset.rs:130:10: 130:11 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ itertools[f416]::adaptors::checked_binomial)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3935 ~ itertools[f416]::process_results_impl::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1951 ~ itertools[f416]::process_results_impl::{impl#0}::next_body)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1959 ~ itertools[f416]::process_results_impl::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1951 ~ itertools[f416]::process_results_impl::{impl#0}::next_body)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1960 ~ itertools[f416]::process_results_impl::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10436 ~ core[7d5a]::result::{impl#0}::unwrap_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:53:29: 53:30 (#0), res: Local(HirId(DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold).39), res: Local(HirId(DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:53:29: 53:30 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:53:29: 53:30 (#0), res: Local(HirId(DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold).39), res: Local(HirId(DefId(0:1961 ~ itertools[f416]::process_results_impl::{impl#1}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:53:29: 53:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1971 ~ itertools[f416]::process_results_impl::{impl#2}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1951 ~ itertools[f416]::process_results_impl::{impl#0}::next_body)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10436 ~ core[7d5a]::result::{impl#0}::unwrap_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8785 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::try_rfold)
[DEBUG] >> NOT FOUND! Getting extern def
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:80:29: 80:30 (#0), res: Local(HirId(DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold).39), res: Local(HirId(DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:80:29: 80:30 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:80:29: 80:30 (#0), res: Local(HirId(DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold).39), res: Local(HirId(DefId(0:1972 ~ itertools[f416]::process_results_impl::{impl#2}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:80:29: 80:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:102:18: 102:27 (#0), res: Local(HirId(DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results).4)), segments: [PathSegment { ident: processor#0, hir_id: HirId(DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results).22), res: Local(HirId(DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:102:18: 102:27 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:102:18: 102:27 (#0), res: Local(HirId(DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results).4)), segments: [PathSegment { ident: processor#0, hir_id: HirId(DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results).22), res: Local(HirId(DefId(0:1977 ~ itertools[f416]::process_results_impl::process_results).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/process_results_impl.rs:102:18: 102:27 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3942 ~ itertools[f416]::put_back_n_impl::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3945 ~ itertools[f416]::put_back_n_impl::{impl#3}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1987 ~ itertools[f416]::put_back_n_impl::put_back_n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1991 ~ itertools[f416]::put_back_n_impl::{impl#0}::put_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1995 ~ itertools[f416]::put_back_n_impl::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7504 ~ alloc[5873]::vec::{impl#1}::pop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1997 ~ itertools[f416]::put_back_n_impl::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1998 ~ itertools[f416]::put_back_n_impl::{impl#1}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3951 ~ itertools[f416]::rciter_impl::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2007 ~ itertools[f416]::rciter_impl::rciter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5201 ~ alloc[5873]::rc::{impl#8}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:5009 ~ core[7d5a]::cell::{impl#21}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3952 ~ itertools[f416]::rciter_impl::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2015 ~ itertools[f416]::rciter_impl::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2016 ~ itertools[f416]::rciter_impl::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5017 ~ core[7d5a]::cell::{impl#22}::borrow)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2019 ~ itertools[f416]::rciter_impl::{impl#2}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2025 ~ itertools[f416]::rciter_impl::{impl#3}::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3959 ~ itertools[f416]::repeatn::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3962 ~ itertools[f416]::repeatn::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2031 ~ itertools[f416]::repeatn::repeat_n)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2031 ~ itertools[f416]::repeatn::repeat_n).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:18:8: 18:9 (#0), res: Local(HirId(DefId(0:2031 ~ itertools[f416]::repeatn::repeat_n).4)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:2031 ~ itertools[f416]::repeatn::repeat_n).8), res: Local(HirId(DefId(0:2031 ~ itertools[f416]::repeatn::repeat_n).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:18:8: 18:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2031 ~ itertools[f416]::repeatn::repeat_n).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:18:13: 18:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:18:13: 18:14 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2036 ~ itertools[f416]::repeatn::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2036 ~ itertools[f416]::repeatn::{impl#0}::next).5), kind: Field(Expr { hir_id: HirId(DefId(0:2036 ~ itertools[f416]::repeatn::{impl#0}::next).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:35:12: 35:16 (#0), res: Local(HirId(DefId(0:2036 ~ itertools[f416]::repeatn::{impl#0}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2036 ~ itertools[f416]::repeatn::{impl#0}::next).7), res: Local(HirId(DefId(0:2036 ~ itertools[f416]::repeatn::{impl#0}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:35:12: 35:16 (#0) }, n#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:35:12: 35:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2036 ~ itertools[f416]::repeatn::{impl#0}::next).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:35:21: 35:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:35:21: 35:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9730 ~ core[7d5a]::option::{impl#2}::cloned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2037 ~ itertools[f416]::repeatn::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:54:31: 54:32 (#0), res: Local(HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).16)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).27), res: Local(HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:54:31: 54:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).28), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:54:35: 54:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:54:35: 54:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:56:17: 56:18 (#0), res: Local(HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).71), res: Local(HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:56:17: 56:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:56:17: 56:18 (#0), res: Local(HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).71), res: Local(HirId(DefId(0:2038 ~ itertools[f416]::repeatn::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/repeatn.rs:56:17: 56:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2044 ~ itertools[f416]::repeatn::{impl#1}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2045 ~ itertools[f416]::repeatn::{impl#1}::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2055 ~ itertools[f416]::size_hint::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25428 ~ core[7d5a]::num::{impl#11}::saturating_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25428 ~ core[7d5a]::num::{impl#11}::saturating_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2058 ~ itertools[f416]::size_hint::sub_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2060 ~ itertools[f416]::size_hint::mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25431 ~ core[7d5a]::num::{impl#11}::saturating_mul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:25399 ~ core[7d5a]::num::{impl#11}::checked_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2061 ~ itertools[f416]::size_hint::mul_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25431 ~ core[7d5a]::num::{impl#11}::saturating_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25399 ~ core[7d5a]::num::{impl#11}::checked_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2063 ~ itertools[f416]::size_hint::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9704 ~ core[7d5a]::option::{impl#0}::or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2068 ~ itertools[f416]::sources::unfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3963 ~ itertools[f416]::sources::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3972 ~ itertools[f416]::sources::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).4), kind: Field(Expr { hir_id: HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:86:10: 86:14 (#0), res: Local(HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).6), res: Local(HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:86:10: 86:14 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:86:9: 86:17 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).4), kind: Field(Expr { hir_id: HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:86:10: 86:14 (#0), res: Local(HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).6), res: Local(HirId(DefId(0:2080 ~ itertools[f416]::sources::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:86:10: 86:14 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:86:9: 86:17 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:3981 ~ itertools[f416]::sources::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:3982 ~ itertools[f416]::sources::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).5), kind: Field(Expr { hir_id: HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:116:27: 116:31 (#0), res: Local(HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).7), res: Local(HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:116:27: 116:31 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:116:26: 116:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2089 ~ itertools[f416]::sources::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).5), kind: Field(Expr { hir_id: HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:116:27: 116:31 (#0), res: Local(HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).7), res: Local(HirId(DefId(0:2088 ~ itertools[f416]::sources::{impl#3}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:116:27: 116:31 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/sources.rs:116:26: 116:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2090 ~ itertools[f416]::sources::iterate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3992 ~ itertools[f416]::take_while_inclusive::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2099 ~ itertools[f416]::take_while_inclusive::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:3993 ~ itertools[f416]::take_while_inclusive::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).27), kind: Field(Expr { hir_id: HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:52:22: 52:26 (#0), res: Local(HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).29), res: Local(HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:52:22: 52:26 (#0) }, predicate#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:52:21: 52:37 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2109 ~ itertools[f416]::take_while_inclusive::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10436 ~ core[7d5a]::result::{impl#0}::unwrap_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:78:33: 78:42 (#0), res: Local(HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).23)), segments: [PathSegment { ident: predicate#0, hir_id: HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).42), res: Local(HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:78:33: 78:42 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:79:27: 79:28 (#0), res: Local(HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).53), res: Local(HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:79:27: 79:28 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).27), kind: Field(Expr { hir_id: HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:52:22: 52:26 (#0), res: Local(HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).29), res: Local(HirId(DefId(0:2107 ~ itertools[f416]::take_while_inclusive::{impl#2}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:52:22: 52:26 (#0) }, predicate#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:52:21: 52:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:78:33: 78:42 (#0), res: Local(HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).23)), segments: [PathSegment { ident: predicate#0, hir_id: HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).42), res: Local(HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:78:33: 78:42 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:79:27: 79:28 (#0), res: Local(HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).53), res: Local(HirId(DefId(0:2110 ~ itertools[f416]::take_while_inclusive::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/take_while_inclusive.rs:79:27: 79:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:4003 ~ itertools[f416]::tee::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4010 ~ itertools[f416]::tee::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2123 ~ itertools[f416]::tee::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4700 ~ alloc[5873]::collections::vec_deque::{impl#4}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5201 ~ alloc[5873]::rc::{impl#8}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5009 ~ core[7d5a]::cell::{impl#21}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5019 ~ core[7d5a]::cell::{impl#22}::borrow_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).13), kind: Field(Expr { hir_id: HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:59:12: 59:18 (#0), res: Local(HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).10)), segments: [PathSegment { ident: buffer#0, hir_id: HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).15), res: Local(HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:59:12: 59:18 (#0) }, owner#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:59:12: 59:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).16), kind: Field(Expr { hir_id: HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:59:28: 59:32 (#0), res: Local(HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).18), res: Local(HirId(DefId(0:2128 ~ itertools[f416]::tee::{impl#0}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:59:28: 59:32 (#0) }, id#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:59:28: 59:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:4762 ~ alloc[5873]::collections::vec_deque::{impl#5}::pop_front)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:4765 ~ alloc[5873]::collections::vec_deque::{impl#5}::push_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5017 ~ core[7d5a]::cell::{impl#22}::borrow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).21), kind: Field(Expr { hir_id: HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:79:12: 79:18 (#0), res: Local(HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).10)), segments: [PathSegment { ident: buffer#0, hir_id: HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).23), res: Local(HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:79:12: 79:18 (#0) }, owner#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:79:12: 79:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).24), kind: Field(Expr { hir_id: HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:79:28: 79:32 (#0), res: Local(HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).26), res: Local(HirId(DefId(0:2129 ~ itertools[f416]::tee::{impl#0}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:79:28: 79:32 (#0) }, id#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tee.rs:79:28: 79:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:4746 ~ alloc[5873]::collections::vec_deque::{impl#5}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2056 ~ itertools[f416]::size_hint::add_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4017 ~ itertools[f416]::tuple_impl::{impl#13}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4020 ~ itertools[f416]::tuple_impl::{impl#14}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2142 ~ itertools[f416]::tuple_impl::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2146 ~ itertools[f416]::tuple_impl::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2147 ~ itertools[f416]::tuple_impl::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13229 ~ core[7d5a]::slice::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9048 ~ core[7d5a]::iter::traits::iterator::Iterator::position)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4029 ~ itertools[f416]::tuple_impl::{impl#15}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4033 ~ itertools[f416]::tuple_impl::{impl#16}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2151 ~ itertools[f416]::tuple_impl::tuples)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2158 ~ itertools[f416]::tuple_impl::{impl#4}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2204 ~ itertools[f416]::tuple_impl::TupleCollect::collect_from_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2159 ~ itertools[f416]::tuple_impl::{impl#4}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2203 ~ itertools[f416]::tuple_impl::TupleCollect::buffer_len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2208 ~ itertools[f416]::tuple_impl::TupleCollect::num_items)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2208 ~ itertools[f416]::tuple_impl::TupleCollect::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).24), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#495), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).17)), segments: [PathSegment { ident: left_val#495, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).26), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:21: 102:29 (#495) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:20: 102:29 (#495) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).27), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#495), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).18)), segments: [PathSegment { ident: right_val#495, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).29), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:34: 102:43 (#495) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:102:33: 102:43 (#495) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:6: 130:7 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).74), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:6: 130:7 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:10: 130:11 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).76), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:10: 130:11 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:25: 130:26 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).4)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).79), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:25: 130:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:29: 130:30 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).81), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:29: 130:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).100), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:52: 130:53 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).101), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:48: 130:49 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).102), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:46: 130:47 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).103), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:46: 130:47 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:50: 130:51 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).105), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:50: 130:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:46: 130:51 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).106), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:56: 130:57 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:54: 130:55 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).4)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).108), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:54: 130:55 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:58: 130:59 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).110), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:58: 130:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:54: 130:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:45: 130:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:63: 130:64 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).112), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:63: 130:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).101), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:48: 130:49 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).102), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:46: 130:47 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).103), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:46: 130:47 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:50: 130:51 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).105), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:50: 130:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:46: 130:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).106), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:56: 130:57 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:54: 130:55 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).4)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).108), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:54: 130:55 (#0) }, Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:58: 130:59 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).110), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:58: 130:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:54: 130:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).102), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:46: 130:47 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).103), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:46: 130:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:50: 130:51 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).105), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:50: 130:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:54: 130:55 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).4)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).108), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:54: 130:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:58: 130:59 (#0), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).110), res: Local(HirId(DefId(0:2161 ~ itertools[f416]::tuple_impl::add_then_div).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:130:58: 130:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2168 ~ itertools[f416]::tuple_impl::{impl#6}::into_buffer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2142 ~ itertools[f416]::tuple_impl::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4042 ~ itertools[f416]::tuple_impl::{impl#17}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4046 ~ itertools[f416]::tuple_impl::{impl#18}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2169 ~ itertools[f416]::tuple_impl::tuple_windows)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2176 ~ itertools[f416]::tuple_impl::{impl#7}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2176 ~ itertools[f416]::tuple_impl::{impl#7}::next).5), kind: Call(Expr { hir_id: HirId(DefId(0:2176 ~ itertools[f416]::tuple_impl::{impl#7}::next).6), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:2176 ~ itertools[f416]::tuple_impl::{impl#7}::next).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:194:12: 194:13 (#0), res: Def(TyParam, DefId(0:2174 ~ itertools[f416]::tuple_impl::{impl#7}::T)), segments: [PathSegment { ident: T#0, hir_id: HirId(DefId(0:2176 ~ itertools[f416]::tuple_impl::{impl#7}::next).7), res: Def(TyParam, DefId(0:2174 ~ itertools[f416]::tuple_impl::{impl#7}::T)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:194:12: 194:13 (#0) }, PathSegment { ident: num_items#0, hir_id: HirId(DefId(0:2176 ~ itertools[f416]::tuple_impl::{impl#7}::next).9), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:194:12: 194:24 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:194:12: 194:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2176 ~ itertools[f416]::tuple_impl::{impl#7}::next).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:194:30: 194:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:194:30: 194:31 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2208 ~ itertools[f416]::tuple_impl::TupleCollect::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2206 ~ itertools[f416]::tuple_impl::TupleCollect::collect_from_iter_no_buf)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2209 ~ itertools[f416]::tuple_impl::TupleCollect::left_shift_push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8903 ~ core[7d5a]::iter::traits::iterator::Iterator::chain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2206 ~ itertools[f416]::tuple_impl::TupleCollect::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2178 ~ itertools[f416]::tuple_impl::{impl#7}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2058 ~ itertools[f416]::size_hint::sub_scalar)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2178 ~ itertools[f416]::tuple_impl::{impl#7}::size_hint).28), kind: Call(Expr { hir_id: HirId(DefId(0:2178 ~ itertools[f416]::tuple_impl::{impl#7}::size_hint).29), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:2178 ~ itertools[f416]::tuple_impl::{impl#7}::size_hint).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:217:44: 217:45 (#0), res: Def(TyParam, DefId(0:2174 ~ itertools[f416]::tuple_impl::{impl#7}::T)), segments: [PathSegment { ident: T#0, hir_id: HirId(DefId(0:2178 ~ itertools[f416]::tuple_impl::{impl#7}::size_hint).30), res: Def(TyParam, DefId(0:2174 ~ itertools[f416]::tuple_impl::{impl#7}::T)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:217:44: 217:45 (#0) }, PathSegment { ident: num_items#0, hir_id: HirId(DefId(0:2178 ~ itertools[f416]::tuple_impl::{impl#7}::size_hint).32), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:217:44: 217:56 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:217:44: 217:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2178 ~ itertools[f416]::tuple_impl::{impl#7}::size_hint).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:217:61: 217:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:217:61: 217:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2208 ~ itertools[f416]::tuple_impl::TupleCollect::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4055 ~ itertools[f416]::tuple_impl::{impl#19}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4059 ~ itertools[f416]::tuple_impl::{impl#20}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2185 ~ itertools[f416]::tuple_impl::circular_tuple_windows)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2169 ~ itertools[f416]::tuple_impl::tuple_windows)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9115 ~ core[7d5a]::iter::traits::iterator::Iterator::cycle)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2192 ~ itertools[f416]::tuple_impl::{impl#10}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2192 ~ itertools[f416]::tuple_impl::{impl#10}::next).5), kind: Field(Expr { hir_id: HirId(DefId(0:2192 ~ itertools[f416]::tuple_impl::{impl#10}::next).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:277:12: 277:16 (#0), res: Local(HirId(DefId(0:2192 ~ itertools[f416]::tuple_impl::{impl#10}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2192 ~ itertools[f416]::tuple_impl::{impl#10}::next).7), res: Local(HirId(DefId(0:2192 ~ itertools[f416]::tuple_impl::{impl#10}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:277:12: 277:16 (#0) }, len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:277:12: 277:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2192 ~ itertools[f416]::tuple_impl::{impl#10}::next).8), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:277:24: 277:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:277:24: 277:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2193 ~ itertools[f416]::tuple_impl::{impl#10}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#511), res: Local(HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).50)), segments: [PathSegment { ident: i#511, hir_id: HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).61), res: Local(HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).50)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#511) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).62), kind: MethodCall(PathSegment { ident: len#511, hir_id: HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).63), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#511), res: Local(HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).57)), segments: [PathSegment { ident: s#511, hir_id: HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).65), res: Local(HirId(DefId(0:4208 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#511) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#511)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#511) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4210 ~ itertools[f416]::tuple_impl::{impl#32}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4212 ~ itertools[f416]::tuple_impl::{impl#32}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4212 ~ itertools[f416]::tuple_impl::{impl#32}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#514) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#514) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4212 ~ itertools[f416]::tuple_impl::{impl#32}::num_items).3), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#515) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#515) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4213 ~ itertools[f416]::tuple_impl::{impl#32}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#510), res: Local(HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).77)), segments: [PathSegment { ident: i#510, hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).88), res: Local(HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).77)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#510) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).89), kind: MethodCall(PathSegment { ident: len#510, hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).90), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#510), res: Local(HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).84)), segments: [PathSegment { ident: s#510, hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).92), res: Local(HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).84)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#510) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#510)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#510) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#510), res: Local(HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).77)), segments: [PathSegment { ident: i#510, hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).114), res: Local(HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).77)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#510) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).115), kind: MethodCall(PathSegment { ident: len#510, hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).116), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#510), res: Local(HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).84)), segments: [PathSegment { ident: s#510, hir_id: HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).118), res: Local(HirId(DefId(0:4195 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter).84)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#510) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#510)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#510) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4197 ~ itertools[f416]::tuple_impl::{impl#31}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4199 ~ itertools[f416]::tuple_impl::{impl#31}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4199 ~ itertools[f416]::tuple_impl::{impl#31}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#521) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#521) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4199 ~ itertools[f416]::tuple_impl::{impl#31}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#522) }, Expr { hir_id: HirId(DefId(0:4199 ~ itertools[f416]::tuple_impl::{impl#31}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#522) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#522) }, Expr { hir_id: HirId(DefId(0:4199 ~ itertools[f416]::tuple_impl::{impl#31}::num_items).5), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#523) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#523) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#522) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4199 ~ itertools[f416]::tuple_impl::{impl#31}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#522) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#522) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4199 ~ itertools[f416]::tuple_impl::{impl#31}::num_items).5), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#523) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#523) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4200 ~ itertools[f416]::tuple_impl::{impl#31}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#509), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).104)), segments: [PathSegment { ident: i#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).115), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#509) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).116), kind: MethodCall(PathSegment { ident: len#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).117), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#509), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).111)), segments: [PathSegment { ident: s#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).119), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).111)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#509) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#509)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#509) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#509), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).104)), segments: [PathSegment { ident: i#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).141), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#509) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).142), kind: MethodCall(PathSegment { ident: len#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).143), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#509), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).111)), segments: [PathSegment { ident: s#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).145), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).111)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#509) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#509)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#509) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#509), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).104)), segments: [PathSegment { ident: i#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).167), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#509) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).168), kind: MethodCall(PathSegment { ident: len#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).169), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#509), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).111)), segments: [PathSegment { ident: s#509, hir_id: HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).171), res: Local(HirId(DefId(0:4182 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter).111)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#509) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#509)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#509) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4184 ~ itertools[f416]::tuple_impl::{impl#30}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#532) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#532) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#533) }, Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#533) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#533) }, Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#534) }, Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#534) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#534) }, Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#535) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#535) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#534) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#533) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#533) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#533) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#534) }, Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#534) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#534) }, Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#535) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#535) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#534) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#534) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#534) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4186 ~ itertools[f416]::tuple_impl::{impl#30}::num_items).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#535) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#535) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4187 ~ itertools[f416]::tuple_impl::{impl#30}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).141), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#508), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).131)), segments: [PathSegment { ident: i#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).142), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).131)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#508) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).143), kind: MethodCall(PathSegment { ident: len#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).144), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#508), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).138)), segments: [PathSegment { ident: s#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).146), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).138)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#508) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#508)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#508) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).167), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#508), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).131)), segments: [PathSegment { ident: i#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).168), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).131)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#508) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).169), kind: MethodCall(PathSegment { ident: len#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).170), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#508), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).138)), segments: [PathSegment { ident: s#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).172), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).138)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#508) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#508)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#508) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).193), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#508), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).131)), segments: [PathSegment { ident: i#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).194), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).131)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#508) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).195), kind: MethodCall(PathSegment { ident: len#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).196), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#508), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).138)), segments: [PathSegment { ident: s#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).198), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).138)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#508) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#508)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#508) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).219), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#508), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).131)), segments: [PathSegment { ident: i#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).220), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).131)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#508) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).221), kind: MethodCall(PathSegment { ident: len#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).222), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#508), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).138)), segments: [PathSegment { ident: s#508, hir_id: HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).224), res: Local(HirId(DefId(0:4169 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter).138)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#508) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#508)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#508) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4171 ~ itertools[f416]::tuple_impl::{impl#29}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#547) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#547) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#548) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#548) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#548) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#549) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#549) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#549) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#550) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#550) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#550) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#551) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#551) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#550) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#549) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#548) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#548) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#548) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#549) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#549) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#549) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#550) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#550) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#550) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#551) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#551) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#550) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#549) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#549) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#549) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#550) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#550) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#550) }, Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#551) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#551) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#550) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#550) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#550) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4173 ~ itertools[f416]::tuple_impl::{impl#29}::num_items).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#551) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#551) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4174 ~ itertools[f416]::tuple_impl::{impl#29}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).168), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), segments: [PathSegment { ident: i#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).169), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).170), kind: MethodCall(PathSegment { ident: len#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).171), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).172), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), segments: [PathSegment { ident: s#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).173), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#507)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#507) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), segments: [PathSegment { ident: i#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).195), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).196), kind: MethodCall(PathSegment { ident: len#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).197), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), segments: [PathSegment { ident: s#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).199), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#507)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#507) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), segments: [PathSegment { ident: i#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).221), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).222), kind: MethodCall(PathSegment { ident: len#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).223), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), segments: [PathSegment { ident: s#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).225), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#507)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#507) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).246), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), segments: [PathSegment { ident: i#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).247), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).248), kind: MethodCall(PathSegment { ident: len#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).249), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), segments: [PathSegment { ident: s#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).251), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#507)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#507) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).272), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), segments: [PathSegment { ident: i#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).273), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).158)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#507) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).274), kind: MethodCall(PathSegment { ident: len#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).275), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).276), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), segments: [PathSegment { ident: s#507, hir_id: HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).277), res: Local(HirId(DefId(0:4156 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#507) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#507)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#507) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4158 ~ itertools[f416]::tuple_impl::{impl#28}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#566) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#566) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#567) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#567) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#567) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#568) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#568) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#568) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#569) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#569) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#569) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#570) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#570) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#569) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#568) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#567) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#567) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#567) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#568) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#568) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#568) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#569) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#569) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#569) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#570) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#570) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#569) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#568) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#568) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#568) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#569) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#569) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#569) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#570) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#570) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#569) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#569) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#569) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#570) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }, Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#570) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#570) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4160 ~ itertools[f416]::tuple_impl::{impl#28}::num_items).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#571) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4161 ~ itertools[f416]::tuple_impl::{impl#28}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).195), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), segments: [PathSegment { ident: i#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).196), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).197), kind: MethodCall(PathSegment { ident: len#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).198), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), segments: [PathSegment { ident: s#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).200), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#506)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#506) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), segments: [PathSegment { ident: i#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).222), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).223), kind: MethodCall(PathSegment { ident: len#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).224), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).225), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), segments: [PathSegment { ident: s#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).226), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#506)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#506) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).247), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), segments: [PathSegment { ident: i#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).248), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).249), kind: MethodCall(PathSegment { ident: len#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).250), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).251), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), segments: [PathSegment { ident: s#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).252), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#506)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#506) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).273), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), segments: [PathSegment { ident: i#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).274), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).275), kind: MethodCall(PathSegment { ident: len#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).276), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).277), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), segments: [PathSegment { ident: s#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).278), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#506)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#506) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).299), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), segments: [PathSegment { ident: i#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).300), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).301), kind: MethodCall(PathSegment { ident: len#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).302), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).303), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), segments: [PathSegment { ident: s#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).304), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#506)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#506) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).325), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), segments: [PathSegment { ident: i#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).326), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).185)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#506) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).327), kind: MethodCall(PathSegment { ident: len#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).328), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).329), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), segments: [PathSegment { ident: s#506, hir_id: HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).330), res: Local(HirId(DefId(0:4143 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter).192)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#506) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#506)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#506) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4145 ~ itertools[f416]::tuple_impl::{impl#27}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#589) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#589) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#590) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#590) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#590) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#591) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#591) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#591) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#592) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#592) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#592) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#593) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#593) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#592) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#591) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#590) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#590) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#590) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#591) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#591) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#591) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#592) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#592) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#592) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#593) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#593) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#592) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#591) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#591) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#591) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#592) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#592) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#592) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#593) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#593) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#592) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#592) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#592) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#593) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#593) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#593) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }, Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#594) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#594) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4147 ~ itertools[f416]::tuple_impl::{impl#27}::num_items).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#595) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4148 ~ itertools[f416]::tuple_impl::{impl#27}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).222), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), segments: [PathSegment { ident: i#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).223), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).224), kind: MethodCall(PathSegment { ident: len#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).225), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), segments: [PathSegment { ident: s#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).227), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#505)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#505) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), segments: [PathSegment { ident: i#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).249), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).250), kind: MethodCall(PathSegment { ident: len#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).251), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).252), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), segments: [PathSegment { ident: s#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).253), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#505)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#505) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).274), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), segments: [PathSegment { ident: i#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).275), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).276), kind: MethodCall(PathSegment { ident: len#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).277), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).278), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), segments: [PathSegment { ident: s#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).279), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#505)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#505) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).300), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), segments: [PathSegment { ident: i#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).301), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).302), kind: MethodCall(PathSegment { ident: len#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).303), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).304), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), segments: [PathSegment { ident: s#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).305), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#505)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#505) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), segments: [PathSegment { ident: i#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).327), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).328), kind: MethodCall(PathSegment { ident: len#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).329), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).330), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), segments: [PathSegment { ident: s#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).331), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#505)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#505) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).352), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), segments: [PathSegment { ident: i#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).353), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).354), kind: MethodCall(PathSegment { ident: len#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).355), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).356), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), segments: [PathSegment { ident: s#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).357), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#505)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#505) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).378), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), segments: [PathSegment { ident: i#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).379), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).212)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#505) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).380), kind: MethodCall(PathSegment { ident: len#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).381), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).382), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), segments: [PathSegment { ident: s#505, hir_id: HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).383), res: Local(HirId(DefId(0:4130 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter).219)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#505) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#505)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#505) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4132 ~ itertools[f416]::tuple_impl::{impl#26}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#616) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#616) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#617) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#617) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#617) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#618) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#618) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#618) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#619) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#619) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#619) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#620) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).15), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#620) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#619) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#618) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#617) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#617) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#617) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#618) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#618) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#618) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#619) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#619) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#619) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#620) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).15), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#620) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#619) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#618) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#618) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#618) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#619) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#619) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#619) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#620) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).15), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#620) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#619) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#619) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#619) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#620) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).15), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#620) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#620) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).15), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#621) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#621) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }, Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).15), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#622) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#622) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4134 ~ itertools[f416]::tuple_impl::{impl#26}::num_items).15), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#623) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4135 ~ itertools[f416]::tuple_impl::{impl#26}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).249), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), segments: [PathSegment { ident: i#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).250), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).251), kind: MethodCall(PathSegment { ident: len#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).252), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).253), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), segments: [PathSegment { ident: s#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).254), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#504)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#504) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).275), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), segments: [PathSegment { ident: i#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).276), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).277), kind: MethodCall(PathSegment { ident: len#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).278), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).279), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), segments: [PathSegment { ident: s#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).280), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#504)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#504) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).301), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), segments: [PathSegment { ident: i#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).302), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).303), kind: MethodCall(PathSegment { ident: len#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).304), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).305), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), segments: [PathSegment { ident: s#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).306), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#504)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#504) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).327), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), segments: [PathSegment { ident: i#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).328), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).329), kind: MethodCall(PathSegment { ident: len#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).330), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).331), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), segments: [PathSegment { ident: s#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).332), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#504)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#504) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).353), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), segments: [PathSegment { ident: i#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).354), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).355), kind: MethodCall(PathSegment { ident: len#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).356), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).357), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), segments: [PathSegment { ident: s#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).358), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#504)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#504) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).379), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), segments: [PathSegment { ident: i#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).380), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).381), kind: MethodCall(PathSegment { ident: len#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).382), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).383), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), segments: [PathSegment { ident: s#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).384), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#504)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#504) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).405), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), segments: [PathSegment { ident: i#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).406), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).407), kind: MethodCall(PathSegment { ident: len#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).408), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).409), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), segments: [PathSegment { ident: s#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).410), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#504)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#504) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).431), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), segments: [PathSegment { ident: i#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).432), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).239)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#504) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).433), kind: MethodCall(PathSegment { ident: len#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).434), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).435), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), segments: [PathSegment { ident: s#504, hir_id: HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).436), res: Local(HirId(DefId(0:4117 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter).246)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#504) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#504)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#504) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4119 ~ itertools[f416]::tuple_impl::{impl#25}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#647) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#647) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#648) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#648) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#648) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#649) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#649) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#649) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#650) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#650) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#650) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#651) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#651) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#650) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#649) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#648) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#648) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#648) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#649) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#649) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#649) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#650) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#650) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#650) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#651) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#651) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#650) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#649) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#649) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#649) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#650) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#650) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#650) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#651) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#651) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#650) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#650) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#650) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#651) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#651) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#651) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#652) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#652) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#653) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#653) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }, Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#654) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#654) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4121 ~ itertools[f416]::tuple_impl::{impl#25}::num_items).17), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#655) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4122 ~ itertools[f416]::tuple_impl::{impl#25}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).276), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).277), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).278), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).279), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).281), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).302), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).303), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).304), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).305), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).306), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).307), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).328), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).329), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).330), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).331), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).332), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).333), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).354), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).355), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).356), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).357), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).358), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).359), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).380), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).381), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).382), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).383), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).384), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).385), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).406), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).407), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).408), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).409), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).410), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).411), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).432), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).433), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).434), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).435), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).436), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).437), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).458), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).459), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).460), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).461), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).462), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).463), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).484), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), segments: [PathSegment { ident: i#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).485), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).266)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#503) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).486), kind: MethodCall(PathSegment { ident: len#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).487), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).488), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), segments: [PathSegment { ident: s#503, hir_id: HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).489), res: Local(HirId(DefId(0:4104 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#503) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#503)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#503) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4106 ~ itertools[f416]::tuple_impl::{impl#24}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#682) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#682) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#683) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#683) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#683) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#684) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#684) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#684) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#685) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#685) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#685) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#686) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#686) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#685) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#684) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#683) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#683) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#683) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#684) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#684) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#684) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#685) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#685) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#685) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#686) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#686) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#685) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#684) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#684) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#684) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#685) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#685) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#685) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#686) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#686) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#685) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#685) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#685) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#686) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#686) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#686) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#687) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#687) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#688) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#688) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#689) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#689) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }, Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#690) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#690) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4108 ~ itertools[f416]::tuple_impl::{impl#24}::num_items).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#691) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4109 ~ itertools[f416]::tuple_impl::{impl#24}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).303), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).304), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).305), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).306), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).307), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).308), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).329), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).330), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).331), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).332), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).333), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).334), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).355), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).356), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).357), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).358), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).359), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).360), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).381), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).382), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).383), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).384), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).385), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).386), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).407), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).408), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).409), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).410), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).411), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).412), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).433), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).434), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).435), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).436), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).437), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).438), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).459), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).460), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).461), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).462), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).463), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).464), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).486), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).487), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).488), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).489), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).490), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).511), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).512), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).513), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).514), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).515), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).516), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).537), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), segments: [PathSegment { ident: i#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).538), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).293)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#502) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).539), kind: MethodCall(PathSegment { ident: len#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).540), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).541), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), segments: [PathSegment { ident: s#502, hir_id: HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).542), res: Local(HirId(DefId(0:4091 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter).300)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#502) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#502)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#502) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4093 ~ itertools[f416]::tuple_impl::{impl#23}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#721) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#721) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#722) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#722) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#722) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#723) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#723) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#723) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#724) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#724) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#724) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#725) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#725) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#724) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#723) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#722) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#722) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#722) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#723) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#723) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#723) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#724) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#724) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#724) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#725) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#725) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#724) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#723) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#723) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#723) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#724) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#724) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#724) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#725) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#725) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#724) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#724) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#724) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#725) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#725) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#725) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#726) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#726) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#727) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#727) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#728) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#728) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#729) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#729) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }, Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#730) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#730) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4095 ~ itertools[f416]::tuple_impl::{impl#23}::num_items).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#731) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4096 ~ itertools[f416]::tuple_impl::{impl#23}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).330), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).331), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).332), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).333), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).334), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).335), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).356), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).357), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).358), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).359), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).360), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).361), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).382), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).383), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).384), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).385), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).386), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).387), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).408), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).409), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).410), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).411), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).412), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).413), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).434), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).435), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).436), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).437), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).438), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).439), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).460), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).461), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).462), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).463), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).464), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).465), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).486), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).487), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).488), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).489), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).490), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).491), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).512), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).513), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).514), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).515), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).516), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).517), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).538), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).539), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).540), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).541), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).542), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).543), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).564), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).565), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).566), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).567), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).568), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).569), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).590), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), segments: [PathSegment { ident: i#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).591), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#501) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).592), kind: MethodCall(PathSegment { ident: len#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).593), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).594), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), segments: [PathSegment { ident: s#501, hir_id: HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).595), res: Local(HirId(DefId(0:4078 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter).327)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#501) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#501)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#501) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4080 ~ itertools[f416]::tuple_impl::{impl#22}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#764) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#764) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#765) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#765) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#765) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#766) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#766) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#766) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#767) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#767) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#767) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#768) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#768) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#767) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#766) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#765) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#765) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#765) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#766) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#766) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#766) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#767) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#767) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#767) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#768) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#768) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#767) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#766) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#766) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#766) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#767) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#767) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#767) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#768) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#768) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#767) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#767) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#767) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#768) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#768) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#768) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#769) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#769) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#770) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#770) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#771) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#771) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#772) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#772) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#773) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#773) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }, Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#774) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#774) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4082 ~ itertools[f416]::tuple_impl::{impl#22}::num_items).23), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#775) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4083 ~ itertools[f416]::tuple_impl::{impl#22}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).357), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).358), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).359), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).360), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).361), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).362), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).383), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).384), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).385), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).386), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).387), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).388), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).409), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).410), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).411), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).412), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).414), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).435), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).436), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).437), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).438), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).439), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).440), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).461), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).462), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).463), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).464), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).465), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).466), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).487), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).488), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).489), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).490), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).491), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).492), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).513), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).514), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).515), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).516), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).517), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).518), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).539), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).540), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).541), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).542), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).543), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).544), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).565), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).566), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).567), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).568), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).569), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).570), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).591), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).592), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).593), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).594), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).595), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).596), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).617), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).618), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).619), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).620), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).621), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).622), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).643), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), segments: [PathSegment { ident: i#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).644), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:24: 366:25 (#500) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).645), kind: MethodCall(PathSegment { ident: len#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).646), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).647), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), segments: [PathSegment { ident: s#500, hir_id: HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).648), res: Local(HirId(DefId(0:4065 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter).354)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:29 (#500) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:30: 366:35 (#500)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/tuple_impl.rs:366:28: 366:35 (#500) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4067 ~ itertools[f416]::tuple_impl::{impl#21}::collect_from_iter_no_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).2), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#811) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#811) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).3), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#812) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#812) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#812) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#813) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#813) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#813) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#814) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#814) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#814) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#815) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#815) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#814) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#813) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#812) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).4), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#812) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#812) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).5), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#813) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#813) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#813) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#814) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#814) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#814) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#815) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#815) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#814) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#813) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).6), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#813) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#813) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).7), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#814) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#814) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#814) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#815) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#815) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#814) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).8), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#814) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#814) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).9), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#815) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#815) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).10), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#815) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).11), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#816) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).12), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#816) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).13), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#817) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#817) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).15), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#818) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#818) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).17), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#819) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).18), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#819) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).19), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#820) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).20), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#820) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).21), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#821) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).22), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#821) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).23), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:36: 33:37 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }, Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:58 (#822) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).24), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:33:34: 33:35 (#822) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4069 ~ itertools[f416]::tuple_impl::{impl#21}::num_items).25), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/impl_macros.rs:32:12: 32:13 (#823) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4070 ~ itertools[f416]::tuple_impl::{impl#21}::left_shift_push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2186 ~ core[7d5a]::mem::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4227 ~ itertools[f416]::unique_impl::{impl#8}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4228 ~ itertools[f416]::unique_impl::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2222 ~ itertools[f416]::unique_impl::unique_by)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:876 ~ std[e3cd]::collections::hash::map::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:892 ~ std[e3cd]::collections::hash::map::{impl#1}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).37), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).38), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:52:5: 52:9 (#0), res: Local(HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).2)), segments: [PathSegment { ident: used#0, hir_id: HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).40), res: Local(HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:52:5: 52:9 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:52:10: 52:15 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:52:5: 52:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:52:18: 52:30 (#0), res: Local(HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).18)), segments: [PathSegment { ident: current_used#0, hir_id: HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).42), res: Local(HirId(DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:52:18: 52:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:892 ~ std[e3cd]::collections::hash::map::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9022 ~ core[7d5a]::iter::traits::iterator::Iterator::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:928 ~ std[e3cd]::collections::hash::map::{impl#2}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:65:35: 65:36 (#0), res: Local(HirId(DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next).13)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next).30), res: Local(HirId(DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:65:35: 65:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).16), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:15: 71:16 (#0) }, Expr { hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:11: 71:14 (#0), res: Local(HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).10)), segments: [PathSegment { ident: low#0, hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).18), res: Local(HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:11: 71:14 (#0) }, Expr { hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:17: 71:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:17: 71:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:11: 71:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).20), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).21), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).22), kind: Field(Expr { hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:22: 71:26 (#0), res: Local(HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).24), res: Local(HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:22: 71:26 (#0) }, used#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:22: 71:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:32: 71:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:22: 71:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:11: 71:14 (#0), res: Local(HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).10)), segments: [PathSegment { ident: low#0, hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).18), res: Local(HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:11: 71:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2237 ~ itertools[f416]::unique_impl::{impl#1}::size_hint).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:17: 71:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:71:17: 71:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:893 ~ std[e3cd]::collections::hash::map::{impl#1}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:76:60: 76:65 (#0), res: Local(HirId(DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count).8)), segments: [PathSegment { ident: key_f#0, hir_id: HirId(DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count).25), res: Local(HirId(DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:76:60: 76:65 (#0) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:65:35: 65:36 (#0), res: Local(HirId(DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next).13)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next).30), res: Local(HirId(DefId(0:2235 ~ itertools[f416]::unique_impl::{impl#1}::next).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:65:35: 65:36 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:76:60: 76:65 (#0), res: Local(HirId(DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count).8)), segments: [PathSegment { ident: key_f#0, hir_id: HirId(DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count).25), res: Local(HirId(DefId(0:2238 ~ itertools[f416]::unique_impl::{impl#1}::count).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:76:60: 76:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8792 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfind)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:928 ~ std[e3cd]::collections::hash::map::{impl#2}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:88:36: 88:37 (#0), res: Local(HirId(DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back).13)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back).30), res: Local(HirId(DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:88:36: 88:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:88:36: 88:37 (#0), res: Local(HirId(DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back).13)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back).30), res: Local(HirId(DefId(0:2244 ~ itertools[f416]::unique_impl::{impl#2}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:88:36: 88:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2253 ~ itertools[f416]::unique_impl::{impl#4}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9029 ~ core[7d5a]::iter::traits::iterator::Iterator::find_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:909 ~ std[e3cd]::collections::hash::map::{impl#2}::entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1507 ~ std[e3cd]::collections::hash::map::{impl#78}::key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:1509 ~ std[e3cd]::collections::hash::map::{impl#78}::insert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).17), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:15: 122:16 (#0) }, Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:11: 122:14 (#0), res: Local(HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).11)), segments: [PathSegment { ident: low#0, hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).19), res: Local(HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:11: 122:14 (#0) }, Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).20), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:17: 122:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:17: 122:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:11: 122:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).21), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).23), kind: Field(Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).24), kind: Field(Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:22: 122:26 (#0), res: Local(HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).26), res: Local(HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:22: 122:26 (#0) }, iter#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:22: 122:31 (#0) }, used#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:22: 122:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:37: 122:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:22: 122:47 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:11: 122:14 (#0), res: Local(HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).11)), segments: [PathSegment { ident: low#0, hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).19), res: Local(HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:11: 122:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2255 ~ itertools[f416]::unique_impl::{impl#4}::size_hint).20), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:17: 122:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/unique_impl.rs:122:17: 122:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Specific({"itertools"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:893 ~ std[e3cd]::collections::hash::map::{impl#1}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2256 ~ itertools[f416]::unique_impl::{impl#4}::count)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2226 ~ itertools[f416]::unique_impl::count_new_keys)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2259 ~ itertools[f416]::unique_impl::{impl#5}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9029 ~ core[7d5a]::iter::traits::iterator::Iterator::find_map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:909 ~ std[e3cd]::collections::hash::map::{impl#2}::entry)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1507 ~ std[e3cd]::collections::hash::map::{impl#78}::key)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:1509 ~ std[e3cd]::collections::hash::map::{impl#78}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4234 ~ itertools[f416]::unique_impl::{impl#9}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4235 ~ itertools[f416]::unique_impl::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2265 ~ itertools[f416]::unique_impl::unique)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:876 ~ std[e3cd]::collections::hash::map::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2268 ~ itertools[f416]::unziptuple::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2273 ~ itertools[f416]::unziptuple::MultiUnzip::multiunzip)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4238 ~ itertools[f416]::unziptuple::{impl#0}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4244 ~ itertools[f416]::unziptuple::{impl#1}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4252 ~ itertools[f416]::unziptuple::{impl#2}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4262 ~ itertools[f416]::unziptuple::{impl#3}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4274 ~ itertools[f416]::unziptuple::{impl#4}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4288 ~ itertools[f416]::unziptuple::{impl#5}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4304 ~ itertools[f416]::unziptuple::{impl#6}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4322 ~ itertools[f416]::unziptuple::{impl#7}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4342 ~ itertools[f416]::unziptuple::{impl#8}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4364 ~ itertools[f416]::unziptuple::{impl#9}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4388 ~ itertools[f416]::unziptuple::{impl#10}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4414 ~ itertools[f416]::unziptuple::{impl#11}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4442 ~ itertools[f416]::unziptuple::{impl#12}::multiunzip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8470 ~ core[7d5a]::iter::sources::once::once)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:4444 ~ itertools[f416]::with_position::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4445 ~ itertools[f416]::with_position::{impl#1}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2289 ~ itertools[f416]::with_position::with_position)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8926 ~ core[7d5a]::iter::traits::iterator::Iterator::peekable)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4457 ~ itertools[f416]::with_position::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4459 ~ itertools[f416]::with_position::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:49:30: 49:39 (#878), res: Local(HirId(DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq).14)), segments: [PathSegment { ident: __self_discr#878, hir_id: HirId(DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq).27), res: Local(HirId(DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:49:30: 49:39 (#878) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:49:30: 49:39 (#878), res: Local(HirId(DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq).24)), segments: [PathSegment { ident: __arg1_discr#878, hir_id: HirId(DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq).29), res: Local(HirId(DefId(0:4462 ~ itertools[f416]::with_position::{impl#9}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:49:30: 49:39 (#878) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4464 ~ itertools[f416]::with_position::{impl#10}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2294 ~ itertools[f416]::with_position::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:7462 ~ core[7d5a]::iter::adapters::peekable::{impl#5}::peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:7462 ~ core[7d5a]::iter::adapters::peekable::{impl#5}::peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2295 ~ itertools[f416]::with_position::{impl#2}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:105:32: 105:33 (#0), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).52), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:105:32: 105:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:107:36: 107:37 (#0), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).69), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:107:36: 107:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2180 ~ core[7d5a]::mem::swap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:113:17: 113:18 (#0), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).111), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:113:17: 113:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:116:20: 116:21 (#0), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).129), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:116:20: 116:21 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:105:32: 105:33 (#0), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).52), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:105:32: 105:33 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:107:36: 107:37 (#0), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).69), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:107:36: 107:37 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:113:17: 113:18 (#0), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).111), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:113:17: 113:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:116:20: 116:21 (#0), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).129), res: Local(HirId(DefId(0:2296 ~ itertools[f416]::with_position::{impl#2}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/with_position.rs:116:20: 116:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:4473 ~ itertools[f416]::zip_eq_impl::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4477 ~ itertools[f416]::zip_eq_impl::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2306 ~ itertools[f416]::zip_eq_impl::zip_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2313 ~ itertools[f416]::zip_eq_impl::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2314 ~ itertools[f416]::zip_eq_impl::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4486 ~ itertools[f416]::zip_longest::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4490 ~ itertools[f416]::zip_longest::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2328 ~ itertools[f416]::zip_longest::zip_longest)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2335 ~ itertools[f416]::zip_longest::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2336 ~ itertools[f416]::zip_longest::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2063 ~ itertools[f416]::size_hint::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8987 ~ core[7d5a]::iter::traits::iterator::Iterator::try_fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:65:27: 65:28 (#0), res: Local(HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).43), res: Local(HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:65:27: 65:28 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:66:25: 66:26 (#0), res: Local(HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).62), res: Local(HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:66:25: 66:26 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:65:27: 65:28 (#0), res: Local(HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).43), res: Local(HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:65:27: 65:28 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:66:25: 66:26 (#0), res: Local(HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).62), res: Local(HirId(DefId(0:2337 ~ itertools[f416]::zip_longest::{impl#0}::fold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:66:25: 66:26 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2344 ~ itertools[f416]::zip_longest::{impl#1}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:108:27: 108:32 (#0), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).23)), segments: [PathSegment { ident: a_len#0, hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).65), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:108:27: 108:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:108:35: 108:40 (#0), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).30)), segments: [PathSegment { ident: b_len#0, hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).67), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:108:35: 108:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9000 ~ core[7d5a]::iter::traits::iterator::Iterator::fold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:116:27: 116:32 (#0), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).30)), segments: [PathSegment { ident: b_len#0, hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).98), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:116:27: 116:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:116:35: 116:40 (#0), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).23)), segments: [PathSegment { ident: a_len#0, hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).100), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:116:35: 116:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8789 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfold)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:122:13: 122:14 (#0), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).125), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:122:13: 122:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:122:13: 122:14 (#0), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).125), res: Local(HirId(DefId(0:2345 ~ itertools[f416]::zip_longest::{impl#1}::rfold).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/zip_longest.rs:122:13: 122:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:4496 ~ itertools[f416]::ziptuple::{impl#0}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4499 ~ itertools[f416]::ziptuple::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2357 ~ itertools[f416]::ziptuple::multizip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4502 ~ itertools[f416]::ziptuple::{impl#2}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4506 ~ itertools[f416]::ziptuple::{impl#3}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4507 ~ itertools[f416]::ziptuple::{impl#3}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).27), kind: MethodCall(PathSegment { ident: len#889, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#889), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).30), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#889) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#889)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#889) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#889), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).24)), segments: [PathSegment { ident: size#889, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).32), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#889) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).38), kind: MethodCall(PathSegment { ident: len#889, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).39), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#889), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).41), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#889) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#889)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#889) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#889), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).24)), segments: [PathSegment { ident: size#889, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).43), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#889) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).38), kind: MethodCall(PathSegment { ident: len#889, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).39), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#889), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).41), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#889) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#889)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#889) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#889), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).24)), segments: [PathSegment { ident: size#889, hir_id: HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).43), res: Local(HirId(DefId(0:4512 ~ itertools[f416]::ziptuple::{impl#5}::next_back).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#889) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4516 ~ itertools[f416]::ziptuple::{impl#6}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4521 ~ itertools[f416]::ziptuple::{impl#7}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4522 ~ itertools[f416]::ziptuple::{impl#7}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).32), kind: MethodCall(PathSegment { ident: len#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).33), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).35), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#890) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#890)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#890) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), segments: [PathSegment { ident: size#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).37), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#890) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).43), kind: MethodCall(PathSegment { ident: len#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).46), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#890) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#890)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#890) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), segments: [PathSegment { ident: size#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).48), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#890) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).43), kind: MethodCall(PathSegment { ident: len#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).46), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#890) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#890)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#890) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), segments: [PathSegment { ident: size#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).48), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#890) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).84), kind: MethodCall(PathSegment { ident: len#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).85), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).87), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#890) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#890)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#890) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), segments: [PathSegment { ident: size#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).89), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#890) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).95), kind: MethodCall(PathSegment { ident: len#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).96), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).98), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#890) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#890)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#890) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), segments: [PathSegment { ident: size#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).100), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#890) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).95), kind: MethodCall(PathSegment { ident: len#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).96), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).98), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#890) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#890)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#890) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#890), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), segments: [PathSegment { ident: size#890, hir_id: HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).100), res: Local(HirId(DefId(0:4529 ~ itertools[f416]::ziptuple::{impl#9}::next_back).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#890) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4534 ~ itertools[f416]::ziptuple::{impl#10}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4540 ~ itertools[f416]::ziptuple::{impl#11}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4541 ~ itertools[f416]::ziptuple::{impl#11}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).37), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).38), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).40), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).42), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).48), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).49), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).51), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).53), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).48), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).49), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).51), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).53), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).89), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).90), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).92), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).94), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).100), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).101), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).102), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).103), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).105), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).100), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).101), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).102), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).103), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).105), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).141), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).142), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).144), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).146), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).152), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).153), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).155), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).157), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).152), kind: MethodCall(PathSegment { ident: len#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).153), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).155), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#891) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#891)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#891) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), segments: [PathSegment { ident: size#891, hir_id: HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).157), res: Local(HirId(DefId(0:4550 ~ itertools[f416]::ziptuple::{impl#13}::next_back).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#891) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4556 ~ itertools[f416]::ziptuple::{impl#14}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4563 ~ itertools[f416]::ziptuple::{impl#15}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4564 ~ itertools[f416]::ziptuple::{impl#15}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).42), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).43), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).45), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).47), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).53), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).54), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).56), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).58), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).53), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).54), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).56), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).58), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).94), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).95), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).97), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).99), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).105), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).106), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).108), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).110), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).105), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).106), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).108), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).110), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).146), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).147), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).149), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).151), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).157), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).158), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).160), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).161), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).162), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).157), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).158), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).160), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).161), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).162), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).198), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).199), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).200), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).201), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).202), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).203), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).209), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).210), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).212), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).213), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).214), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).209), kind: MethodCall(PathSegment { ident: len#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).210), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).212), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#892) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#892)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#892) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).213), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), segments: [PathSegment { ident: size#892, hir_id: HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).214), res: Local(HirId(DefId(0:4575 ~ itertools[f416]::ziptuple::{impl#17}::next_back).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#892) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4582 ~ itertools[f416]::ziptuple::{impl#18}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4590 ~ itertools[f416]::ziptuple::{impl#19}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4591 ~ itertools[f416]::ziptuple::{impl#19}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).47), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).48), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).50), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).52), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).58), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).59), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).61), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).63), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).58), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).59), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).61), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).63), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).99), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).100), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).102), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).104), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).110), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).111), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).113), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).115), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).110), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).111), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).113), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).115), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).151), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).152), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).154), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).156), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).162), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).163), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).165), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).167), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).162), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).163), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).165), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).166), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).167), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).203), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).204), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).205), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).206), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).208), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).214), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).215), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).217), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).218), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).219), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).214), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).215), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).217), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).218), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).219), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).255), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).256), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).257), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).258), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).259), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).260), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).266), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).267), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).268), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).269), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).270), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).271), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).266), kind: MethodCall(PathSegment { ident: len#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).267), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).268), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).269), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#893) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#893)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#893) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).270), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), segments: [PathSegment { ident: size#893, hir_id: HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).271), res: Local(HirId(DefId(0:4604 ~ itertools[f416]::ziptuple::{impl#21}::next_back).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#893) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4612 ~ itertools[f416]::ziptuple::{impl#22}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4621 ~ itertools[f416]::ziptuple::{impl#23}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4622 ~ itertools[f416]::ziptuple::{impl#23}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).52), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).53), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).55), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).57), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).63), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).64), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).66), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).68), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).63), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).64), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).66), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).68), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).104), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).105), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).107), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).109), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).115), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).116), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).118), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).119), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).120), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).115), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).116), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).118), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).119), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).120), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).156), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).157), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).158), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).159), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).160), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).161), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).167), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).168), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).170), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).172), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).167), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).168), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).170), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).172), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).208), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).209), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).210), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).211), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).213), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).219), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).220), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).222), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).224), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).219), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).220), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).222), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).224), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).260), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).261), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).262), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).263), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).264), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).265), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).271), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).272), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).273), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).274), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).275), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).276), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).271), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).272), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).273), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).274), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).275), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).276), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).312), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).313), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).314), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).315), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).316), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).317), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).323), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).324), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).325), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).326), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).327), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).328), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).323), kind: MethodCall(PathSegment { ident: len#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).324), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).325), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).326), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#894) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#894)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#894) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).327), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), segments: [PathSegment { ident: size#894, hir_id: HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).328), res: Local(HirId(DefId(0:4637 ~ itertools[f416]::ziptuple::{impl#25}::next_back).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#894) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4646 ~ itertools[f416]::ziptuple::{impl#26}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4656 ~ itertools[f416]::ziptuple::{impl#27}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4657 ~ itertools[f416]::ziptuple::{impl#27}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).57), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).58), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).60), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).62), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).68), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).69), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).71), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).73), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).68), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).69), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).71), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).73), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).109), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).110), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).112), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).114), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).120), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).121), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).123), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).125), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).120), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).121), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).123), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).125), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).161), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).162), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).164), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).165), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).166), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).172), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).173), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).174), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).175), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).177), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).172), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).173), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).174), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).175), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).177), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).213), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).214), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).215), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).216), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).217), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).218), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).224), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).225), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).227), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).229), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).224), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).225), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).227), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).229), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).265), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).266), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).267), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).268), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).270), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).276), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).277), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).278), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).279), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).281), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).276), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).277), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).278), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).279), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).281), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).317), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).318), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).319), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).320), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).322), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).328), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).329), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).330), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).331), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).332), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).333), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).328), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).329), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).330), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).331), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).332), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).333), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).369), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).370), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).371), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).372), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).373), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).374), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).380), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).381), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).382), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).383), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).384), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).385), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).380), kind: MethodCall(PathSegment { ident: len#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).381), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).382), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).383), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#895) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#895)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#895) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).384), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), segments: [PathSegment { ident: size#895, hir_id: HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).385), res: Local(HirId(DefId(0:4674 ~ itertools[f416]::ziptuple::{impl#29}::next_back).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#895) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4684 ~ itertools[f416]::ziptuple::{impl#30}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4695 ~ itertools[f416]::ziptuple::{impl#31}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4696 ~ itertools[f416]::ziptuple::{impl#31}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).62), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).63), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).65), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).67), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).73), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).74), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).76), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).78), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).73), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).74), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).76), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).78), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).114), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).115), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).117), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).119), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).125), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).126), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).128), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).130), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).125), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).126), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).128), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).130), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).166), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).167), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).168), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).169), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).171), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).177), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).178), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).180), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).182), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).177), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).178), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).180), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).182), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).218), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).219), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).221), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).222), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).223), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).229), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).230), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).231), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).232), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).233), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).234), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).229), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).230), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).231), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).232), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).233), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).234), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).270), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).271), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).272), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).273), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).274), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).275), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).281), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).282), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).283), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).284), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).286), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).281), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).282), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).283), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).284), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).286), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).322), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).323), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).325), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).327), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).333), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).334), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).335), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).336), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).337), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).338), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).333), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).334), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).335), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).336), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).337), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).338), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).374), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).375), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).376), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).377), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).378), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).379), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).385), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).386), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).387), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).388), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).389), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).390), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).385), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).386), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).387), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).388), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).389), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).390), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).426), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).427), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).428), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).429), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).430), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).431), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).437), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).438), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).439), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).440), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).441), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).442), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).437), kind: MethodCall(PathSegment { ident: len#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).438), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).439), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).440), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#896) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#896)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#896) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).441), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), segments: [PathSegment { ident: size#896, hir_id: HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).442), res: Local(HirId(DefId(0:4715 ~ itertools[f416]::ziptuple::{impl#33}::next_back).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#896) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4726 ~ itertools[f416]::ziptuple::{impl#34}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4738 ~ itertools[f416]::ziptuple::{impl#35}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4739 ~ itertools[f416]::ziptuple::{impl#35}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).67), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).68), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).70), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).72), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).78), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).79), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).81), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).83), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).78), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).79), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).81), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).83), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).119), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).120), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).122), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).124), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).130), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).131), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).133), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).135), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).130), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).131), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).133), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).135), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).171), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).172), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).174), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).176), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).182), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).183), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).185), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).187), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).182), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).183), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).185), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).187), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).223), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).224), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).225), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).226), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).227), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).228), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).234), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).235), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).236), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).237), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).239), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).234), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).235), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).236), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).237), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).239), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).275), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).276), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).277), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).278), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).279), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).280), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).286), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).287), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).288), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).289), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).290), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).291), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).286), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).287), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).288), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).289), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).290), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).291), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).327), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).328), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).329), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).330), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).331), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).332), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).338), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).339), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).340), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).341), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).342), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).343), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).338), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).339), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).340), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).341), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).342), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).343), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).379), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).380), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).381), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).382), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).383), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).384), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).390), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).391), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).392), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).393), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).394), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).395), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).390), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).391), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).392), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).393), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).394), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).395), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).431), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).432), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).433), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).434), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).435), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).436), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).442), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).443), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).444), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).445), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).446), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).447), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).442), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).443), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).444), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).445), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).446), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).447), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).483), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).484), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).486), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).487), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).488), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).494), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).495), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).496), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).497), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).498), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).499), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).494), kind: MethodCall(PathSegment { ident: len#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).495), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).496), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).497), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#897) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#897)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#897) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).498), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), segments: [PathSegment { ident: size#897, hir_id: HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).499), res: Local(HirId(DefId(0:4760 ~ itertools[f416]::ziptuple::{impl#37}::next_back).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#897) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4772 ~ itertools[f416]::ziptuple::{impl#38}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4785 ~ itertools[f416]::ziptuple::{impl#39}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4786 ~ itertools[f416]::ziptuple::{impl#39}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).72), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).73), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).75), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).77), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).83), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).84), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).86), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).88), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).83), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).84), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).86), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).88), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).124), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).125), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).126), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).127), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).129), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).135), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).136), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).137), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).138), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).139), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).140), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).135), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).136), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).137), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).138), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).139), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).140), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).176), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).177), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).179), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).181), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).187), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).188), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).189), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).190), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).192), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).187), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).188), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).189), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).190), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).192), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).228), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).229), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).230), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).231), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).233), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).239), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).240), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).241), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).242), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).243), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).244), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).239), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).240), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).241), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).242), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).243), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).244), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).280), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).281), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).282), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).283), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).285), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).291), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).292), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).293), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).294), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).295), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).296), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).291), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).292), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).293), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).294), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).295), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).296), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).332), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).333), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).334), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).335), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).336), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).337), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).343), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).344), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).345), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).346), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).347), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).348), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).343), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).344), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).345), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).346), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).347), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).348), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).384), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).385), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).386), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).387), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).388), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).389), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).395), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).396), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).397), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).398), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).399), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).400), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).395), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).396), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).397), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).398), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).399), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).400), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).436), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).437), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).438), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).439), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).440), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).441), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).447), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).448), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).449), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).450), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).451), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).452), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).447), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).448), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).449), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).450), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).451), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).452), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).488), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).489), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).490), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).491), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).492), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).493), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).499), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).500), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).501), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).502), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).503), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).504), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).499), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).500), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).501), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).502), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).503), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).504), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).540), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).541), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).542), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).543), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).544), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).545), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).551), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).552), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).553), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).554), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).555), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).556), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).551), kind: MethodCall(PathSegment { ident: len#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).552), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).553), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).554), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#898) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#898)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#898) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).555), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), segments: [PathSegment { ident: size#898, hir_id: HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).556), res: Local(HirId(DefId(0:4809 ~ itertools[f416]::ziptuple::{impl#41}::next_back).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#898) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4822 ~ itertools[f416]::ziptuple::{impl#42}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4836 ~ itertools[f416]::ziptuple::{impl#43}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4837 ~ itertools[f416]::ziptuple::{impl#43}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).77), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).78), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).80), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).82), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).88), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).89), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).91), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).93), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).88), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).89), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).91), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).93), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).129), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).130), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).131), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).132), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).134), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).140), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).141), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).143), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).145), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).140), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).141), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).143), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).145), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).181), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).182), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).184), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).186), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).192), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).193), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).195), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).197), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).192), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).193), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).195), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).197), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).233), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).234), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).236), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).237), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).238), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).244), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).245), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).246), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).247), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).249), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).244), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).245), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).246), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).247), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).249), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).285), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).286), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).287), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).288), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).289), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).290), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).296), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).297), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).298), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).299), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).300), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).301), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).296), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).297), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).298), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).299), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).300), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).301), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).337), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).338), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).339), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).340), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).341), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).342), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).348), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).349), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).350), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).351), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).352), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).353), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).348), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).349), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).350), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).351), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).352), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).353), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).389), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).390), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).391), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).392), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).393), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).394), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).400), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).401), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).402), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).403), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).404), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).405), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).400), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).401), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).402), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).403), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).404), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).405), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).441), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).442), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).443), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).444), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).445), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).446), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).452), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).453), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).454), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).455), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).456), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).457), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).452), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).453), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).454), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).455), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).456), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).457), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).493), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).494), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).495), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).496), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).497), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).498), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).504), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).505), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).506), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).507), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).508), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).509), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).504), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).505), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).506), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).507), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).508), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).509), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).545), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).546), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).547), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).548), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).549), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).550), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).556), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).557), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).558), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).559), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).560), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).561), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).556), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).557), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).558), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).559), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).560), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).561), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).597), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).598), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).599), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).18)), segments: [PathSegment { ident: K#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).600), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).601), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).602), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).608), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).609), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).610), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).18)), segments: [PathSegment { ident: K#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).611), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).612), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).613), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).608), kind: MethodCall(PathSegment { ident: len#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).609), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).610), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).18)), segments: [PathSegment { ident: K#0, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).611), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#899) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#899)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#899) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).612), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), segments: [PathSegment { ident: size#899, hir_id: HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).613), res: Local(HirId(DefId(0:4862 ~ itertools[f416]::ziptuple::{impl#45}::next_back).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#899) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4876 ~ itertools[f416]::ziptuple::{impl#46}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4891 ~ itertools[f416]::ziptuple::{impl#47}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4892 ~ itertools[f416]::ziptuple::{impl#47}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2064 ~ itertools[f416]::size_hint::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).82), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).83), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).85), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).87), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).93), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).94), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).96), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).98), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).93), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).94), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).8)), segments: [PathSegment { ident: A#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).96), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).98), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).134), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).135), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).137), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).139), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).145), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).146), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).148), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).150), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).145), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).146), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).9)), segments: [PathSegment { ident: B#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).148), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).150), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).186), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).187), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).188), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).189), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).190), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).191), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).197), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).198), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).200), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).202), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).197), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).198), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).10)), segments: [PathSegment { ident: C#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).200), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).202), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).238), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).239), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).241), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).242), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).243), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).249), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).250), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).251), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).252), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).253), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).254), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).249), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).250), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).251), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).11)), segments: [PathSegment { ident: D#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).252), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).253), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).254), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).290), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).291), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).292), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).293), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).294), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).295), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).301), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).302), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).303), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).304), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).305), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).306), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).301), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).302), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).303), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).12)), segments: [PathSegment { ident: E#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).304), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).305), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).306), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).342), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).343), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).344), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).345), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).346), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).347), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).353), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).354), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).355), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).356), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).357), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).358), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).353), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).354), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).355), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).13)), segments: [PathSegment { ident: F#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).356), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).357), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).358), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).394), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).395), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).396), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).397), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).398), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).399), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).405), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).406), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).407), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).408), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).409), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).410), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).405), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).406), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).407), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).14)), segments: [PathSegment { ident: G#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).408), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).409), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).410), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).446), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).447), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).448), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).449), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).450), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).451), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).457), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).458), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).459), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).460), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).461), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).462), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).457), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).458), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).459), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).15)), segments: [PathSegment { ident: H#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).460), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).461), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).462), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).498), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).499), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).500), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).501), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).502), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).503), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).509), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).510), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).511), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).512), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).513), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).514), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).509), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).510), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).511), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).16)), segments: [PathSegment { ident: I#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).512), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).513), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).514), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).550), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).551), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).552), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).553), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).554), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).555), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).561), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).562), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).563), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).564), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).565), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).566), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).561), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).562), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).563), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).17)), segments: [PathSegment { ident: J#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).564), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).565), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).566), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).602), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).603), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).604), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).18)), segments: [PathSegment { ident: K#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).605), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).606), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).607), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).613), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).614), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).615), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).18)), segments: [PathSegment { ident: K#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).616), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).617), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).618), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).613), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).614), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).615), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).18)), segments: [PathSegment { ident: K#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).616), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).617), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).618), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).654), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).655), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).656), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:24 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).19)), segments: [PathSegment { ident: L#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).657), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:26 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:27: 112:32 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:24: 112:32 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).658), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).659), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:112:36: 112:40 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).665), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).666), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).667), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).19)), segments: [PathSegment { ident: L#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).668), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).669), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).670), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).665), kind: MethodCall(PathSegment { ident: len#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).666), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).667), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:37 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).19)), segments: [PathSegment { ident: L#0, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).668), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:39 (#900) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:40: 113:45 (#900)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:37: 113:45 (#900) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).669), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), segments: [PathSegment { ident: size#900, hir_id: HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).670), res: Local(HirId(DefId(0:4919 ~ itertools[f416]::ziptuple::{impl#49}::next_back).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/ziptuple.rs:113:48: 113:52 (#900) }
[DEBUG] Trying to get func ty of defid DefId(2:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2578:16: 2578:17 (#0), res: Local(HirId(DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0).63), res: Local(HirId(DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2578:16: 2578:17 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2578:16: 2578:17 (#0), res: Local(HirId(DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0).63), res: Local(HirId(DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2578:16: 2578:17 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2590:31: 2590:37 (#0), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).41)), segments: [PathSegment { ident: height#0, hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).52), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).41)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2590:31: 2590:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).53), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2590:41: 2590:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2590:41: 2590:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itertools"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2527 ~ itertools[f416]::Itertools::tree_reduce::inner0)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2596:34: 2596:35 (#0), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).89), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2596:34: 2596:35 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2603:53: 2603:54 (#0), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).123), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2603:53: 2603:54 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2596:34: 2596:35 (#0), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).89), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2596:34: 2596:35 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2603:53: 2603:54 (#0), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).6)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).123), res: Local(HirId(DefId(0:2531 ~ itertools[f416]::Itertools::tree_reduce::inner).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:2603:53: 2603:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:2701 ~ itertools[f416]::equal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9146 ~ core[7d5a]::iter::traits::iterator::Iterator::eq)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2704 ~ itertools[f416]::assert_equal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:2704 ~ itertools[f416]::assert_equal).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4286:43: 4286:44 (#0), res: Local(HirId(DefId(0:2704 ~ itertools[f416]::assert_equal).58)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:2704 ~ itertools[f416]::assert_equal).67), res: Local(HirId(DefId(0:2704 ~ itertools[f416]::assert_equal).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4286:43: 4286:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:2704 ~ itertools[f416]::assert_equal).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4286:48: 4286:49 (#0), res: Local(HirId(DefId(0:2704 ~ itertools[f416]::assert_equal).61)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:2704 ~ itertools[f416]::assert_equal).69), res: Local(HirId(DefId(0:2704 ~ itertools[f416]::assert_equal).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4286:48: 4286:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2707 ~ itertools[f416]::partition)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2707 ~ itertools[f416]::partition).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4328:13: 4328:17 (#0), res: Local(HirId(DefId(0:2707 ~ itertools[f416]::partition).4)), segments: [PathSegment { ident: pred#0, hir_id: HirId(DefId(0:2707 ~ itertools[f416]::partition).29), res: Local(HirId(DefId(0:2707 ~ itertools[f416]::partition).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4328:13: 4328:17 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8792 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2707 ~ itertools[f416]::partition).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4329:37: 4329:41 (#0), res: Local(HirId(DefId(0:2707 ~ itertools[f416]::partition).4)), segments: [PathSegment { ident: pred#0, hir_id: HirId(DefId(0:2707 ~ itertools[f416]::partition).43), res: Local(HirId(DefId(0:2707 ~ itertools[f416]::partition).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4329:37: 4329:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:2180 ~ core[7d5a]::mem::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2707 ~ itertools[f416]::partition).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4328:13: 4328:17 (#0), res: Local(HirId(DefId(0:2707 ~ itertools[f416]::partition).4)), segments: [PathSegment { ident: pred#0, hir_id: HirId(DefId(0:2707 ~ itertools[f416]::partition).29), res: Local(HirId(DefId(0:2707 ~ itertools[f416]::partition).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4328:13: 4328:17 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:2707 ~ itertools[f416]::partition).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4329:37: 4329:41 (#0), res: Local(HirId(DefId(0:2707 ~ itertools[f416]::partition).4)), segments: [PathSegment { ident: pred#0, hir_id: HirId(DefId(0:2707 ~ itertools[f416]::partition).43), res: Local(HirId(DefId(0:2707 ~ itertools[f416]::partition).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4329:37: 4329:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:4932 ~ itertools[f416]::{impl#3}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4935 ~ itertools[f416]::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:4938 ~ itertools[f416]::{impl#5}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:4943 ~ itertools[f416]::{impl#7}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }, Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).14)), segments: [PathSegment { ident: __self_discr#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).28), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }, Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).24)), segments: [PathSegment { ident: __arg1_discr#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).30), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).31), kind: Match(Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).32), kind: Tup([Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:34 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).34), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }, Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).4)), segments: [PathSegment { ident: other#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).36), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }, [Arm { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).46), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), pat: Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).45), kind: Tuple([Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).40), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:5: 4345:5 (#925), res: Def(Ctor(Variant, Fn), DefId(0:4923 ~ itertools[f416]::FoldWhile::Continue::{constructor#0})), segments: [PathSegment { ident: FoldWhile#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).37), res: Def(Enum, DefId(0:4920 ~ itertools[f416]::FoldWhile)), args: None, infer_args: true }, PathSegment { ident: Continue#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).38), res: Def(Ctor(Variant, Fn), DefId(0:4923 ~ itertools[f416]::FoldWhile::Continue::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).39), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).39), __self_0#925, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).44), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:5: 4345:5 (#925), res: Def(Ctor(Variant, Fn), DefId(0:4923 ~ itertools[f416]::FoldWhile::Continue::{constructor#0})), segments: [PathSegment { ident: FoldWhile#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).41), res: Def(Enum, DefId(0:4920 ~ itertools[f416]::FoldWhile)), args: None, infer_args: true }, PathSegment { ident: Continue#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).42), res: Def(Ctor(Variant, Fn), DefId(0:4923 ~ itertools[f416]::FoldWhile::Continue::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).43), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).43), __arg1_0#925, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).47), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925) }, Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).39)), segments: [PathSegment { ident: __self_0#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).49), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925) }, Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).43)), segments: [PathSegment { ident: __arg1_0#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).51), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925) } }, Arm { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).61), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), pat: Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).60), kind: Tuple([Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).55), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:5: 4347:5 (#925), res: Def(Ctor(Variant, Fn), DefId(0:4926 ~ itertools[f416]::FoldWhile::Done::{constructor#0})), segments: [PathSegment { ident: FoldWhile#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).52), res: Def(Enum, DefId(0:4920 ~ itertools[f416]::FoldWhile)), args: None, infer_args: true }, PathSegment { ident: Done#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).53), res: Def(Ctor(Variant, Fn), DefId(0:4926 ~ itertools[f416]::FoldWhile::Done::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).54), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).54), __self_0#925, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).59), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:5: 4347:5 (#925), res: Def(Ctor(Variant, Fn), DefId(0:4926 ~ itertools[f416]::FoldWhile::Done::{constructor#0})), segments: [PathSegment { ident: FoldWhile#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).56), res: Def(Enum, DefId(0:4920 ~ itertools[f416]::FoldWhile)), args: None, infer_args: true }, PathSegment { ident: Done#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).57), res: Def(Ctor(Variant, Fn), DefId(0:4926 ~ itertools[f416]::FoldWhile::Done::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).58), kind: Binding(BindingMode(No, Not), HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).58), __arg1_0#925, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).62), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925) }, Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).54)), segments: [PathSegment { ident: __self_0#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).64), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925) }, Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).58)), segments: [PathSegment { ident: __arg1_0#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).66), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925) } }, Arm { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).68), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), pat: Pat { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).67), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).69), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).70), kind: Call(Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:34 (#925), res: Def(Fn, DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)), segments: [PathSegment { ident: $crate#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).72), res: Err, args: None, infer_args: true }, PathSegment { ident: intrinsics#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).73), res: Def(Mod, DefId(2:1290 ~ core[7d5a]::intrinsics)), args: None, infer_args: true }, PathSegment { ident: unreachable#0, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).74), res: Def(Fn, DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }), hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).75), rules: UnsafeBlock(CompilerGenerated), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) } }], Normal), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).14)), segments: [PathSegment { ident: __self_discr#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).28), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).24)), segments: [PathSegment { ident: __arg1_discr#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).30), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4342:34: 4342:43 (#925) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).39)), segments: [PathSegment { ident: __self_0#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).49), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).43)), segments: [PathSegment { ident: __arg1_0#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).51), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4345:14: 4345:15 (#925) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).54)), segments: [PathSegment { ident: __self_0#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).64), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).58)), segments: [PathSegment { ident: __arg1_0#925, hir_id: HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).66), res: Local(HirId(DefId(0:4943 ~ itertools[f416]::{impl#7}::eq).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itertools-0.13.0/src/lib.rs:4347:10: 4347:11 (#925) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:2715 ~ itertools[f416]::{impl#1}::into_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:2716 ~ itertools[f416]::{impl#1}::is_done)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
