[DEBUG] Trying to get func ty of defid DefId(0:11 ~ unicode_ident[5975]::is_xid_start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5318 ~ core[7d5a]::char::methods::{impl#0}::is_ascii)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).33), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:47: 257:48 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).34), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:35: 257:37 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).36), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:35: 257:37 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:41: 257:46 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).38), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:41: 257:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:35: 257:46 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:49: 257:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:49: 257:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:35: 257:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:53: 257:58 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).41), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:53: 257:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).34), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:35: 257:37 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).36), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:35: 257:37 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:41: 257:46 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).38), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:41: 257:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:35: 257:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:49: 257:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:257:49: 257:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).48), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:41: 258:42 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).49), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:33: 258:34 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).50), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:23 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).45)), segments: [PathSegment { ident: chunk#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).52), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:23 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:27: 258:32 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).54), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:27: 258:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:32 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:35: 258:40 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).56), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:35: 258:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:40 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).57), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:43: 258:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:43: 258:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).58), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:63: 258:64 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).59), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:59: 258:60 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).60), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:49 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).62), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:49 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:53: 258:58 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).64), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:53: 258:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:58 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).65), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:61: 258:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:61: 258:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:62 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:65: 258:70 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).67), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:65: 258:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).49), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:33: 258:34 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).50), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:23 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).45)), segments: [PathSegment { ident: chunk#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).52), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:23 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:27: 258:32 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).54), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:27: 258:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:32 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:35: 258:40 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).56), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:35: 258:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).57), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:43: 258:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:43: 258:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).50), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:23 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).45)), segments: [PathSegment { ident: chunk#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).52), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:23 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:27: 258:32 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).54), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:27: 258:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:18: 258:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:35: 258:40 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).56), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:35: 258:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_ident"}), Specific({"unicode_ident"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_ident"}), Specific({"unicode_ident"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).59), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:59: 258:60 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).60), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:49 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).62), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:49 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:53: 258:58 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).64), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:53: 258:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:58 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).65), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:61: 258:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:61: 258:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:65: 258:70 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).67), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:65: 258:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).60), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:49 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).62), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:49 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:53: 258:58 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).64), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:53: 258:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:47: 258:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).65), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:61: 258:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:258:61: 258:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_ident"}), Specific({"unicode_ident"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_ident"}), Specific({"unicode_ident"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).71), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:73: 259:74 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).72), kind: MethodCall(PathSegment { ident: wrapping_shr#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).73), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).74), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).75), kind: MethodCall(PathSegment { ident: get_unchecked#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).76), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).77), kind: Field(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:14: 259:18 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:33 ~ unicode_ident[5975]::tables::LEAF)), segments: [PathSegment { ident: LEAF#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).79), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:33 ~ unicode_ident[5975]::tables::LEAF)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:14: 259:18 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:14: 259:20 (#0) }, [Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:35: 259:41 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).69)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).81), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:35: 259:41 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:21: 259:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:14: 259:42 (#0) }), hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).82), rules: UnsafeBlock(UserProvided), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:5: 259:44 (#0), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:5: 259:44 (#0) }, [Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).83), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:68: 259:69 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).84), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:60 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).86), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:60 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:64: 259:67 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).88), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:64: 259:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:67 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).89), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:70: 259:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:70: 259:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:71 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:45: 259:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:5: 259:72 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).90), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:75: 259:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:75: 259:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:5: 259:76 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).91), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:80: 259:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:80: 259:81 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).72), kind: MethodCall(PathSegment { ident: wrapping_shr#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).73), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).74), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).75), kind: MethodCall(PathSegment { ident: get_unchecked#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).76), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).77), kind: Field(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:14: 259:18 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:33 ~ unicode_ident[5975]::tables::LEAF)), segments: [PathSegment { ident: LEAF#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).79), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:33 ~ unicode_ident[5975]::tables::LEAF)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:14: 259:18 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:14: 259:20 (#0) }, [Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:35: 259:41 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).69)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).81), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:35: 259:41 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:21: 259:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:14: 259:42 (#0) }), hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).82), rules: UnsafeBlock(UserProvided), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:5: 259:44 (#0), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:5: 259:44 (#0) }, [Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).83), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:68: 259:69 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).84), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:60 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).86), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:60 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:64: 259:67 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).88), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:64: 259:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:67 (#0) }, Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).89), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:70: 259:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:70: 259:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:71 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:45: 259:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:5: 259:72 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).90), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:75: 259:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:75: 259:76 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:24816 ~ core[7d5a]::num::{impl#6}::wrapping_shr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).84), kind: Cast(Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:60 (#0), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).86), res: Local(HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:60 (#0) }, Ty { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:64: 259:67 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).88), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:64: 259:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:58: 259:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:11 ~ unicode_ident[5975]::is_xid_start).89), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:70: 259:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:259:70: 259:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:12 ~ unicode_ident[5975]::is_xid_continue)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5318 ~ core[7d5a]::char::methods::{impl#0}::is_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).33), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:50: 266:51 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).34), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:38: 266:40 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).36), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:38: 266:40 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:44: 266:49 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).38), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:44: 266:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:38: 266:49 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:52: 266:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:52: 266:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:38: 266:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:56: 266:61 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).41), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:56: 266:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).34), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:38: 266:40 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).36), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:38: 266:40 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:44: 266:49 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).38), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:44: 266:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:38: 266:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).39), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:52: 266:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:266:52: 266:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).48), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:41: 267:42 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).49), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:33: 267:34 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).50), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:23 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).45)), segments: [PathSegment { ident: chunk#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).52), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:23 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:27: 267:32 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).54), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:27: 267:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:32 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:35: 267:40 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).56), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:35: 267:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:40 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).57), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:43: 267:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:43: 267:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).58), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:63: 267:64 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).59), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:59: 267:60 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).60), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:49 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).62), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:49 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:53: 267:58 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).64), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:53: 267:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:58 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).65), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:61: 267:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:61: 267:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:62 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:65: 267:70 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).67), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:65: 267:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).49), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:33: 267:34 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).50), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:23 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).45)), segments: [PathSegment { ident: chunk#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).52), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:23 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:27: 267:32 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).54), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:27: 267:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:32 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:35: 267:40 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).56), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:35: 267:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).57), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:43: 267:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:43: 267:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).50), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:23 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).45)), segments: [PathSegment { ident: chunk#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).52), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:23 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:27: 267:32 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).54), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:27: 267:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:18: 267:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:35: 267:40 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).56), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:35: 267:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_ident"}), Specific({"unicode_ident"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_ident"}), Specific({"unicode_ident"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).59), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:59: 267:60 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).60), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:49 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).62), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:49 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:53: 267:58 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).64), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:53: 267:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:58 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).65), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:61: 267:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:61: 267:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:65: 267:70 (#0), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), segments: [PathSegment { ident: CHUNK#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).67), res: Def(Const, DefId(0:28 ~ unicode_ident[5975]::tables::CHUNK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:65: 267:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).60), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:49 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).62), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:49 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:53: 267:58 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).64), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:53: 267:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:47: 267:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).65), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:61: 267:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:267:61: 267:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_ident"}), Specific({"unicode_ident"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_ident"}), Specific({"unicode_ident"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).71), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:73: 268:74 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).72), kind: MethodCall(PathSegment { ident: wrapping_shr#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).73), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).74), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).75), kind: MethodCall(PathSegment { ident: get_unchecked#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).76), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).77), kind: Field(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:14: 268:18 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:33 ~ unicode_ident[5975]::tables::LEAF)), segments: [PathSegment { ident: LEAF#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).79), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:33 ~ unicode_ident[5975]::tables::LEAF)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:14: 268:18 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:14: 268:20 (#0) }, [Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:35: 268:41 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).69)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).81), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:35: 268:41 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:21: 268:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:14: 268:42 (#0) }), hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).82), rules: UnsafeBlock(UserProvided), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:5: 268:44 (#0), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:5: 268:44 (#0) }, [Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).83), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:68: 268:69 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).84), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:60 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).86), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:60 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:64: 268:67 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).88), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:64: 268:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:67 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).89), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:70: 268:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:70: 268:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:71 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:45: 268:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:5: 268:72 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).90), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:75: 268:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:75: 268:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:5: 268:76 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).91), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:80: 268:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:80: 268:81 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).72), kind: MethodCall(PathSegment { ident: wrapping_shr#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).73), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).74), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).75), kind: MethodCall(PathSegment { ident: get_unchecked#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).76), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).77), kind: Field(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:14: 268:18 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:33 ~ unicode_ident[5975]::tables::LEAF)), segments: [PathSegment { ident: LEAF#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).79), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:33 ~ unicode_ident[5975]::tables::LEAF)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:14: 268:18 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:14: 268:20 (#0) }, [Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:35: 268:41 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).69)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).81), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:35: 268:41 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:21: 268:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:14: 268:42 (#0) }), hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).82), rules: UnsafeBlock(UserProvided), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:5: 268:44 (#0), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:5: 268:44 (#0) }, [Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).83), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:68: 268:69 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).84), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:60 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).86), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:60 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:64: 268:67 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).88), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:64: 268:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:67 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).89), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:70: 268:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:70: 268:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:71 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:45: 268:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:5: 268:72 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).90), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:75: 268:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:75: 268:76 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:24816 ~ core[7d5a]::num::{impl#6}::wrapping_shr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).84), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:60 (#0), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).86), res: Local(HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:60 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:64: 268:67 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).88), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:64: 268:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:58: 268:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ unicode_ident[5975]::is_xid_continue).89), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:70: 268:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-ident-1.0.13/src/lib.rs:268:70: 268:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
