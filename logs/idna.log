[DEBUG] Trying to get func ty of defid DefId(0:21 ~ idna[18fd]::punycode::adapt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:33:14: 33:19 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).27), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:33:14: 33:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:33:22: 33:32 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).4)), segments: [PathSegment { ident: num_points#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).29), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:33:22: 33:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:11: 35:16 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).38), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:11: 35:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).39), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:44: 35:45 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).40), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:35: 35:36 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).41), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:26: 35:27 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:21: 35:25 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).43), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:21: 35:25 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:28: 35:33 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).45), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:28: 35:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:20: 35:34 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:37: 35:42 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), segments: [PathSegment { ident: T_MAX#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).47), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:37: 35:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:19: 35:43 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).48), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:46: 35:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:46: 35:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:19: 35:47 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).40), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:35: 35:36 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).41), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:26: 35:27 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:21: 35:25 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).43), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:21: 35:25 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:28: 35:33 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).45), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:28: 35:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:20: 35:34 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:37: 35:42 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), segments: [PathSegment { ident: T_MAX#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).47), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:37: 35:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:19: 35:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).48), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:46: 35:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:46: 35:47 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).41), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:26: 35:27 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:21: 35:25 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).43), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:21: 35:25 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:28: 35:33 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).45), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:28: 35:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:20: 35:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:37: 35:42 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), segments: [PathSegment { ident: T_MAX#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).47), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:37: 35:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:21: 35:25 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).43), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:21: 35:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:28: 35:33 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).45), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:35:28: 35:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:36:18: 36:22 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).55), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:36:18: 36:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:36:25: 36:30 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).57), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:36:25: 36:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:5: 39:6 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).34)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).76), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:5: 39:6 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).77), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:39: 39:40 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).78), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:30: 39:31 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).79), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:25: 39:26 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).80), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:17: 39:18 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).82), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).84), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:24 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).85), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:27: 39:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:27: 39:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:11: 39:29 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:32: 39:37 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).87), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:32: 39:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:10: 39:38 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).88), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:48: 39:49 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:42: 39:47 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).90), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:42: 39:47 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:50: 39:54 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:16 ~ idna[18fd]::punycode::SKEW)), segments: [PathSegment { ident: SKEW#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).92), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:16 ~ idna[18fd]::punycode::SKEW)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:50: 39:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:41: 39:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:9: 39:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).78), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:30: 39:31 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).79), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:25: 39:26 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).80), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:17: 39:18 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).82), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).84), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:24 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).85), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:27: 39:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:27: 39:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:11: 39:29 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:32: 39:37 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).87), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:32: 39:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:10: 39:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).88), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:48: 39:49 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:42: 39:47 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).90), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:42: 39:47 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:50: 39:54 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:16 ~ idna[18fd]::punycode::SKEW)), segments: [PathSegment { ident: SKEW#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).92), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:16 ~ idna[18fd]::punycode::SKEW)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:50: 39:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:41: 39:55 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).79), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:25: 39:26 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).80), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:17: 39:18 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).82), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).84), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:24 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).85), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:27: 39:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:27: 39:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:11: 39:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:32: 39:37 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).87), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:32: 39:37 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).80), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:17: 39:18 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).82), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0) }, Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).84), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).85), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:27: 39:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:27: 39:28 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).82), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:12: 39:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), segments: [PathSegment { ident: T_MIN#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).84), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:14 ~ idna[18fd]::punycode::T_MIN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:19: 39:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:42: 39:47 (#0), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).90), res: Local(HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:42: 39:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:50: 39:54 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:16 ~ idna[18fd]::punycode::SKEW)), segments: [PathSegment { ident: SKEW#0, hir_id: HirId(DefId(0:21 ~ idna[18fd]::punycode::adapt).92), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:16 ~ idna[18fd]::punycode::SKEW)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:39:50: 39:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:22 ~ idna[18fd]::punycode::decode_to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:24 ~ idna[18fd]::punycode::decode)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:24 ~ idna[18fd]::punycode::decode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ idna[18fd]::punycode::{impl#3}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:7511 ~ alloc[5873]::vec::{impl#1}::clear)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14343 ~ core[7d5a]::str::{impl#0}::rfind)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:74:20: 74:28 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).27)), segments: [PathSegment { ident: position#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).42), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:74:20: 74:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).43), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:74:31: 74:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:74:31: 74:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14407 ~ core[7d5a]::str::{impl#0}::is_ascii)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14327 ~ core[7d5a]::str::{impl#0}::bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).162), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:48: 105:49 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:43: 105:47 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).156)), segments: [PathSegment { ident: byte#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).164), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:43: 105:47 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).165), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:50: 105:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:50: 105:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:43: 105:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).166), kind: Lit(Spanned { node: Int(Pu128(26), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:57: 105:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:57: 105:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:43: 105:47 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).156)), segments: [PathSegment { ident: byte#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).164), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:43: 105:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).165), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:50: 105:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:105:50: 105:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:106:43: 106:47 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).167)), segments: [PathSegment { ident: byte#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).174), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).167)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:106:43: 106:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).175), kind: Lit(Spanned { node: Byte(65), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:106:50: 106:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:106:50: 106:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).182), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:107:43: 107:47 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).176)), segments: [PathSegment { ident: byte#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).183), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:107:43: 107:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).184), kind: Lit(Spanned { node: Byte(97), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:107:50: 107:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:107:50: 107:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:20: 110:25 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).195)), segments: [PathSegment { ident: digit#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).199), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).195)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:20: 110:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).200), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:43: 110:44 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).201), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:38: 110:39 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).202), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:29: 110:37 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).203), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).204), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:29: 110:37 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).205), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:40: 110:41 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).206), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:40: 110:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:28: 110:42 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:45: 110:51 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).126)), segments: [PathSegment { ident: weight#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).208), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:45: 110:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:28: 110:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).201), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:38: 110:39 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).202), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:29: 110:37 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).203), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).204), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:29: 110:37 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).205), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:40: 110:41 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).206), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:40: 110:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:28: 110:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:45: 110:51 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).126)), segments: [PathSegment { ident: weight#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).208), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:45: 110:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).202), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:29: 110:37 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).203), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).204), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:29: 110:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).205), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:40: 110:41 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).206), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:110:40: 110:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:113:22: 113:27 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).195)), segments: [PathSegment { ident: digit#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).224), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).195)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:113:22: 113:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).225), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:113:30: 113:36 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).126)), segments: [PathSegment { ident: weight#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).226), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:113:30: 113:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).231), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:114:28: 114:29 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).131)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).232), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).131)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:114:28: 114:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).233), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:114:33: 114:37 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).105)), segments: [PathSegment { ident: bias#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).234), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).105)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:114:33: 114:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).242), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:27: 116:28 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).131)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).243), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).131)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:27: 116:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).244), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:37: 116:38 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).245), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:32: 116:36 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).105)), segments: [PathSegment { ident: bias#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).246), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).105)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:32: 116:36 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).247), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:39: 116:44 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), segments: [PathSegment { ident: T_MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).248), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:39: 116:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:32: 116:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).245), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:32: 116:36 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).105)), segments: [PathSegment { ident: bias#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).246), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).105)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:32: 116:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).247), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:39: 116:44 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), segments: [PathSegment { ident: T_MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).248), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:116:39: 116:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).256), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:119:21: 119:22 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).131)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).257), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).131)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:119:21: 119:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).258), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:119:25: 119:29 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).105)), segments: [PathSegment { ident: bias#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).259), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).105)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:119:25: 119:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).265), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:121:20: 121:25 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).195)), segments: [PathSegment { ident: digit#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).266), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).195)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:121:20: 121:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).267), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:121:28: 121:29 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).268), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:121:28: 121:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).277), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:20: 124:26 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).126)), segments: [PathSegment { ident: weight#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).278), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:20: 124:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).279), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:38: 124:39 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:29: 124:37 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).281), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).282), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:29: 124:37 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).283), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:46: 124:47 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:41: 124:45 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).285), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:41: 124:45 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).286), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:48: 124:49 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).287), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:48: 124:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:40: 124:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:29: 124:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:29: 124:37 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).281), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).282), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:29: 124:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).283), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:46: 124:47 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:41: 124:45 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).285), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:41: 124:45 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).286), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:48: 124:49 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).287), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:48: 124:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:40: 124:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:41: 124:45 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).285), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:41: 124:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).286), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:48: 124:49 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).287), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:124:48: 124:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).302), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:127:27: 127:31 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).303), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:127:27: 127:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).304), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:127:34: 127:35 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).305), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).262)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:127:34: 127:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:21 ~ idna[18fd]::punycode::adapt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).345), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:26: 135:27 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).346), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:26: 135:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).347), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:30: 135:40 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).122)), segments: [PathSegment { ident: previous_i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).348), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).122)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:30: 135:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).350), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:42: 135:48 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).351), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:42: 135:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).352), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:51: 135:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:51: 135:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).354), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:54: 135:64 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).122)), segments: [PathSegment { ident: previous_i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).355), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).122)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:54: 135:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).356), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:68: 135:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:135:68: 135:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).360), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:18: 136:19 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).361), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:16: 136:17 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).362), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:16: 136:17 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).363), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:28: 136:29 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).364), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:21: 136:27 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).365), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:21: 136:27 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).366), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:30: 136:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:30: 136:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:20: 136:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:16: 136:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).367), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:44: 136:45 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).368), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:35: 136:43 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).369), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).370), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:35: 136:43 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).371), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:46: 136:56 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).100)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).372), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).100)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:46: 136:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:35: 136:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).361), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:16: 136:17 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).362), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:16: 136:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).363), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:28: 136:29 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).364), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:21: 136:27 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).365), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:21: 136:27 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).366), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:30: 136:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:30: 136:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:20: 136:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).364), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:21: 136:27 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).365), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:21: 136:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).366), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:30: 136:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:30: 136:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).368), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:35: 136:43 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).369), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).370), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:35: 136:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).371), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:46: 136:56 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).100)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).372), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).100)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:136:46: 136:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).387), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:27: 142:28 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).388), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:27: 142:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).389), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:39: 142:40 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).390), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:32: 142:38 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).391), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:32: 142:38 (#0) }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).392), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:41: 142:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:41: 142:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:31: 142:43 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).390), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:32: 142:38 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).391), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:32: 142:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).392), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:41: 142:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:142:41: 142:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).398), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:143:18: 143:24 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).399), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).95)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:143:18: 143:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).400), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:143:27: 143:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:143:27: 143:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5374 ~ core[7d5a]::char::from_u32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).441), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).442), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:151:21: 151:24 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).430)), segments: [PathSegment { ident: idx#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).443), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).430)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:151:21: 151:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:151:20: 151:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).444), kind: Cast(Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).445), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:151:28: 151:29 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).446), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:151:28: 151:29 (#0) }, Ty { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).447), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:151:33: 151:38 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).448), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:151:33: 151:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:151:28: 151:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:5726 ~ alloc[5873]::slice::{impl#0}::sort_by_key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).539), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:166:18: 166:26 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).87)), segments: [PathSegment { ident: base_len#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).540), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).87)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:166:18: 166:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).541), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).542), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).543), kind: Field(Expr { hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).544), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:166:29: 166:33 (#0), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).545), res: Local(HirId(DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:166:29: 166:33 (#0) }, insertions#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:166:29: 166:44 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:166:45: 166:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:166:29: 166:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).80), kind: Field(Expr { hir_id: HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:195:23: 195:27 (#0), res: Local(HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).82), res: Local(HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:195:23: 195:27 (#0) }, inserted#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:195:23: 195:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).83), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).84), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).85), kind: Field(Expr { hir_id: HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:195:40: 195:44 (#0), res: Local(HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).87), res: Local(HirId(DefId(0:39 ~ idna[18fd]::punycode::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:195:40: 195:44 (#0) }, insertions#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:195:40: 195:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:195:56: 195:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:195:40: 195:61 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).5), kind: Field(Expr { hir_id: HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:202:19: 202:23 (#0), res: Local(HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).7), res: Local(HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:202:19: 202:23 (#0) }, len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:202:19: 202:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).8), kind: Field(Expr { hir_id: HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:202:30: 202:34 (#0), res: Local(HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).10), res: Local(HirId(DefId(0:40 ~ idna[18fd]::punycode::{impl#1}::size_hint).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:202:30: 202:34 (#0) }, position#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:202:30: 202:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).4), kind: Field(Expr { hir_id: HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:209:9: 209:13 (#0), res: Local(HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).6), res: Local(HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:209:9: 209:13 (#0) }, len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:209:9: 209:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).7), kind: Field(Expr { hir_id: HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:209:20: 209:24 (#0), res: Local(HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).9), res: Local(HirId(DefId(0:43 ~ idna[18fd]::punycode::{impl#2}::len).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:209:20: 209:24 (#0) }, position#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:209:20: 209:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ idna[18fd]::punycode::encode_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).5), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:8: 218:13 (#0), res: Local(HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).2)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).8), res: Local(HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:8: 218:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:14: 218:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:8: 218:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).9), kind: Cast(Expr { hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:22: 218:30 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).11), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).12), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:22: 218:30 (#0) }, Ty { hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:34: 218:39 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:44 ~ idna[18fd]::punycode::encode_str).14), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:34: 218:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:218:22: 218:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5964 ~ alloc[5873]::string::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ idna[18fd]::punycode::encode_into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ idna[18fd]::punycode::encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).5), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:8: 230:13 (#0), res: Local(HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).2)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).8), res: Local(HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:8: 230:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:14: 230:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:8: 230:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).9), kind: Cast(Expr { hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:22: 230:30 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).11), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).12), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:22: 230:30 (#0) }, Ty { hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:34: 230:39 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:46 ~ idna[18fd]::punycode::encode).14), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:34: 230:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:230:22: 230:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5964 ~ alloc[5873]::string::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ idna[18fd]::punycode::encode_into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9109 ~ core[7d5a]::iter::traits::iterator::Iterator::copied)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ idna[18fd]::punycode::encode_into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9688 ~ core[7d5a]::option::{impl#0}::ok_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25014 ~ core[7d5a]::num::{impl#8}::checked_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5318 ~ core[7d5a]::char::methods::{impl#0}::is_ascii)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:253:8: 253:20 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).11)), segments: [PathSegment { ident: basic_length#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).95), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:253:8: 253:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).96), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:253:23: 253:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:253:23: 253:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:260:11: 260:20 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), segments: [PathSegment { ident: processed#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).128), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:260:11: 260:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:260:23: 260:35 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).10)), segments: [PathSegment { ident: input_length#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).130), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:260:23: 260:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9064 ~ core[7d5a]::iter::traits::iterator::Iterator::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8920 ~ core[7d5a]::iter::traits::iterator::Iterator::filter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:266:26: 266:27 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).156)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).160), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:266:26: 266:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).161), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:266:31: 266:41 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).162), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:266:31: 266:41 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).168), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:27: 269:28 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:12: 269:26 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).165)), segments: [PathSegment { ident: min_code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).170), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:12: 269:26 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:29: 269:39 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).172), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:29: 269:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:12: 269:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).173), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:61: 269:62 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).174), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:52: 269:53 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:43: 269:51 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).176), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).177), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:43: 269:51 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:54: 269:59 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).114)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).179), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).114)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:54: 269:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:42: 269:60 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).180), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:74: 269:75 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:64: 269:73 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), segments: [PathSegment { ident: processed#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).182), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:64: 269:73 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).183), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:76: 269:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:76: 269:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:63: 269:78 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:42: 269:78 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:12: 269:26 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).165)), segments: [PathSegment { ident: min_code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).170), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:12: 269:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:29: 269:39 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).172), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:29: 269:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).174), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:52: 269:53 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:43: 269:51 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).176), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).177), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:43: 269:51 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:54: 269:59 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).114)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).179), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).114)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:54: 269:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:42: 269:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).180), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:74: 269:75 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:64: 269:73 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), segments: [PathSegment { ident: processed#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).182), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:64: 269:73 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).183), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:76: 269:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:76: 269:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:63: 269:78 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:43: 269:51 (#0), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).176), res: Def(Mod, DefId(1:75 ~ core[7d5a]::u32)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).177), res: Def(Const, DefId(1:17546 ~ core[7d5a]::u32::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:43: 269:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:54: 269:59 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).114)), segments: [PathSegment { ident: delta#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).179), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).114)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:54: 269:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:64: 269:73 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), segments: [PathSegment { ident: processed#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).182), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:64: 269:73 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).183), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:76: 269:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:269:76: 269:77 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).198), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:34: 273:35 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:19: 273:33 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).165)), segments: [PathSegment { ident: min_code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).200), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:19: 273:33 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:36: 273:46 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).202), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:36: 273:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:18: 273:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).203), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:61: 273:62 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:51: 273:60 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), segments: [PathSegment { ident: processed#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).205), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:51: 273:60 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).206), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:63: 273:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:63: 273:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:50: 273:65 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:19: 273:33 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).165)), segments: [PathSegment { ident: min_code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).200), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).165)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:19: 273:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:36: 273:46 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).202), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:36: 273:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:51: 273:60 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), segments: [PathSegment { ident: processed#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).205), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:51: 273:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).206), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:63: 273:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:273:63: 273:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:277:16: 277:17 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).232)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).236), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).232)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:277:16: 277:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).237), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:277:20: 277:30 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).238), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:277:20: 277:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9688 ~ core[7d5a]::option::{impl#0}::ok_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25014 ~ core[7d5a]::num::{impl#8}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).275), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:280:16: 280:17 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).232)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).276), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).232)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:280:16: 280:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).277), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:280:21: 280:31 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), segments: [PathSegment { ident: code_point#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).278), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).110)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:280:21: 280:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).294), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:285:32: 285:33 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).289)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).295), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).289)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:285:32: 285:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).296), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:285:37: 285:41 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).119)), segments: [PathSegment { ident: bias#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).297), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:285:37: 285:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).305), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:31: 287:32 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).289)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).306), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).289)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:31: 287:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).307), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:41: 287:42 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).308), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:36: 287:40 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).119)), segments: [PathSegment { ident: bias#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).309), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:36: 287:40 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).310), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:43: 287:48 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), segments: [PathSegment { ident: T_MAX#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).311), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:43: 287:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:36: 287:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).308), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:36: 287:40 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).119)), segments: [PathSegment { ident: bias#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).309), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:36: 287:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).310), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:43: 287:48 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), segments: [PathSegment { ident: T_MAX#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).311), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:15 ~ idna[18fd]::punycode::T_MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:287:43: 287:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).319), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:290:25: 290:26 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).289)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).320), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).289)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:290:25: 290:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:290:29: 290:33 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).119)), segments: [PathSegment { ident: bias#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).322), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).119)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:290:29: 290:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).328), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:292:24: 292:25 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).329), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:292:24: 292:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).330), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:292:28: 292:29 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).331), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:292:28: 292:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).340), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:33: 295:34 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).341), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:33: 295:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).342), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:46: 295:47 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).343), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:41: 295:42 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).344), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:39: 295:40 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).345), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:39: 295:40 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).346), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:43: 295:44 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).347), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:43: 295:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:38: 295:45 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).348), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:54: 295:55 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).349), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:49: 295:53 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).350), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:49: 295:53 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).351), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:56: 295:57 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).352), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:56: 295:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:48: 295:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:37: 295:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).343), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:41: 295:42 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).344), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:39: 295:40 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).345), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:39: 295:40 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).346), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:43: 295:44 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).347), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:43: 295:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:38: 295:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).348), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:54: 295:55 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).349), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:49: 295:53 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).350), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:49: 295:53 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).351), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:56: 295:57 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).352), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:56: 295:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:48: 295:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).344), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:39: 295:40 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).345), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:39: 295:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).346), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:43: 295:44 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).347), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:43: 295:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).349), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:49: 295:53 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).350), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:49: 295:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).351), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:56: 295:57 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).352), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:295:56: 295:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ idna[18fd]::punycode::value_to_digit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).369), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:28: 297:29 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).370), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:26: 297:27 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).371), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:26: 297:27 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).372), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:30: 297:31 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).373), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:30: 297:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:25: 297:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).374), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:41: 297:42 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).375), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:36: 297:40 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).376), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:36: 297:40 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).377), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:43: 297:44 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).378), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:43: 297:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:35: 297:45 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).370), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:26: 297:27 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).371), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).284)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:26: 297:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).372), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:30: 297:31 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).373), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:30: 297:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).375), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:36: 297:40 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), segments: [PathSegment { ident: BASE#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).376), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:13 ~ idna[18fd]::punycode::BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:36: 297:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).377), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:43: 297:44 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), segments: [PathSegment { ident: t#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).378), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).325)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:297:43: 297:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ idna[18fd]::punycode::value_to_digit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:21 ~ idna[18fd]::punycode::adapt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).407), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:301:37: 301:46 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), segments: [PathSegment { ident: processed#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).408), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:301:37: 301:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).409), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:301:49: 301:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:301:49: 301:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).411), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:301:52: 301:61 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), segments: [PathSegment { ident: processed#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).412), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:301:52: 301:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:301:65: 301:77 (#0), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).11)), segments: [PathSegment { ident: basic_length#0, hir_id: HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).414), res: Local(HirId(DefId(0:48 ~ idna[18fd]::punycode::encode_into).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:301:65: 301:77 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ idna[18fd]::punycode::value_to_digit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).12), kind: Cast(Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:315:20: 315:25 (#0), res: Local(HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).14), res: Local(HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:315:20: 315:25 (#0) }, Ty { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:315:29: 315:31 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).16), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:315:29: 315:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:315:20: 315:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).17), kind: Lit(Spanned { node: Byte(97), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:315:34: 315:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:315:34: 315:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).26), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:33: 316:34 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).27), kind: Cast(Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:21: 316:26 (#0), res: Local(HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).29), res: Local(HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:21: 316:26 (#0) }, Ty { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:30: 316:32 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).31), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:30: 316:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:21: 316:32 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).32), kind: Lit(Spanned { node: Int(Pu128(26), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:35: 316:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:35: 316:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:21: 316:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).33), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:40: 316:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:40: 316:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).27), kind: Cast(Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:21: 316:26 (#0), res: Local(HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).29), res: Local(HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:21: 316:26 (#0) }, Ty { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:30: 316:32 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).31), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:30: 316:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:21: 316:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ idna[18fd]::punycode::value_to_digit).32), kind: Lit(Spanned { node: Int(Pu128(26), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:35: 316:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/punycode.rs:316:35: 316:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ idna[18fd]::uts46::{impl#9}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:66 ~ idna[18fd]::uts46::decode_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).23), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:21: 37:23 (#0) }, Expr { hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:18: 37:20 (#0), res: Local(HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).20)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).25), res: Local(HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:18: 37:20 (#0) }, Expr { hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).26), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:24: 37:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:24: 37:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:17: 37:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:29: 37:31 (#0), res: Local(HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).11)), segments: [PathSegment { ident: lo#0, hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).28), res: Local(HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:29: 37:31 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:18: 37:20 (#0), res: Local(HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).20)), segments: [PathSegment { ident: hi#0, hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).25), res: Local(HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:18: 37:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:66 ~ idna[18fd]::uts46::decode_slice).26), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:24: 37:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:37:24: 37:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:154 ~ idna[18fd]::uts46::{impl#10}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:67 ~ idna[18fd]::uts46::find_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13368 ~ core[7d5a]::slice::{impl#0}::binary_search_by_key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:58:21: 58:24 (#0), res: Local(HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).27)), segments: [PathSegment { ident: idx#0, hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).32), res: Local(HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:58:21: 58:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:58:27: 58:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:58:27: 58:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).49), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:21: 64:22 (#0) }, Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:19: 64:20 (#0), res: Local(HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).45)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).51), res: Local(HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:19: 64:20 (#0) }, Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:23: 64:36 (#0), res: Def(Const, DefId(0:69 ~ idna[18fd]::uts46::find_char::SINGLE_MARKER)), segments: [PathSegment { ident: SINGLE_MARKER#0, hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).53), res: Def(Const, DefId(0:69 ~ idna[18fd]::uts46::find_char::SINGLE_MARKER)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:23: 64:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:18: 64:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).54), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:41: 64:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:41: 64:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:19: 64:20 (#0), res: Local(HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).45)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).51), res: Local(HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:19: 64:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:23: 64:36 (#0), res: Def(Const, DefId(0:69 ~ idna[18fd]::uts46::find_char::SINGLE_MARKER)), segments: [PathSegment { ident: SINGLE_MARKER#0, hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).53), res: Def(Const, DefId(0:69 ~ idna[18fd]::uts46::find_char::SINGLE_MARKER)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:64:23: 64:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).59), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:65:19: 65:32 (#0), res: Def(Const, DefId(0:69 ~ idna[18fd]::uts46::find_char::SINGLE_MARKER)), segments: [PathSegment { ident: SINGLE_MARKER#0, hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).61), res: Def(Const, DefId(0:69 ~ idna[18fd]::uts46::find_char::SINGLE_MARKER)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:65:19: 65:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:65:18: 65:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:65:35: 65:36 (#0), res: Local(HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).45)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).63), res: Local(HirId(DefId(0:67 ~ idna[18fd]::uts46::find_char).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:65:35: 65:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"idna"}), Specific({"idna"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ idna[18fd]::uts46::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:67 ~ idna[18fd]::uts46::find_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:66 ~ idna[18fd]::uts46::decode_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:66 ~ idna[18fd]::uts46::decode_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:66 ~ idna[18fd]::uts46::decode_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:80 ~ idna[18fd]::uts46::passes_bidi)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:201 ~ unicode_bidi[2979]::char_data::bidi_class)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(20:201 ~ unicode_bidi[2979]::char_data::bidi_class)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:201 ~ unicode_bidi[2979]::char_data::bidi_class)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).257), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:209:20: 209:30 (#0), res: Local(HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).254)), segments: [PathSegment { ident: char_class#0, hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).258), res: Local(HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).254)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:209:20: 209:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).259), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:209:34: 209:47 (#0), res: Def(Ctor(Variant, Const), DefId(20:556 ~ unicode_bidi[2979]::char_data::tables::BidiClass::EN::{constructor#0})), segments: [PathSegment { ident: BidiClass#0, hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).260), res: Def(Enum, DefId(20:544 ~ unicode_bidi[2979]::char_data::tables::BidiClass)), args: None, infer_args: true }, PathSegment { ident: EN#0, hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).261), res: Def(Ctor(Variant, Const), DefId(20:556 ~ unicode_bidi[2979]::char_data::tables::BidiClass::EN::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:209:34: 209:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).272), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:211:27: 211:37 (#0), res: Local(HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).254)), segments: [PathSegment { ident: char_class#0, hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).273), res: Local(HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).254)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:211:27: 211:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).274), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:211:41: 211:54 (#0), res: Def(Ctor(Variant, Const), DefId(20:548 ~ unicode_bidi[2979]::char_data::tables::BidiClass::AN::{constructor#0})), segments: [PathSegment { ident: BidiClass#0, hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).275), res: Def(Enum, DefId(20:544 ~ unicode_bidi[2979]::char_data::tables::BidiClass)), args: None, infer_args: true }, PathSegment { ident: AN#0, hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).276), res: Def(Ctor(Variant, Const), DefId(20:548 ~ unicode_bidi[2979]::char_data::tables::BidiClass::AN::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:211:41: 211:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).447), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:258:16: 258:24 (#0), res: Local(HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).237)), segments: [PathSegment { ident: found_an#0, hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).448), res: Local(HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).237)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:258:16: 258:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).449), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:258:28: 258:36 (#0), res: Local(HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).233)), segments: [PathSegment { ident: found_en#0, hir_id: HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).450), res: Local(HirId(DefId(0:80 ~ idna[18fd]::uts46::passes_bidi).233)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:258:28: 258:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ idna[18fd]::uts46::check_validity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).29), kind: Field(Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:8: 291:14 (#0), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).4)), segments: [PathSegment { ident: config#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).31), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:8: 291:14 (#0) }, check_hyphens#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:8: 291:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).32), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:56: 291:58 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).33), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:33: 291:38 (#0), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).2)), segments: [PathSegment { ident: label#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).36), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:33: 291:38 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).37), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:51: 291:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:51: 291:54 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:39: 291:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:33: 291:55 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).38), kind: MethodCall(PathSegment { ident: ends_with#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).39), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:59: 291:64 (#0), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).2)), segments: [PathSegment { ident: label#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).41), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:59: 291:64 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).42), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:75: 291:78 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:75: 291:78 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:65: 291:79 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:59: 291:79 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:32: 291:80 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).33), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:33: 291:38 (#0), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).2)), segments: [PathSegment { ident: label#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).36), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:33: 291:38 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).37), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:51: 291:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:51: 291:54 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:39: 291:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:33: 291:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).38), kind: MethodCall(PathSegment { ident: ends_with#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).39), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:59: 291:64 (#0), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).2)), segments: [PathSegment { ident: label#0, hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).41), res: Local(HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:59: 291:64 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ idna[18fd]::uts46::check_validity).42), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:75: 291:78 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:75: 291:78 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:65: 291:79 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:291:59: 291:79 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(21:67 ~ unicode_normalization[52f6]::lookups::is_combining_mark)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9015 ~ core[7d5a]::iter::traits::iterator::Iterator::any)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:67 ~ idna[18fd]::uts46::find_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ idna[18fd]::uts46::is_simple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:331:12: 331:13 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).37), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:331:12: 331:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).38), kind: Lit(Spanned { node: Char('.'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:331:17: 331:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:331:17: 331:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:332:16: 332:20 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).20)), segments: [PathSegment { ident: prev#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).43), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:332:16: 332:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).44), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:332:24: 332:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:332:24: 332:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).63), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:31: 337:33 (#0) }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:19: 337:30 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), segments: [PathSegment { ident: puny_prefix#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).65), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:19: 337:30 (#0) }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).66), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:34: 337:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:34: 337:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:19: 337:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).67), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:41: 337:43 (#0) }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:39: 337:40 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).69), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:39: 337:40 (#0) }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).70), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:44: 337:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:44: 337:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:39: 337:47 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:19: 337:30 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), segments: [PathSegment { ident: puny_prefix#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).65), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:19: 337:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).66), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:34: 337:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:34: 337:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:39: 337:40 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).69), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:39: 337:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).70), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:44: 337:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:337:44: 337:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:339:19: 339:30 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), segments: [PathSegment { ident: puny_prefix#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).80), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:339:19: 339:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).81), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:339:33: 339:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:339:33: 339:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:16: 340:17 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).86), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:16: 340:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).87), kind: Index(Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).88), kind: Array([Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).89), kind: Lit(Spanned { node: Char('x'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:22: 340:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:22: 340:25 (#0) }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).90), kind: Lit(Spanned { node: Char('n'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:27: 340:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:27: 340:30 (#0) }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).91), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:32: 340:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:32: 340:35 (#0) }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).92), kind: Lit(Spanned { node: Char('-'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:37: 340:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:37: 340:40 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:21: 340:41 (#0) }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:42: 340:53 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), segments: [PathSegment { ident: puny_prefix#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).94), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:42: 340:53 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:41: 340:54 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:340:21: 340:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Array(Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:342:20: 342:31 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), segments: [PathSegment { ident: puny_prefix#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).104), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:342:20: 342:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).105), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:342:35: 342:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:342:35: 342:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).126), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).127), kind: MethodCall(PathSegment { ident: is_ascii_lowercase#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).128), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:13: 349:14 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).130), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:13: 349:14 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:15: 349:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:13: 349:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:12: 349:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).131), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).132), kind: MethodCall(PathSegment { ident: is_ascii_digit#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).133), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:40: 349:41 (#0), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).135), res: Local(HirId(DefId(0:83 ~ idna[18fd]::uts46::is_simple).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:40: 349:41 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:42: 349:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:40: 349:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:349:39: 349:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:5327 ~ core[7d5a]::char::methods::{impl#0}::is_ascii_lowercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5329 ~ core[7d5a]::char::methods::{impl#0}::is_ascii_digit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ idna[18fd]::uts46::processing)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6028 ~ alloc[5873]::string::{impl#0}::clear)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(21:232 ~ unicode_normalization[52f6]::UnicodeNormalization::nfc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ idna[18fd]::uts46::{impl#3}::transitional_processing)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14392 ~ core[7d5a]::str::{impl#0}::strip_prefix)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:26 ~ idna[18fd]::punycode::{impl#0}::decode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ idna[18fd]::uts46::is_bidi_domain)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(21:145 ~ unicode_normalization[52f6]::quick_check::is_nfc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ idna[18fd]::uts46::check_validity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ idna[18fd]::uts46::is_bidi_domain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ idna[18fd]::uts46::check_validity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:80 ~ idna[18fd]::uts46::passes_bidi)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ idna[18fd]::uts46::{impl#11}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:86 ~ idna[18fd]::uts46::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:87 ~ idna[18fd]::uts46::{impl#1}::to_ascii_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ idna[18fd]::uts46::is_simple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ idna[18fd]::uts46::processing)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2184 ~ core[7d5a]::mem::replace)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:5964 ~ alloc[5873]::string::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14407 ~ core[7d5a]::str::{impl#0}::is_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ idna[18fd]::punycode::encode_into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:87 ~ idna[18fd]::uts46::{impl#1}::to_ascii_inner)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).56), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).57), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:16: 489:22 (#0), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), segments: [PathSegment { ident: domain#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).59), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:16: 489:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:23: 489:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:16: 489:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).60), kind: MethodCall(PathSegment { ident: any#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).61), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).62), kind: MethodCall(PathSegment { ident: split#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).63), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:37: 489:43 (#0), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), segments: [PathSegment { ident: domain#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).65), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:37: 489:43 (#0) }, [Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).66), kind: Lit(Spanned { node: Char('.'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:50: 489:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:50: 489:53 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:44: 489:54 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:37: 489:54 (#0) }, [Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).67), kind: Closure(Closure { def_id: DefId(0:89 ~ idna[18fd]::uts46::{impl#1}::to_ascii::{closure#0}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).74), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:60: 489:65 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:66: 489:66 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).70) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:59: 489:66 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:59: 489:66 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:59: 489:83 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:55: 489:84 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:489:37: 489:84 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:9015 ~ core[7d5a]::iter::traits::iterator::Iterator::any)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).87), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:29: 492:30 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).88), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).89), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:16: 492:22 (#0), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), segments: [PathSegment { ident: domain#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).91), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:16: 492:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:23: 492:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:16: 492:28 (#0) }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).92), kind: Lit(Spanned { node: Int(Pu128(253), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:31: 492:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:31: 492:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:16: 492:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).93), kind: MethodCall(PathSegment { ident: any#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).94), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).95), kind: MethodCall(PathSegment { ident: split#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).96), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:38: 492:44 (#0), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), segments: [PathSegment { ident: domain#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).98), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:38: 492:44 (#0) }, [Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).99), kind: Lit(Spanned { node: Char('.'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:51: 492:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:51: 492:54 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:45: 492:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:38: 492:55 (#0) }, [Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).100), kind: Closure(Closure { def_id: DefId(0:90 ~ idna[18fd]::uts46::{impl#1}::to_ascii::{closure#1}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).109), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:61: 492:66 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:67: 492:67 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).103) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:60: 492:67 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:60: 492:67 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:60: 492:84 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:56: 492:85 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:38: 492:85 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).88), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).89), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:16: 492:22 (#0), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), segments: [PathSegment { ident: domain#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).91), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:16: 492:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:23: 492:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:16: 492:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).92), kind: Lit(Spanned { node: Int(Pu128(253), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:31: 492:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:31: 492:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:9015 ~ core[7d5a]::iter::traits::iterator::Iterator::any)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).104), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).105), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:68: 492:73 (#0), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).102)), segments: [PathSegment { ident: label#0, hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).107), res: Local(HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).102)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:68: 492:73 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:74: 492:79 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:68: 492:79 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii).108), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:82: 492:84 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:492:82: 492:84 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"idna"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ idna[18fd]::uts46::{impl#1}::to_unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ idna[18fd]::uts46::is_simple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ idna[18fd]::uts46::processing)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ idna[18fd]::uts46::{impl#12}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ idna[18fd]::uts46::{impl#2}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ idna[18fd]::uts46::{impl#3}::use_std3_ascii_rules)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ idna[18fd]::uts46::{impl#3}::transitional_processing)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ idna[18fd]::uts46::{impl#3}::verify_dns_length)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:98 ~ idna[18fd]::uts46::{impl#3}::check_hyphens)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ idna[18fd]::uts46::{impl#3}::use_idna_2008_rules)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ idna[18fd]::uts46::{impl#3}::to_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5964 ~ alloc[5873]::string::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:86 ~ idna[18fd]::uts46::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:88 ~ idna[18fd]::uts46::{impl#1}::to_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:102 ~ idna[18fd]::uts46::{impl#3}::to_unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:86 ~ idna[18fd]::uts46::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5964 ~ alloc[5873]::string::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ idna[18fd]::uts46::{impl#1}::to_unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ idna[18fd]::uts46::is_bidi_domain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5333 ~ core[7d5a]::char::methods::{impl#0}::is_ascii_graphic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:201 ~ unicode_bidi[2979]::char_data::bidi_class)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:184 ~ idna[18fd]::uts46::{impl#14}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).35), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:644:13: 644:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).36), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:643:13: 643:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).37), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:13: 642:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).38), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:13: 641:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).39), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:13: 640:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).40), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:13: 639:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).41), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:13: 638:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).42), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:13: 637:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 637:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), segments: [PathSegment { ident: invalid_mapping#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).54), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 638:31 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), segments: [PathSegment { ident: nfc#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).56), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 639:19 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), segments: [PathSegment { ident: disallowed_by_std3_ascii_rules#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).58), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 640:46 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), segments: [PathSegment { ident: disallowed_mapped_in_std3#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).60), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 641:41 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:16: 642:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).26)), segments: [PathSegment { ident: disallowed_character#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).62), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:16: 642:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 642:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:643:16: 643:32 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).28)), segments: [PathSegment { ident: too_long_for_dns#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).64), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:643:16: 643:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 643:32 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:644:16: 644:33 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).30)), segments: [PathSegment { ident: too_short_for_dns#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).66), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:644:16: 644:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 644:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:645:16: 645:39 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).32)), segments: [PathSegment { ident: disallowed_in_idna_2008#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).68), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:645:16: 645:39 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).36), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:643:13: 643:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).37), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:13: 642:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).38), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:13: 641:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).39), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:13: 640:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).40), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:13: 639:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).41), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:13: 638:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).42), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:13: 637:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 637:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), segments: [PathSegment { ident: invalid_mapping#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).54), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 638:31 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), segments: [PathSegment { ident: nfc#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).56), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 639:19 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), segments: [PathSegment { ident: disallowed_by_std3_ascii_rules#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).58), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 640:46 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), segments: [PathSegment { ident: disallowed_mapped_in_std3#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).60), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 641:41 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:16: 642:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).26)), segments: [PathSegment { ident: disallowed_character#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).62), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:16: 642:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 642:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:643:16: 643:32 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).28)), segments: [PathSegment { ident: too_long_for_dns#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).64), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:643:16: 643:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 643:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:644:16: 644:33 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).30)), segments: [PathSegment { ident: too_short_for_dns#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).66), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:644:16: 644:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).37), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:13: 642:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).38), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:13: 641:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).39), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:13: 640:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).40), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:13: 639:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).41), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:13: 638:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).42), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:13: 637:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 637:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), segments: [PathSegment { ident: invalid_mapping#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).54), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 638:31 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), segments: [PathSegment { ident: nfc#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).56), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 639:19 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), segments: [PathSegment { ident: disallowed_by_std3_ascii_rules#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).58), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 640:46 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), segments: [PathSegment { ident: disallowed_mapped_in_std3#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).60), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 641:41 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:16: 642:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).26)), segments: [PathSegment { ident: disallowed_character#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).62), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:16: 642:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 642:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:643:16: 643:32 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).28)), segments: [PathSegment { ident: too_long_for_dns#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).64), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:643:16: 643:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).38), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:13: 641:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).39), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:13: 640:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).40), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:13: 639:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).41), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:13: 638:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).42), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:13: 637:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 637:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), segments: [PathSegment { ident: invalid_mapping#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).54), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 638:31 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), segments: [PathSegment { ident: nfc#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).56), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 639:19 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), segments: [PathSegment { ident: disallowed_by_std3_ascii_rules#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).58), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 640:46 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), segments: [PathSegment { ident: disallowed_mapped_in_std3#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).60), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 641:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:16: 642:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).26)), segments: [PathSegment { ident: disallowed_character#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).62), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:642:16: 642:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).39), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:13: 640:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).40), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:13: 639:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).41), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:13: 638:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).42), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:13: 637:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 637:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), segments: [PathSegment { ident: invalid_mapping#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).54), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 638:31 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), segments: [PathSegment { ident: nfc#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).56), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 639:19 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), segments: [PathSegment { ident: disallowed_by_std3_ascii_rules#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).58), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 640:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), segments: [PathSegment { ident: disallowed_mapped_in_std3#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).60), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:641:16: 641:41 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).40), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:13: 639:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).41), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:13: 638:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).42), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:13: 637:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 637:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), segments: [PathSegment { ident: invalid_mapping#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).54), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 638:31 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), segments: [PathSegment { ident: nfc#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).56), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 639:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), segments: [PathSegment { ident: disallowed_by_std3_ascii_rules#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).58), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:640:16: 640:46 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).41), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:13: 638:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).42), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:13: 637:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 637:36 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), segments: [PathSegment { ident: invalid_mapping#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).54), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 638:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), segments: [PathSegment { ident: nfc#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).56), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:639:16: 639:19 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).42), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:13: 637:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 637:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), segments: [PathSegment { ident: invalid_mapping#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).54), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:638:16: 638:31 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).43), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:13: 636:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 636:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), segments: [PathSegment { ident: start_combining_mark#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).52), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:637:16: 637:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).44), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:13: 635:15 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }, Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 635:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), segments: [PathSegment { ident: check_bidi#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).50), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:636:16: 636:26 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), segments: [PathSegment { ident: punycode#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).46), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:634:9: 634:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), segments: [PathSegment { ident: check_hyphens#0, hir_id: HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).48), res: Local(HirId(DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/idna-0.5.0/src/uts46.rs:635:16: 635:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:107 ~ idna[18fd]::uts46::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:109 ~ idna[18fd]::uts46::{impl#6}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ idna[18fd]::uts46::{impl#4}::is_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ idna[18fd]::uts46::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:11137 ~ core[7d5a]::fmt::Debug::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:117 ~ idna[18fd]::domain_to_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ idna[18fd]::uts46::{impl#3}::to_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ idna[18fd]::domain_to_ascii_strict)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ idna[18fd]::uts46::{impl#3}::to_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ idna[18fd]::uts46::{impl#3}::verify_dns_length)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ idna[18fd]::uts46::{impl#3}::use_std3_ascii_rules)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:119 ~ idna[18fd]::domain_to_unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:102 ~ idna[18fd]::uts46::{impl#3}::to_unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3240 ~ core[7d5a]::default::Default::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
