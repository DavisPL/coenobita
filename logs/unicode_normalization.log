[DEBUG] Trying to get func ty of defid DefId(0:265 ~ unicode_normalization[52f6]::decompose::{impl#3}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:275 ~ unicode_normalization[52f6]::decompose::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ unicode_normalization[52f6]::decompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(20:934 ~ tinyvec[a8a1]::tinyvec::{impl#7}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ unicode_normalization[52f6]::decompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8949 ~ core[7d5a]::iter::traits::iterator::Iterator::fuse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:934 ~ tinyvec[a8a1]::tinyvec::{impl#7}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ unicode_normalization[52f6]::decompose::{impl#0}::push_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ unicode_normalization[52f6]::lookups::canonical_combining_class)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ unicode_normalization[52f6]::decompose::{impl#0}::push_back).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:64:12: 64:17 (#0), res: Local(HirId(DefId(0:41 ~ unicode_normalization[52f6]::decompose::{impl#0}::push_back).14)), segments: [PathSegment { ident: class#0, hir_id: HirId(DefId(0:41 ~ unicode_normalization[52f6]::decompose::{impl#0}::push_back).18), res: Local(HirId(DefId(0:41 ~ unicode_normalization[52f6]::decompose::{impl#0}::push_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:64:12: 64:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ unicode_normalization[52f6]::decompose::{impl#0}::push_back).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:64:21: 64:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:64:21: 64:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ unicode_normalization[52f6]::decompose::{impl#0}::sort_pending)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(20:935 ~ tinyvec[a8a1]::tinyvec::{impl#7}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(20:1135 ~ tinyvec[a8a1]::tinyvec::{impl#7}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(20:935 ~ tinyvec[a8a1]::tinyvec::{impl#7}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ unicode_normalization[52f6]::decompose::{impl#0}::sort_pending)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5726 ~ alloc[5873]::slice::{impl#0}::sort_by_key)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).5), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).7), kind: Field(Expr { hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:23: 84:27 (#0), res: Local(HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).9), res: Local(HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:23: 84:27 (#0) }, buffer#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:23: 84:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:35: 84:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:23: 84:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).10), kind: Field(Expr { hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).11), kind: Field(Expr { hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:43: 84:47 (#0), res: Local(HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).13), res: Local(HirId(DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:43: 84:47 (#0) }, ready#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:43: 84:53 (#0) }, end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:84:43: 84:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(20:1135 ~ tinyvec[a8a1]::tinyvec::{impl#7}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:1137 ~ tinyvec[a8a1]::tinyvec::{impl#7}::truncate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).5), kind: Field(Expr { hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).6), kind: Field(Expr { hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:94:20: 94:24 (#0), res: Local(HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).8), res: Local(HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:94:20: 94:24 (#0) }, ready#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:94:20: 94:30 (#0) }, start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:94:20: 94:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).9), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:94:39: 94:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:94:39: 94:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:95:12: 95:16 (#0), res: Local(HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).11)), segments: [PathSegment { ident: next#0, hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).15), res: Local(HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:95:12: 95:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).16), kind: Field(Expr { hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).17), kind: Field(Expr { hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:95:20: 95:24 (#0), res: Local(HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).19), res: Local(HirId(DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:95:20: 95:24 (#0) }, ready#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:95:20: 95:30 (#0) }, end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:95:20: 95:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ unicode_normalization[52f6]::decompose::{impl#0}::reset_buffer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ unicode_normalization[52f6]::decompose::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:49 ~ unicode_normalization[52f6]::decompose::{impl#1}::next).5), kind: Field(Expr { hir_id: HirId(DefId(0:49 ~ unicode_normalization[52f6]::decompose::{impl#1}::next).6), kind: Field(Expr { hir_id: HirId(DefId(0:49 ~ unicode_normalization[52f6]::decompose::{impl#1}::next).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:108:15: 108:19 (#0), res: Local(HirId(DefId(0:49 ~ unicode_normalization[52f6]::decompose::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:49 ~ unicode_normalization[52f6]::decompose::{impl#1}::next).8), res: Local(HirId(DefId(0:49 ~ unicode_normalization[52f6]::decompose::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:108:15: 108:19 (#0) }, ready#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:108:15: 108:25 (#0) }, end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:108:15: 108:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:49 ~ unicode_normalization[52f6]::decompose::{impl#1}::next).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:108:33: 108:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/decompose.rs:108:33: 108:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:86 ~ unicode_normalization[52f6]::normalize::decompose_canonical)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ unicode_normalization[52f6]::decompose::{impl#0}::push_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:88 ~ unicode_normalization[52f6]::normalize::decompose_compatible)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ unicode_normalization[52f6]::decompose::{impl#0}::push_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:933 ~ tinyvec[a8a1]::tinyvec::{impl#7}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ unicode_normalization[52f6]::decompose::{impl#0}::sort_pending)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:1135 ~ tinyvec[a8a1]::tinyvec::{impl#7}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ unicode_normalization[52f6]::decompose::{impl#0}::increment_next_ready)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ unicode_normalization[52f6]::decompose::{impl#1}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ unicode_normalization[52f6]::decompose::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11084 ~ core[7d5a]::fmt::Write::write_char)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ unicode_normalization[52f6]::lookups::canonical_combining_class)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ unicode_normalization[52f6]::lookups::u8_lookup_fk)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ unicode_normalization[52f6]::lookups::u8_lookup_fv)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).7), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:11: 31:12 (#0) }, Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:8: 31:10 (#0), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).2)), segments: [PathSegment { ident: c1#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).9), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:8: 31:10 (#0) }, Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).10), kind: Lit(Spanned { node: Char('𐀀'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:13: 31:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:13: 31:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:8: 31:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).11), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:31: 31:32 (#0) }, Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:28: 31:30 (#0), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).4)), segments: [PathSegment { ident: c2#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).13), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:28: 31:30 (#0) }, Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).14), kind: Lit(Spanned { node: Char('𐀀'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:33: 31:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:33: 31:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:28: 31:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:8: 31:10 (#0), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).2)), segments: [PathSegment { ident: c1#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).9), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:8: 31:10 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).10), kind: Lit(Spanned { node: Char('𐀀'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:13: 31:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:13: 31:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:28: 31:30 (#0), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).4)), segments: [PathSegment { ident: c2#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).13), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:28: 31:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).14), kind: Lit(Spanned { node: Char('𐀀'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:33: 31:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:31:33: 31:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).20), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:25: 33:27 (#0) }, Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).21), kind: Cast(Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:14: 33:16 (#0), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).2)), segments: [PathSegment { ident: c1#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).23), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:14: 33:16 (#0) }, Ty { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:20: 33:23 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).25), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:20: 33:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:13: 33:24 (#0) }, Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).26), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:28: 33:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:28: 33:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:13: 33:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).27), kind: Cast(Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:34: 33:36 (#0), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).4)), segments: [PathSegment { ident: c2#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).29), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:34: 33:36 (#0) }, Ty { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:40: 33:43 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).31), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:40: 33:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:33: 33:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).21), kind: Cast(Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:14: 33:16 (#0), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).2)), segments: [PathSegment { ident: c1#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).23), res: Local(HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:14: 33:16 (#0) }, Ty { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:20: 33:23 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).25), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:20: 33:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:13: 33:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table).26), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:28: 33:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:33:28: 33:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ unicode_normalization[52f6]::lookups::pair_lookup_fk)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ unicode_normalization[52f6]::lookups::pair_lookup_fv_opt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ unicode_normalization[52f6]::tables::composition_table_astral)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ unicode_normalization[52f6]::lookups::canonical_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ unicode_normalization[52f6]::lookups::pair_lookup_fk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ unicode_normalization[52f6]::lookups::pair_lookup_fv_opt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ unicode_normalization[52f6]::lookups::compatibility_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ unicode_normalization[52f6]::lookups::pair_lookup_fk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ unicode_normalization[52f6]::lookups::pair_lookup_fv_opt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:65 ~ unicode_normalization[52f6]::lookups::cjk_compat_variants_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ unicode_normalization[52f6]::lookups::pair_lookup_fk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ unicode_normalization[52f6]::lookups::pair_lookup_fv_opt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:67 ~ unicode_normalization[52f6]::lookups::is_combining_mark)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ unicode_normalization[52f6]::lookups::bool_lookup_fk)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ unicode_normalization[52f6]::lookups::bool_lookup_fv)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:68 ~ unicode_normalization[52f6]::lookups::stream_safe_trailing_nonstarters)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ unicode_normalization[52f6]::lookups::u8_lookup_fk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ unicode_normalization[52f6]::lookups::u8_lookup_fv)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ unicode_normalization[52f6]::lookups::u8_lookup_fk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:69 ~ unicode_normalization[52f6]::lookups::u8_lookup_fk).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:107:5: 107:7 (#0), res: Local(HirId(DefId(0:69 ~ unicode_normalization[52f6]::lookups::u8_lookup_fk).2)), segments: [PathSegment { ident: kv#0, hir_id: HirId(DefId(0:69 ~ unicode_normalization[52f6]::lookups::u8_lookup_fk).5), res: Local(HirId(DefId(0:69 ~ unicode_normalization[52f6]::lookups::u8_lookup_fk).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:107:5: 107:7 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:69 ~ unicode_normalization[52f6]::lookups::u8_lookup_fk).6), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:107:11: 107:12 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:107:11: 107:12 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:70 ~ unicode_normalization[52f6]::lookups::u8_lookup_fv)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:70 ~ unicode_normalization[52f6]::lookups::u8_lookup_fv).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:113:6: 113:8 (#0), res: Local(HirId(DefId(0:70 ~ unicode_normalization[52f6]::lookups::u8_lookup_fv).2)), segments: [PathSegment { ident: kv#0, hir_id: HirId(DefId(0:70 ~ unicode_normalization[52f6]::lookups::u8_lookup_fv).6), res: Local(HirId(DefId(0:70 ~ unicode_normalization[52f6]::lookups::u8_lookup_fv).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:113:6: 113:8 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:70 ~ unicode_normalization[52f6]::lookups::u8_lookup_fv).7), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:113:11: 113:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/lookups.rs:113:11: 113:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ unicode_normalization[52f6]::lookups::bool_lookup_fk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:72 ~ unicode_normalization[52f6]::lookups::bool_lookup_fv)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ unicode_normalization[52f6]::lookups::pair_lookup_fk)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ unicode_normalization[52f6]::lookups::pair_lookup_fv_opt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:86 ~ unicode_normalization[52f6]::normalize::decompose_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ unicode_normalization[52f6]::lookups::canonical_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:88 ~ unicode_normalization[52f6]::normalize::decompose_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ unicode_normalization[52f6]::lookups::compatibility_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ unicode_normalization[52f6]::lookups::canonical_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:55:8: 55:9 (#0), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).8), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:55:8: 55:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).9), kind: Lit(Spanned { node: Char('\u{7f}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:55:13: 55:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:55:13: 55:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:56:9: 56:18 (#0), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).13), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:56:9: 56:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:65 ~ unicode_normalization[52f6]::lookups::cjk_compat_variants_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:64:13: 64:22 (#0), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).44), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:64:13: 64:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:70:5: 70:14 (#0), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).73), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:70:5: 70:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:56:9: 56:18 (#0), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).13), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:56:9: 56:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:64:13: 64:22 (#0), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).44), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:64:13: 64:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:70:5: 70:14 (#0), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).73), res: Local(HirId(DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:70:5: 70:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:80:8: 80:9 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).10), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:80:8: 80:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).11), kind: Lit(Spanned { node: Char('\u{7f}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:80:13: 80:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:80:13: 80:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:81:9: 81:18 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).15), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:81:9: 81:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:91:31: 91:45 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).4)), segments: [PathSegment { ident: decompose_char#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).51), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:91:31: 91:45 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:93:13: 93:22 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).66), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:93:13: 93:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:99:5: 99:14 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).95), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:99:5: 99:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:81:9: 81:18 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).15), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:81:9: 81:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:91:31: 91:45 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).4)), segments: [PathSegment { ident: decompose_char#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).51), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:91:31: 91:45 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:93:13: 93:22 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).66), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:93:13: 93:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:99:5: 99:14 (#0), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).95), res: Local(HirId(DefId(0:94 ~ unicode_normalization[52f6]::normalize::decompose).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:99:5: 99:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ unicode_normalization[52f6]::normalize::compose)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ unicode_normalization[52f6]::lookups::composition_table)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).4), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:16: 131:18 (#0) }, Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).5), kind: Cast(Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:6: 131:7 (#0), res: Local(HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).7), res: Local(HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:6: 131:7 (#0) }, Ty { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:11: 131:14 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).9), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:11: 131:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:5: 131:15 (#0) }, Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:19: 131:25 (#0), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), segments: [PathSegment { ident: S_BASE#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).11), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:19: 131:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:5: 131:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).12), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:40: 131:41 (#0) }, Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).13), kind: Cast(Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:30: 131:31 (#0), res: Local(HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).15), res: Local(HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:30: 131:31 (#0) }, Ty { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:35: 131:38 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).17), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:35: 131:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:29: 131:39 (#0) }, Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).18), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:50: 131:51 (#0) }, Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:43: 131:49 (#0), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), segments: [PathSegment { ident: S_BASE#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).20), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:43: 131:49 (#0) }, Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:52: 131:59 (#0), res: Def(Const, DefId(0:107 ~ unicode_normalization[52f6]::normalize::S_COUNT)), segments: [PathSegment { ident: S_COUNT#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).22), res: Def(Const, DefId(0:107 ~ unicode_normalization[52f6]::normalize::S_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:52: 131:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:42: 131:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:29: 131:60 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).5), kind: Cast(Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:6: 131:7 (#0), res: Local(HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).7), res: Local(HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:6: 131:7 (#0) }, Ty { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:11: 131:14 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).9), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:11: 131:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:5: 131:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:19: 131:25 (#0), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), segments: [PathSegment { ident: S_BASE#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).11), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:19: 131:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).13), kind: Cast(Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:30: 131:31 (#0), res: Local(HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).15), res: Local(HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:30: 131:31 (#0) }, Ty { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:35: 131:38 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).17), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:35: 131:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:29: 131:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).18), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:50: 131:51 (#0) }, Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:43: 131:49 (#0), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), segments: [PathSegment { ident: S_BASE#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).20), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:43: 131:49 (#0) }, Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:52: 131:59 (#0), res: Def(Const, DefId(0:107 ~ unicode_normalization[52f6]::normalize::S_COUNT)), segments: [PathSegment { ident: S_COUNT#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).22), res: Def(Const, DefId(0:107 ~ unicode_normalization[52f6]::normalize::S_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:52: 131:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:42: 131:60 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:43: 131:49 (#0), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), segments: [PathSegment { ident: S_BASE#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).20), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:43: 131:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:52: 131:59 (#0), res: Def(Const, DefId(0:107 ~ unicode_normalization[52f6]::normalize::S_COUNT)), segments: [PathSegment { ident: S_COUNT#0, hir_id: HirId(DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable).22), res: Def(Const, DefId(0:107 ~ unicode_normalization[52f6]::normalize::S_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:131:52: 131:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).7), kind: Cast(Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:141:19: 141:20 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).9), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:141:19: 141:20 (#0) }, Ty { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:141:24: 141:27 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).11), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:141:24: 141:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:141:19: 141:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:141:30: 141:36 (#0), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), segments: [PathSegment { ident: S_BASE#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).13), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:141:30: 141:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:142:19: 142:26 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).15)), segments: [PathSegment { ident: s_index#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).19), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:142:19: 142:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:142:29: 142:36 (#0), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), segments: [PathSegment { ident: N_COUNT#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).21), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:142:29: 142:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:144:9: 144:18 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).27), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:144:9: 144:18 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).40), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:32: 146:33 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:24: 146:31 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).15)), segments: [PathSegment { ident: s_index#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).42), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:24: 146:31 (#0) }, Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:34: 146:41 (#0), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), segments: [PathSegment { ident: N_COUNT#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).44), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:34: 146:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:23: 146:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:45: 146:52 (#0), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), segments: [PathSegment { ident: T_COUNT#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).46), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:45: 146:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:24: 146:31 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).15)), segments: [PathSegment { ident: s_index#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).42), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:24: 146:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:34: 146:41 (#0), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), segments: [PathSegment { ident: N_COUNT#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).44), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:146:34: 146:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:147:9: 147:18 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).51), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:147:9: 147:18 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:149:23: 149:30 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).15)), segments: [PathSegment { ident: s_index#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).65), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:149:23: 149:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:149:33: 149:40 (#0), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), segments: [PathSegment { ident: T_COUNT#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).67), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:149:33: 149:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:150:12: 150:19 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).69)), segments: [PathSegment { ident: t_index#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).73), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:150:12: 150:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).74), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:150:22: 150:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:150:22: 150:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:151:13: 151:22 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).78), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:151:13: 151:22 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:144:9: 144:18 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).27), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:144:9: 144:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:147:9: 147:18 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).51), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:147:9: 147:18 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:151:13: 151:22 (#0), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), segments: [PathSegment { ident: emit_char#0, hir_id: HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).78), res: Local(HirId(DefId(0:114 ~ unicode_normalization[52f6]::normalize::decompose_hangul).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:151:13: 151:22 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).5), kind: Cast(Expr { hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:158:14: 158:15 (#0), res: Local(HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).7), res: Local(HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:158:14: 158:15 (#0) }, Ty { hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:158:19: 158:22 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).9), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:158:19: 158:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:158:14: 158:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:158:25: 158:31 (#0), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), segments: [PathSegment { ident: S_BASE#0, hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).11), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:158:25: 158:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:159:14: 159:16 (#0), res: Local(HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).13)), segments: [PathSegment { ident: si#0, hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).17), res: Local(HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:159:14: 159:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:159:19: 159:26 (#0), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), segments: [PathSegment { ident: T_COUNT#0, hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).19), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:159:19: 159:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:160:8: 160:10 (#0), res: Local(HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).21)), segments: [PathSegment { ident: ti#0, hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).25), res: Local(HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:160:8: 160:10 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:160:13: 160:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:160:13: 160:14 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:176:27: 176:28 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).18)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).43), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:176:27: 176:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:176:31: 176:37 (#0), res: Def(Const, DefId(0:100 ~ unicode_normalization[52f6]::normalize::L_BASE)), segments: [PathSegment { ident: L_BASE#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).45), res: Def(Const, DefId(0:100 ~ unicode_normalization[52f6]::normalize::L_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:176:31: 176:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:177:27: 177:28 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).19)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).51), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:177:27: 177:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:177:31: 177:37 (#0), res: Def(Const, DefId(0:101 ~ unicode_normalization[52f6]::normalize::V_BASE)), segments: [PathSegment { ident: V_BASE#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).53), res: Def(Const, DefId(0:101 ~ unicode_normalization[52f6]::normalize::V_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:177:31: 177:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).58), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:36: 178:37 (#0) }, Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:28: 178:35 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).47)), segments: [PathSegment { ident: l_index#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).60), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:28: 178:35 (#0) }, Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:38: 178:45 (#0), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), segments: [PathSegment { ident: N_COUNT#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).62), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:38: 178:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:28: 178:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).63), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:56: 178:57 (#0) }, Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:48: 178:55 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).55)), segments: [PathSegment { ident: v_index#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).65), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:48: 178:55 (#0) }, Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:58: 178:65 (#0), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), segments: [PathSegment { ident: T_COUNT#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).67), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:58: 178:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:48: 178:65 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:28: 178:35 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).47)), segments: [PathSegment { ident: l_index#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).60), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:28: 178:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:38: 178:45 (#0), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), segments: [PathSegment { ident: N_COUNT#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).62), res: Def(Const, DefId(0:106 ~ unicode_normalization[52f6]::normalize::N_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:38: 178:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:48: 178:55 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).55)), segments: [PathSegment { ident: v_index#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).65), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:48: 178:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:58: 178:65 (#0), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), segments: [PathSegment { ident: T_COUNT#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).67), res: Def(Const, DefId(0:105 ~ unicode_normalization[52f6]::normalize::T_COUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:178:58: 178:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:179:21: 179:27 (#0), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), segments: [PathSegment { ident: S_BASE#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).73), res: Def(Const, DefId(0:99 ~ unicode_normalization[52f6]::normalize::S_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:179:21: 179:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:179:30: 179:38 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).69)), segments: [PathSegment { ident: lv_index#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).75), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:179:30: 179:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:5375 ~ core[7d5a]::char::from_u32_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:5375 ~ core[7d5a]::char::from_u32_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:52: 184:53 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).18)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).123), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:52: 184:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).124), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:59: 184:60 (#0) }, Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:57: 184:58 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).19)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).126), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:57: 184:58 (#0) }, Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:61: 184:67 (#0), res: Def(Const, DefId(0:102 ~ unicode_normalization[52f6]::normalize::T_BASE)), segments: [PathSegment { ident: T_BASE#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).128), res: Def(Const, DefId(0:102 ~ unicode_normalization[52f6]::normalize::T_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:61: 184:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:56: 184:68 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:57: 184:58 (#0), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).19)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).126), res: Local(HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:57: 184:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:61: 184:67 (#0), res: Def(Const, DefId(0:102 ~ unicode_normalization[52f6]::normalize::T_BASE)), segments: [PathSegment { ident: T_BASE#0, hir_id: HirId(DefId(0:117 ~ unicode_normalization[52f6]::normalize::compose_hangul).128), res: Def(Const, DefId(0:102 ~ unicode_normalization[52f6]::normalize::T_BASE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/normalize.rs:184:61: 184:67 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:18:13: 18:14 (#0), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).18)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).22), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:18:13: 18:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).23), kind: MethodCall(PathSegment { ident: wrapping_mul#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).24), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:18:17: 18:20 (#0), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).2)), segments: [PathSegment { ident: key#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).26), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:18:17: 18:20 (#0) }, [Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).27), kind: Lit(Spanned { node: Int(Pu128(826366246), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:18:34: 18:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:18:34: 18:44 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:18:21: 18:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:18:17: 18:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).32), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:18: 19:19 (#0) }, Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).33), kind: Cast(Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:8: 19:9 (#0), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).29)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).35), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:8: 19:9 (#0) }, Ty { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:13: 19:16 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).37), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:13: 19:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:7: 19:17 (#0) }, Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).38), kind: Cast(Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:21: 19:22 (#0), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).6)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).40), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:21: 19:22 (#0) }, Ty { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:26: 19:29 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).42), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:26: 19:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:20: 19:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:6: 19:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).43), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:35: 19:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:35: 19:37 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).33), kind: Cast(Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:8: 19:9 (#0), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).29)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).35), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:8: 19:9 (#0) }, Ty { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:13: 19:16 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).37), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:13: 19:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:7: 19:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).38), kind: Cast(Expr { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:21: 19:22 (#0), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).6)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).40), res: Local(HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:21: 19:22 (#0) }, Ty { hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:26: 19:29 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:119 ~ unicode_normalization[52f6]::perfect_hash::my_hash).42), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:26: 19:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:19:20: 19:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:8: 45:9 (#0), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).52), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:8: 45:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).53), kind: Call(Expr { hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:13: 45:15 (#0), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).8)), segments: [PathSegment { ident: fk#0, hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).55), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:13: 45:15 (#0) }, [Expr { hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:16: 45:23 (#0), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).48)), segments: [PathSegment { ident: key_val#0, hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).57), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).48)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:16: 45:23 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:13: 45:24 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:13: 45:15 (#0), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).8)), segments: [PathSegment { ident: fk#0, hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).55), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:13: 45:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:46:9: 46:11 (#0), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).10)), segments: [PathSegment { ident: fv#0, hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).61), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:46:9: 46:11 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:13: 45:15 (#0), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).8)), segments: [PathSegment { ident: fk#0, hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).55), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:45:13: 45:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:46:9: 46:11 (#0), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).10)), segments: [PathSegment { ident: fv#0, hir_id: HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).61), res: Local(HirId(DefId(0:120 ~ unicode_normalization[52f6]::perfect_hash::mph_lookup).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/perfect_hash.rs:46:9: 46:11 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:284 ~ unicode_normalization[52f6]::quick_check::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:286 ~ unicode_normalization[52f6]::quick_check::{impl#1}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:9:21: 9:30 (#10), res: Local(HirId(DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq).14)), segments: [PathSegment { ident: __self_discr#10, hir_id: HirId(DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq).27), res: Local(HirId(DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:9:21: 9:30 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:9:21: 9:30 (#10), res: Local(HirId(DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq).24)), segments: [PathSegment { ident: __arg1_discr#10, hir_id: HirId(DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq).29), res: Local(HirId(DefId(0:289 ~ unicode_normalization[52f6]::quick_check::{impl#3}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:9:21: 9:30 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:31:12: 31:14 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).23)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).33), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:31:12: 31:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).34), kind: Lit(Spanned { node: Char('\u{7f}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:31:18: 31:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:31:18: 31:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ unicode_normalization[52f6]::lookups::canonical_combining_class)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).61), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:20: 39:21 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:12: 39:19 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).10)), segments: [PathSegment { ident: last_cc#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).63), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:12: 39:19 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:22: 39:24 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).58)), segments: [PathSegment { ident: cc#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).65), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:22: 39:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:12: 39:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).66), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:31: 39:33 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:28: 39:30 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).58)), segments: [PathSegment { ident: cc#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).68), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:28: 39:30 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).69), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:34: 39:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:34: 39:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:28: 39:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:12: 39:19 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).10)), segments: [PathSegment { ident: last_cc#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).63), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:12: 39:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:22: 39:24 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).58)), segments: [PathSegment { ident: cc#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).65), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:22: 39:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:28: 39:30 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).58)), segments: [PathSegment { ident: cc#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).68), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:28: 39:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).69), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:34: 39:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:39:34: 39:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:42:15: 42:25 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).4)), segments: [PathSegment { ident: is_allowed#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).82), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:42:15: 42:25 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).127), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:33: 54:34 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:16: 54:32 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).14)), segments: [PathSegment { ident: nonstarter_count#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).129), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:16: 54:32 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).130), kind: Field(Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).131), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:35: 54:41 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).124)), segments: [PathSegment { ident: decomp#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).132), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:35: 54:41 (#0) }, leading_nonstarters#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:35: 54:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:16: 54:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:64: 54:92 (#0), res: Def(Const, DefId(0:196 ~ unicode_normalization[52f6]::stream_safe::MAX_NONSTARTERS)), segments: [PathSegment { ident: stream_safe#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).134), res: Def(Mod, DefId(0:186 ~ unicode_normalization[52f6]::stream_safe)), args: None, infer_args: true }, PathSegment { ident: MAX_NONSTARTERS#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).135), res: Def(Const, DefId(0:196 ~ unicode_normalization[52f6]::stream_safe::MAX_NONSTARTERS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:64: 54:92 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:16: 54:32 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).14)), segments: [PathSegment { ident: nonstarter_count#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).129), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:16: 54:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).130), kind: Field(Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).131), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:35: 54:41 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).124)), segments: [PathSegment { ident: decomp#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).132), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:35: 54:41 (#0) }, leading_nonstarters#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:54:35: 54:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).147), kind: Field(Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:57:16: 57:22 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).124)), segments: [PathSegment { ident: decomp#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).149), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:57:16: 57:22 (#0) }, leading_nonstarters#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:57:16: 57:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).150), kind: Field(Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:57:46: 57:52 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).124)), segments: [PathSegment { ident: decomp#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).152), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).124)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:57:46: 57:52 (#0) }, decomposition_len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:57:46: 57:70 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:42:15: 42:25 (#0), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).4)), segments: [PathSegment { ident: is_allowed#0, hir_id: HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).82), res: Local(HirId(DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/quick_check.rs:42:15: 42:25 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ unicode_normalization[52f6]::quick_check::is_nfc_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:346 ~ unicode_normalization[52f6]::tables::qc_nfc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ unicode_normalization[52f6]::quick_check::is_nfkc_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:347 ~ unicode_normalization[52f6]::tables::qc_nfkc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ unicode_normalization[52f6]::quick_check::is_nfd_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:348 ~ unicode_normalization[52f6]::tables::qc_nfd)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ unicode_normalization[52f6]::quick_check::is_nfkd_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:349 ~ unicode_normalization[52f6]::tables::qc_nfkd)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ unicode_normalization[52f6]::quick_check::is_nfc_stream_safe_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:346 ~ unicode_normalization[52f6]::tables::qc_nfc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ unicode_normalization[52f6]::quick_check::is_nfd_stream_safe_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ unicode_normalization[52f6]::quick_check::quick_check)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:348 ~ unicode_normalization[52f6]::tables::qc_nfd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:145 ~ unicode_normalization[52f6]::quick_check::is_nfc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ unicode_normalization[52f6]::quick_check::is_nfc_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9146 ~ core[7d5a]::iter::traits::iterator::Iterator::eq)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:232 ~ unicode_normalization[52f6]::UnicodeNormalization::nfc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:146 ~ unicode_normalization[52f6]::quick_check::is_nfkc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ unicode_normalization[52f6]::quick_check::is_nfkc_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9146 ~ core[7d5a]::iter::traits::iterator::Iterator::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ unicode_normalization[52f6]::UnicodeNormalization::nfkc)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ unicode_normalization[52f6]::quick_check::is_nfd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ unicode_normalization[52f6]::quick_check::is_nfd_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9146 ~ core[7d5a]::iter::traits::iterator::Iterator::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:230 ~ unicode_normalization[52f6]::UnicodeNormalization::nfd)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:148 ~ unicode_normalization[52f6]::quick_check::is_nfkd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ unicode_normalization[52f6]::quick_check::is_nfkd_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9146 ~ core[7d5a]::iter::traits::iterator::Iterator::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ unicode_normalization[52f6]::UnicodeNormalization::nfkd)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ unicode_normalization[52f6]::quick_check::is_nfc_stream_safe)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:141 ~ unicode_normalization[52f6]::quick_check::is_nfc_stream_safe_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9146 ~ core[7d5a]::iter::traits::iterator::Iterator::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:232 ~ unicode_normalization[52f6]::UnicodeNormalization::nfc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:235 ~ unicode_normalization[52f6]::UnicodeNormalization::stream_safe)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ unicode_normalization[52f6]::quick_check::is_nfd_stream_safe)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ unicode_normalization[52f6]::quick_check::is_nfd_stream_safe_quick)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9146 ~ core[7d5a]::iter::traits::iterator::Iterator::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:230 ~ unicode_normalization[52f6]::UnicodeNormalization::nfd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:235 ~ unicode_normalization[52f6]::UnicodeNormalization::stream_safe)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:300 ~ unicode_normalization[52f6]::recompose::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:311 ~ unicode_normalization[52f6]::recompose::{impl#3}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ unicode_normalization[52f6]::recompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ unicode_normalization[52f6]::decompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:934 ~ tinyvec[a8a1]::tinyvec::{impl#7}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ unicode_normalization[52f6]::recompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ unicode_normalization[52f6]::decompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:934 ~ tinyvec[a8a1]::tinyvec::{impl#7}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ unicode_normalization[52f6]::lookups::canonical_combining_class)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:68:36: 68:44 (#0), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).34)), segments: [PathSegment { ident: ch_class#0, hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).47), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:68:36: 68:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).48), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:68:48: 68:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:68:48: 68:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ unicode_normalization[52f6]::normalize::compose)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:83:40: 83:48 (#0), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).34)), segments: [PathSegment { ident: ch_class#0, hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).123), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:83:40: 83:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).124), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:83:52: 83:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:83:52: 83:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:935 ~ tinyvec[a8a1]::tinyvec::{impl#7}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).172), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:92:36: 92:43 (#0), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).166)), segments: [PathSegment { ident: l_class#0, hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).173), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).166)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:92:36: 92:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).174), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:92:47: 92:55 (#0), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).34)), segments: [PathSegment { ident: ch_class#0, hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).175), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:92:47: 92:55 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:94:40: 94:48 (#0), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).34)), segments: [PathSegment { ident: ch_class#0, hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).180), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).34)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:94:40: 94:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).181), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:94:52: 94:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:94:52: 94:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:935 ~ tinyvec[a8a1]::tinyvec::{impl#7}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ unicode_normalization[52f6]::normalize::compose)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:935 ~ tinyvec[a8a1]::tinyvec::{impl#7}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9730 ~ core[7d5a]::option::{impl#2}::cloned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(20:925 ~ tinyvec[a8a1]::tinyvec::{impl#7}::clear)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).381), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:128:46: 128:50 (#0), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).339)), segments: [PathSegment { ident: next#0, hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).382), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).339)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:128:46: 128:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).383), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:128:53: 128:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:128:53: 128:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9730 ~ core[7d5a]::option::{impl#2}::cloned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:925 ~ tinyvec[a8a1]::tinyvec::{impl#7}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).433), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:138:47: 138:51 (#0), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).391)), segments: [PathSegment { ident: next#0, hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).434), res: Local(HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).391)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:138:47: 138:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:164 ~ unicode_normalization[52f6]::recompose::{impl#0}::next).435), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:138:54: 138:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/recompose.rs:138:54: 138:55 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ unicode_normalization[52f6]::recompose::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11084 ~ core[7d5a]::fmt::Write::write_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:318 ~ unicode_normalization[52f6]::replace::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:174 ~ unicode_normalization[52f6]::replace::new_cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:179 ~ unicode_normalization[52f6]::replace::{impl#0}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:438 ~ tinyvec[a8a1]::arrayvec::{impl#7}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ unicode_normalization[52f6]::normalize::decompose_cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:440 ~ tinyvec[a8a1]::arrayvec::{impl#7}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9729 ~ core[7d5a]::option::{impl#2}::copied)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:182 ~ unicode_normalization[52f6]::replace::{impl#0}::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8894 ~ core[7d5a]::iter::traits::iterator::Iterator::size_hint)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:185 ~ unicode_normalization[52f6]::replace::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11084 ~ core[7d5a]::fmt::Write::write_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ unicode_normalization[52f6]::stream_safe::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).42), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:34: 40:35 (#0) }, Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).43), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:12: 40:16 (#0), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).45), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:12: 40:16 (#0) }, nonstarter_count#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:12: 40:33 (#0) }, Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).46), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:36: 40:37 (#0), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).39)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).48), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:36: 40:37 (#0) }, leading_nonstarters#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:36: 40:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:12: 40:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:60: 40:75 (#0), res: Def(Const, DefId(0:196 ~ unicode_normalization[52f6]::stream_safe::MAX_NONSTARTERS)), segments: [PathSegment { ident: MAX_NONSTARTERS#0, hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).50), res: Def(Const, DefId(0:196 ~ unicode_normalization[52f6]::stream_safe::MAX_NONSTARTERS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:60: 40:75 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).43), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:12: 40:16 (#0), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).45), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:12: 40:16 (#0) }, nonstarter_count#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:12: 40:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).46), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:36: 40:37 (#0), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).39)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).48), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:36: 40:37 (#0) }, leading_nonstarters#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:40:36: 40:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).80), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:51:12: 51:13 (#0), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).39)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).82), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:51:12: 51:13 (#0) }, leading_nonstarters#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:51:12: 51:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).83), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:51:37: 51:38 (#0), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).39)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).85), res: Local(HirId(DefId(0:209 ~ unicode_normalization[52f6]::stream_safe::{impl#1}::next).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:51:37: 51:38 (#0) }, decomposition_len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:51:37: 51:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:324 ~ unicode_normalization[52f6]::stream_safe::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:72:8: 72:9 (#0), res: Local(HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).6), res: Local(HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:72:8: 72:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).7), kind: Lit(Spanned { node: Char('\u{7f}'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:72:13: 72:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:72:13: 72:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Specific({"unicode_normalization"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ unicode_normalization[52f6]::normalize::is_hangul_syllable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:116 ~ unicode_normalization[52f6]::normalize::hangul_decomposition_length)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ unicode_normalization[52f6]::lookups::compatibility_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:61 ~ unicode_normalization[52f6]::lookups::canonical_fully_decomposed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:350 ~ unicode_normalization[52f6]::tables::stream_safe_leading_nonstarters)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:68 ~ unicode_normalization[52f6]::lookups::stream_safe_trailing_nonstarters)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).94), kind: Call(Expr { hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:95:33: 95:58 (#0), res: Def(Fn, DefId(0:59 ~ unicode_normalization[52f6]::lookups::canonical_combining_class)), segments: [PathSegment { ident: canonical_combining_class#0, hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).96), res: Def(Fn, DefId(0:59 ~ unicode_normalization[52f6]::lookups::canonical_combining_class)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:95:33: 95:58 (#0) }, [Expr { hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:95:59: 95:60 (#0), res: Local(HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).2)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).98), res: Local(HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:95:59: 95:60 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:95:33: 95:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:211 ~ unicode_normalization[52f6]::stream_safe::classify_nonstarters).99), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:95:65: 95:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/unicode-normalization-0.1.22/src/stream_safe.rs:95:65: 95:66 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ unicode_normalization[52f6]::lookups::canonical_combining_class)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"unicode_normalization"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ unicode_normalization[52f6]::tables::composition_table_astral)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:345 ~ unicode_normalization[52f6]::tables::is_public_assigned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:346 ~ unicode_normalization[52f6]::tables::qc_nfc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:347 ~ unicode_normalization[52f6]::tables::qc_nfkc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:348 ~ unicode_normalization[52f6]::tables::qc_nfd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:349 ~ unicode_normalization[52f6]::tables::qc_nfkd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:350 ~ unicode_normalization[52f6]::tables::stream_safe_leading_nonstarters)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:215 ~ unicode_normalization[52f6]::__test_api::stream_safe)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ unicode_normalization[52f6]::stream_safe::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:238 ~ unicode_normalization[52f6]::{impl#0}::nfd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ unicode_normalization[52f6]::decompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ unicode_normalization[52f6]::{impl#0}::nfkd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ unicode_normalization[52f6]::decompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:240 ~ unicode_normalization[52f6]::{impl#0}::nfc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ unicode_normalization[52f6]::recompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ unicode_normalization[52f6]::{impl#0}::nfkc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ unicode_normalization[52f6]::recompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:242 ~ unicode_normalization[52f6]::{impl#0}::cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:174 ~ unicode_normalization[52f6]::replace::new_cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:243 ~ unicode_normalization[52f6]::{impl#0}::stream_safe)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ unicode_normalization[52f6]::stream_safe::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:245 ~ unicode_normalization[52f6]::{impl#1}::nfd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ unicode_normalization[52f6]::decompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ unicode_normalization[52f6]::{impl#1}::nfkd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ unicode_normalization[52f6]::decompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ unicode_normalization[52f6]::{impl#1}::nfc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ unicode_normalization[52f6]::recompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ unicode_normalization[52f6]::{impl#1}::nfkc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ unicode_normalization[52f6]::recompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:249 ~ unicode_normalization[52f6]::{impl#1}::cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:174 ~ unicode_normalization[52f6]::replace::new_cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ unicode_normalization[52f6]::{impl#1}::stream_safe)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ unicode_normalization[52f6]::stream_safe::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:253 ~ unicode_normalization[52f6]::{impl#2}::nfd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ unicode_normalization[52f6]::decompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:254 ~ unicode_normalization[52f6]::{impl#2}::nfkd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ unicode_normalization[52f6]::decompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:255 ~ unicode_normalization[52f6]::{impl#2}::nfc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:157 ~ unicode_normalization[52f6]::recompose::new_canonical)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:256 ~ unicode_normalization[52f6]::{impl#2}::nfkc)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:159 ~ unicode_normalization[52f6]::recompose::new_compatible)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:257 ~ unicode_normalization[52f6]::{impl#2}::cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:174 ~ unicode_normalization[52f6]::replace::new_cjk_compat_variants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:258 ~ unicode_normalization[52f6]::{impl#2}::stream_safe)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ unicode_normalization[52f6]::stream_safe::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
