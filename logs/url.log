[DEBUG] Trying to get func ty of defid DefId(0:492 ~ url[a8a3]::host::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:494 ~ url[a8a3]::host::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:496 ~ url[a8a3]::host::{impl#8}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }, Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).14)), segments: [PathSegment { ident: __self_discr#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).28), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }, Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).24)), segments: [PathSegment { ident: __arg1_discr#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).30), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).31), kind: Match(Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).32), kind: Tup([Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:34 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).34), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }, Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).4)), segments: [PathSegment { ident: other#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).36), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }, [Arm { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).46), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), pat: Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).45), kind: Tuple([Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).40), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:5: 24:5 (#24), res: Def(Ctor(Variant, Fn), DefId(0:485 ~ url[a8a3]::host::HostInternal::Ipv4::{constructor#0})), segments: [PathSegment { ident: HostInternal#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).37), res: Def(Enum, DefId(0:479 ~ url[a8a3]::host::HostInternal)), args: None, infer_args: true }, PathSegment { ident: Ipv4#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).38), res: Def(Ctor(Variant, Fn), DefId(0:485 ~ url[a8a3]::host::HostInternal::Ipv4::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).39), kind: Binding(BindingMode(No, Not), HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).39), __self_0#24, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).44), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:5: 24:5 (#24), res: Def(Ctor(Variant, Fn), DefId(0:485 ~ url[a8a3]::host::HostInternal::Ipv4::{constructor#0})), segments: [PathSegment { ident: HostInternal#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).41), res: Def(Enum, DefId(0:479 ~ url[a8a3]::host::HostInternal)), args: None, infer_args: true }, PathSegment { ident: Ipv4#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).42), res: Def(Ctor(Variant, Fn), DefId(0:485 ~ url[a8a3]::host::HostInternal::Ipv4::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).43), kind: Binding(BindingMode(No, Not), HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).43), __arg1_0#24, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).47), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24) }, Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).39)), segments: [PathSegment { ident: __self_0#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).49), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24) }, Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).43)), segments: [PathSegment { ident: __arg1_0#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).51), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24) } }, Arm { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).61), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), pat: Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).60), kind: Tuple([Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).55), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:5: 25:5 (#24), res: Def(Ctor(Variant, Fn), DefId(0:488 ~ url[a8a3]::host::HostInternal::Ipv6::{constructor#0})), segments: [PathSegment { ident: HostInternal#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).52), res: Def(Enum, DefId(0:479 ~ url[a8a3]::host::HostInternal)), args: None, infer_args: true }, PathSegment { ident: Ipv6#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).53), res: Def(Ctor(Variant, Fn), DefId(0:488 ~ url[a8a3]::host::HostInternal::Ipv6::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).54), kind: Binding(BindingMode(No, Not), HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).54), __self_0#24, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).59), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:5: 25:5 (#24), res: Def(Ctor(Variant, Fn), DefId(0:488 ~ url[a8a3]::host::HostInternal::Ipv6::{constructor#0})), segments: [PathSegment { ident: HostInternal#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).56), res: Def(Enum, DefId(0:479 ~ url[a8a3]::host::HostInternal)), args: None, infer_args: true }, PathSegment { ident: Ipv6#0, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).57), res: Def(Ctor(Variant, Fn), DefId(0:488 ~ url[a8a3]::host::HostInternal::Ipv6::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).58), kind: Binding(BindingMode(No, Not), HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).58), __arg1_0#24, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).62), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24) }, Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).54)), segments: [PathSegment { ident: __self_0#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).64), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24) }, Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).58)), segments: [PathSegment { ident: __arg1_0#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).66), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24) } }, Arm { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).68), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), pat: Pat { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).67), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).69), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) } }], Normal), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).14)), segments: [PathSegment { ident: __self_discr#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).28), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).24)), segments: [PathSegment { ident: __arg1_discr#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).30), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:20:34: 20:43 (#24) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).39)), segments: [PathSegment { ident: __self_0#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).49), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).43)), segments: [PathSegment { ident: __arg1_0#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).51), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:24:10: 24:18 (#24) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).54)), segments: [PathSegment { ident: __self_0#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).64), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).58)), segments: [PathSegment { ident: __arg1_0#24, hir_id: HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).66), res: Local(HirId(DefId(0:499 ~ url[a8a3]::host::{impl#10}::eq).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:25:10: 25:18 (#24) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:64 ~ url[a8a3]::host::{impl#0}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:513 ~ url[a8a3]::host::{impl#11}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:516 ~ url[a8a3]::host::{impl#12}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:519 ~ url[a8a3]::host::{impl#13}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:522 ~ url[a8a3]::host::{impl#14}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:525 ~ url[a8a3]::host::{impl#15}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:528 ~ url[a8a3]::host::{impl#16}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:67 ~ url[a8a3]::host::{impl#1}::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ url[a8a3]::host::{impl#2}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(21:66 ~ percent_encoding[200d]::{impl#6}::decode_utf8_lossy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(21:50 ~ percent_encoding[200d]::percent_decode)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ url[a8a3]::host::{impl#2}::domain_to_ascii)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14340 ~ core[7d5a]::str::{impl#0}::find)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:85 ~ url[a8a3]::host::ends_in_a_number)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ url[a8a3]::host::{impl#2}::parse_opaque)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14340 ~ core[7d5a]::str::{impl#0}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:73 ~ url[a8a3]::host::{impl#2}::domain_to_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(22:117 ~ idna[18fd]::domain_to_ascii)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ url[a8a3]::host::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ url[a8a3]::host::write_ipv6)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:190:51: 190:52 (#0), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).13)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).23), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:190:51: 190:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:190:56: 190:57 (#0), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).17)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).25), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:190:56: 190:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:191:47: 191:48 (#0), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).28)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).38), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:191:47: 191:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:191:52: 191:53 (#0), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).32)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).40), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:191:52: 191:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:192:47: 192:48 (#0), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).43)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).53), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:192:47: 192:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:192:52: 192:53 (#0), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).47)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).55), res: Local(HirId(DefId(0:80 ~ url[a8a3]::host::{impl#4}::eq).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:192:52: 192:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ url[a8a3]::host::write_ipv6)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9399 ~ core[7d5a]::net::ip_addr::{impl#20}::segments)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:202:11: 202:12 (#0), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).26)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).30), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:202:11: 202:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).31), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:202:15: 202:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:202:15: 202:16 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:203:12: 203:13 (#0), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).26)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).36), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:203:12: 203:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:203:17: 203:31 (#0), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).20)), segments: [PathSegment { ident: compress_start#0, hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).38), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:203:17: 203:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:205:16: 205:17 (#0), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).26)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).67), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:205:16: 205:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).68), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:205:21: 205:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:205:21: 205:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:208:16: 208:28 (#0), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).21)), segments: [PathSegment { ident: compress_end#0, hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).100), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:208:16: 208:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).101), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:208:31: 208:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:208:31: 208:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11045 ~ core[7d5a]::fmt::rt::{impl#1}::new_lower_hex)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).167), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:215:12: 215:13 (#0), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).26)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).168), res: Local(HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:215:12: 215:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ url[a8a3]::host::write_ipv6).169), kind: Lit(Spanned { node: Int(Pu128(7), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:215:16: 215:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:215:16: 215:17 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).33), kind: Index(Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:12: 240:18 (#0), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).2)), segments: [PathSegment { ident: pieces#0, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).35), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:12: 240:18 (#0) }, Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).36), kind: Cast(Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:19: 240:20 (#0), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).24)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).38), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:19: 240:20 (#0) }, Ty { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:24: 240:29 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).40), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:24: 240:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:19: 240:29 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:18: 240:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:12: 240:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).41), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:34: 240:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:240:34: 240:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:241:16: 241:21 (#0), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).46), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:241:16: 241:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).47), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:241:24: 241:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:241:24: 241:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:230:16: 230:21 (#35), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), segments: [PathSegment { ident: start#35, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).63), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:230:16: 230:21 (#35) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).64), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:230:25: 230:26 (#35) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:230:25: 230:26 (#35) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:245:30: 245:31 (#0), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).24)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).69), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:245:30: 245:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:231:37: 231:42 (#35), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), segments: [PathSegment { ident: start#35, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).71), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:231:37: 231:42 (#35) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:232:20: 232:26 (#35), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).73)), segments: [PathSegment { ident: length#35, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).77), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).73)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:232:20: 232:26 (#35) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:232:29: 232:43 (#35), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).12)), segments: [PathSegment { ident: longest_length#35, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).79), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:232:29: 232:43 (#35) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:230:16: 230:21 (#36), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), segments: [PathSegment { ident: start#36, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).126), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:230:16: 230:21 (#36) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).127), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:230:25: 230:26 (#36) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:230:25: 230:26 (#36) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).131), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:249:22: 249:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:249:22: 249:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:231:37: 231:42 (#36), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), segments: [PathSegment { ident: start#36, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).133), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:231:37: 231:42 (#36) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:232:20: 232:26 (#36), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).135)), segments: [PathSegment { ident: length#36, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).139), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).135)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:232:20: 232:26 (#36) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:232:29: 232:43 (#36), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).12)), segments: [PathSegment { ident: longest_length#36, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).141), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:232:29: 232:43 (#36) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:252:8: 252:22 (#0), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).12)), segments: [PathSegment { ident: longest_length#0, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).163), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:252:8: 252:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).164), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:252:25: 252:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:252:25: 252:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:255:19: 255:26 (#0), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).7)), segments: [PathSegment { ident: longest#0, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).179), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:255:19: 255:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:255:29: 255:43 (#0), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).12)), segments: [PathSegment { ident: longest_length#0, hir_id: HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).181), res: Local(HirId(DefId(0:82 ~ url[a8a3]::host::longest_zero_sequence).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:255:29: 255:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:85 ~ url[a8a3]::host::ends_in_a_number)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14351 ~ core[7d5a]::str::{impl#0}::rsplit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).55), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).56), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).57), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:9: 272:13 (#0), res: Local(HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).52)), segments: [PathSegment { ident: last#0, hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).59), res: Local(HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:9: 272:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:14: 272:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:9: 272:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:8: 272:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).60), kind: MethodCall(PathSegment { ident: all#0, hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).61), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).62), kind: MethodCall(PathSegment { ident: iter#0, hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).63), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).64), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).65), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:28: 272:32 (#0), res: Local(HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).52)), segments: [PathSegment { ident: last#0, hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).67), res: Local(HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:28: 272:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:33: 272:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:28: 272:43 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:44: 272:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:28: 272:50 (#0) }, [Expr { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).68), kind: Closure(Closure { def_id: DefId(0:86 ~ url[a8a3]::host::ends_in_a_number::{closure#0}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).75), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:56: 272:57 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:58: 272:58 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:85 ~ url[a8a3]::host::ends_in_a_number).71) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:55: 272:58 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:55: 272:58 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:55: 272:77 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:51: 272:78 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:272:28: 272:78 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1148 ~ core[7d5a]::num::{impl#6}::is_ascii_digit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10385 ~ core[7d5a]::result::{impl#0}::is_ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:87 ~ url[a8a3]::host::parse_ipv4number)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:87 ~ url[a8a3]::host::parse_ipv4number)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).24), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).25), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:8: 287:13 (#0), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).27), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:8: 287:13 (#0) }, [Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).28), kind: Lit(Spanned { node: Str("0x", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:26: 287:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:26: 287:30 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:14: 287:31 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:8: 287:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).29), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).30), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:35: 287:40 (#0), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).32), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:35: 287:40 (#0) }, [Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).33), kind: Lit(Spanned { node: Str("0X", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:53: 287:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:53: 287:57 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:41: 287:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:287:35: 287:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).55), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:27: 290:29 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).56), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).57), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:15: 290:20 (#0), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).59), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:15: 290:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:21: 290:26 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:15: 290:26 (#0) }, Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).60), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:30: 290:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:30: 290:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:15: 290:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).61), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).62), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:35: 290:40 (#0), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).64), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:35: 290:40 (#0) }, [Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).65), kind: Lit(Spanned { node: Char('0'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:53: 290:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:53: 290:56 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:41: 290:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:35: 290:57 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).56), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).57), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:15: 290:20 (#0), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).59), res: Local(HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:15: 290:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:21: 290:26 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:15: 290:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:87 ~ url[a8a3]::host::parse_ipv4number).60), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:30: 290:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:290:30: 290:31 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3795 ~ core[7d5a]::ops::range::{impl#10}::contains)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3784 ~ core[7d5a]::ops::range::{impl#7}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1148 ~ core[7d5a]::num::{impl#6}::is_ascii_digit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1150 ~ core[7d5a]::num::{impl#6}::is_ascii_hexdigit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:25591 ~ core[7d5a]::num::{impl#36}::from_str_radix)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).21), kind: MethodCall(PathSegment { ident: last#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:8: 319:13 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).18)), segments: [PathSegment { ident: parts#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).24), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:8: 319:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:14: 319:20 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:8: 319:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).25), kind: Call(Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:24: 319:28 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).27), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:24: 319:28 (#0) }, [Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).28), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).29), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:30: 319:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:30: 319:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:29: 319:32 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:319:24: 319:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:13236 ~ core[7d5a]::slice::{impl#0}::last)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7504 ~ alloc[5873]::vec::{impl#1}::pop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).41), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).42), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:322:8: 322:13 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).18)), segments: [PathSegment { ident: parts#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).44), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:322:8: 322:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:322:14: 322:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:322:8: 322:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).45), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:322:22: 322:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:322:22: 322:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:87 ~ url[a8a3]::host::parse_ipv4number)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7504 ~ alloc[5873]::vec::{impl#1}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:8: 335:12 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).148)), segments: [PathSegment { ident: ipv4#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).152), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:8: 335:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).153), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:24: 335:26 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).154), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:15: 335:18 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).155), res: PrimTy(Uint(U32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:15: 335:18 (#0) }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).157), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:15: 335:23 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).158), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:30: 335:31 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).159), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:28: 335:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:28: 335:29 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).160), kind: Cast(Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).161), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).162), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:39 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).69)), segments: [PathSegment { ident: numbers#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).164), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:40: 335:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:45 (#0) }, Ty { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).165), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:49: 335:52 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).166), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:49: 335:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:27: 335:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:15: 335:53 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).154), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:15: 335:18 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).155), res: PrimTy(Uint(U32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:15: 335:18 (#0) }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).157), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:15: 335:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).158), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:30: 335:31 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).159), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:28: 335:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:28: 335:29 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).160), kind: Cast(Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).161), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).162), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:39 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).69)), segments: [PathSegment { ident: numbers#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).164), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:40: 335:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:45 (#0) }, Ty { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).165), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:49: 335:52 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).166), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:49: 335:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:27: 335:53 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).159), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:28: 335:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:28: 335:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).160), kind: Cast(Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).161), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).162), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:39 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).69)), segments: [PathSegment { ident: numbers#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).164), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).69)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:40: 335:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:45 (#0) }, Ty { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).165), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:49: 335:52 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).166), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:49: 335:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:335:32: 335:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9015 ~ core[7d5a]::iter::traits::iterator::Iterator::any)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).190), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:338:32: 338:33 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).188)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).192), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).188)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:338:32: 338:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:338:31: 338:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).193), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:338:36: 338:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:338:36: 338:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:17: 342:18 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).214)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).227), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).214)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:17: 342:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).228), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:25: 342:26 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).229), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:23: 342:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:23: 342:24 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).230), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:30: 342:31 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).231), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:28: 342:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:28: 342:29 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).232), kind: Cast(Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).233), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:39 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).213)), segments: [PathSegment { ident: counter#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).234), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).213)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:39 (#0) }, Ty { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:43: 342:46 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).236), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:43: 342:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:27: 342:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:22: 342:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).229), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:23: 342:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:23: 342:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).230), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:30: 342:31 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).231), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:28: 342:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:28: 342:29 (#0) }, Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).232), kind: Cast(Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).233), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:39 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).213)), segments: [PathSegment { ident: counter#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).234), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).213)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:39 (#0) }, Ty { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:43: 342:46 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).236), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:43: 342:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:27: 342:47 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).231), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:28: 342:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:28: 342:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).232), kind: Cast(Expr { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).233), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:39 (#0), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).213)), segments: [PathSegment { ident: counter#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).234), res: Local(HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).213)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:39 (#0) }, Ty { hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).235), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:43: 342:46 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:91 ~ url[a8a3]::host::parse_ipv4addr).236), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:43: 342:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:342:32: 342:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:357:8: 357:11 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).49), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:357:8: 357:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).50), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:357:14: 357:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:357:14: 357:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).65), kind: Index(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:361:8: 361:13 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).67), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:361:8: 361:13 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).68), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:361:14: 361:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:361:14: 361:15 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:361:13: 361:16 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:361:8: 361:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).69), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:361:20: 361:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:361:20: 361:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).73), kind: Index(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:362:12: 362:17 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).75), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:362:12: 362:17 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).76), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:362:18: 362:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:362:18: 362:19 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:362:17: 362:20 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:362:12: 362:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).77), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:362:24: 362:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:362:24: 362:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:370:11: 370:12 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).114), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:370:11: 370:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:370:15: 370:18 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).116), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:370:15: 370:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:371:12: 371:25 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), segments: [PathSegment { ident: piece_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).121), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:371:12: 371:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).122), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:371:29: 371:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:371:29: 371:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).137), kind: Index(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:374:12: 374:17 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).139), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:374:12: 374:17 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:374:18: 374:19 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).141), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:374:18: 374:19 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:374:17: 374:20 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:374:12: 374:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).142), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:374:24: 374:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:374:24: 374:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:384:33: 384:38 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).189)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).199), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).189)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:384:33: 384:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).200), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:384:41: 384:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:384:41: 384:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:386:15: 386:16 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).210), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:386:15: 386:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).211), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:386:19: 386:22 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).202)), segments: [PathSegment { ident: end#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).212), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).202)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:386:19: 386:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:5299 ~ core[7d5a]::char::methods::{impl#0}::to_digit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).235), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:35: 389:36 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).236), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:29: 389:34 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).206)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).237), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).206)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:29: 389:34 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).238), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:37: 389:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:37: 389:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:29: 389:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).239), kind: Cast(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:44: 389:49 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).227)), segments: [PathSegment { ident: digit#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).241), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).227)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:44: 389:49 (#0) }, Ty { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).242), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:53: 389:56 (#0), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).243), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:53: 389:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:44: 389:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).236), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:29: 389:34 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).206)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).237), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).206)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:29: 389:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).238), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:37: 389:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:389:37: 389:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).266), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:395:12: 395:13 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).267), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:395:12: 395:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).268), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:395:16: 395:19 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).269), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:395:16: 395:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).283), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:398:24: 398:25 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).284), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:398:24: 398:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:398:29: 398:34 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).189)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).286), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).189)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:398:29: 398:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).307), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:402:24: 402:37 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), segments: [PathSegment { ident: piece_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).308), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:402:24: 402:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).309), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:402:40: 402:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:402:40: 402:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).339), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:409:24: 409:25 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).340), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:409:24: 409:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).341), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:409:29: 409:32 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).342), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:409:29: 409:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).405), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:424:12: 424:25 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), segments: [PathSegment { ident: piece_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).406), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:424:12: 424:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).407), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:424:28: 424:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:424:28: 424:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).426), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:428:15: 428:16 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).427), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:428:15: 428:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).428), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:428:19: 428:22 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).429), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:428:19: 428:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).433), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:429:16: 429:28 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), segments: [PathSegment { ident: numbers_seen#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).434), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:429:16: 429:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).435), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:429:31: 429:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:429:31: 429:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).439), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:33: 430:34 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).440), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:20: 430:32 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), segments: [PathSegment { ident: numbers_seen#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).441), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:20: 430:32 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).442), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:35: 430:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:35: 430:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:20: 430:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).443), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:49: 430:51 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).444), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:43: 430:44 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).445), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:41: 430:42 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).446), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:41: 430:42 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).447), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:45: 430:48 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).448), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:45: 430:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:41: 430:48 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).449), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:61: 430:63 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).450), kind: Index(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).451), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:57 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).452), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:57 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).453), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:58: 430:59 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).454), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:58: 430:59 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:57: 430:60 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:60 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).455), kind: Lit(Spanned { node: Byte(46), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:64: 430:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:64: 430:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:40: 430:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).440), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:20: 430:32 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), segments: [PathSegment { ident: numbers_seen#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).441), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:20: 430:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).442), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:35: 430:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:35: 430:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).444), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:43: 430:44 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).445), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:41: 430:42 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).446), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:41: 430:42 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).447), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:45: 430:48 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).448), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:45: 430:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:41: 430:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).449), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:61: 430:63 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).450), kind: Index(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).451), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:57 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).452), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:57 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).453), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:58: 430:59 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).454), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:58: 430:59 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:57: 430:60 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:60 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).455), kind: Lit(Spanned { node: Byte(46), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:64: 430:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:64: 430:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:68 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).445), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:41: 430:42 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).446), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:41: 430:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).447), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:45: 430:48 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).448), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:45: 430:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).450), kind: Index(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).451), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:57 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).452), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:57 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).453), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:58: 430:59 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).454), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:58: 430:59 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:57: 430:60 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:52: 430:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).455), kind: Lit(Spanned { node: Byte(46), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:64: 430:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:430:64: 430:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).483), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:438:19: 438:20 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).484), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:438:19: 438:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:438:23: 438:26 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).486), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:438:23: 438:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).501), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:440:40: 440:41 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).495)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).502), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).495)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:440:40: 440:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).503), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:440:44: 440:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:440:44: 440:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).548), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:33: 447:34 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).549), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).550), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:31: 447:32 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).539)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).551), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).539)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:31: 447:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:30: 447:32 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).552), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:35: 447:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:35: 447:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:30: 447:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).553), kind: Cast(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).554), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:40: 447:45 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).508)), segments: [PathSegment { ident: digit#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).555), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).508)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:40: 447:45 (#0) }, Ty { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).556), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:49: 447:52 (#0), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).557), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:49: 447:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:40: 447:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).549), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).550), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:31: 447:32 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).539)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).551), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).539)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:31: 447:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:30: 447:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).552), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:35: 447:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:447:35: 447:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).561), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).562), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:448:29: 448:30 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).539)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).563), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).539)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:448:29: 448:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:448:28: 448:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).564), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:448:33: 448:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:448:33: 448:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).606), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:39: 457:40 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).607), kind: Index(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).608), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:17: 457:23 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).32)), segments: [PathSegment { ident: pieces#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).609), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:17: 457:23 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).610), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:24: 457:37 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), segments: [PathSegment { ident: piece_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).611), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:24: 457:37 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:23: 457:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:17: 457:38 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).612), kind: Lit(Spanned { node: Int(Pu128(256), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:41: 457:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:41: 457:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:17: 457:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).613), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:49: 457:50 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).601)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).614), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).601)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:49: 457:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).607), kind: Index(Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).608), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:17: 457:23 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).32)), segments: [PathSegment { ident: pieces#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).609), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:17: 457:23 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).610), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:24: 457:37 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), segments: [PathSegment { ident: piece_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).611), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:24: 457:37 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:23: 457:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:17: 457:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).612), kind: Lit(Spanned { node: Int(Pu128(256), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:41: 457:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:457:41: 457:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).635), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:29: 463:31 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).636), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:16: 463:28 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), segments: [PathSegment { ident: numbers_seen#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).637), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:16: 463:28 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).638), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:32: 463:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:32: 463:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:16: 463:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).639), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:50: 463:52 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).640), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:37: 463:49 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), segments: [PathSegment { ident: numbers_seen#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).641), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:37: 463:49 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).642), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:53: 463:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:53: 463:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:37: 463:54 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).636), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:16: 463:28 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), segments: [PathSegment { ident: numbers_seen#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).637), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:16: 463:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).638), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:32: 463:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:32: 463:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).640), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:37: 463:49 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), segments: [PathSegment { ident: numbers_seen#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).641), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:37: 463:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).642), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:53: 463:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:463:53: 463:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).662), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:468:12: 468:24 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), segments: [PathSegment { ident: numbers_seen#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).663), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:468:12: 468:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).664), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:468:28: 468:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:468:28: 468:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).681), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:473:8: 473:9 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).682), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).45)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:473:8: 473:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).683), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:473:12: 473:15 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).684), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:473:12: 473:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).707), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:479:29: 479:42 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), segments: [PathSegment { ident: piece_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).708), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:479:29: 479:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).709), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:479:45: 479:61 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).701)), segments: [PathSegment { ident: compress_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).710), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).701)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:479:45: 479:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).720), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:481:19: 481:24 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).712)), segments: [PathSegment { ident: swaps#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).721), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).712)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:481:19: 481:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).722), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:481:27: 481:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:481:27: 481:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13282 ~ core[7d5a]::slice::{impl#0}::swap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).731), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:61: 482:62 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).732), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:44: 482:60 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).701)), segments: [PathSegment { ident: compress_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).733), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).701)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:44: 482:60 (#0) }, Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).734), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:63: 482:68 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).712)), segments: [PathSegment { ident: swaps#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).735), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).712)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:63: 482:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:44: 482:68 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).736), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:71: 482:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:71: 482:72 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).732), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:44: 482:60 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).701)), segments: [PathSegment { ident: compress_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).733), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).701)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:44: 482:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).734), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:63: 482:68 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).712)), segments: [PathSegment { ident: swaps#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).735), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).712)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:482:63: 482:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).762), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:488:16: 488:29 (#0), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), segments: [PathSegment { ident: piece_pointer#0, hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).763), res: Local(HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:488:16: 488:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ url[a8a3]::host::parse_ipv6addr).764), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:488:33: 488:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/host.rs:488:33: 488:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9392 ~ core[7d5a]::net::ip_addr::{impl#20}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ url[a8a3]::origin::url_origin)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ url[a8a3]::{impl#1}::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ url[a8a3]::{impl#1}::path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ url[a8a3]::origin::url_origin)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ url[a8a3]::origin::{impl#0}::new_opaque)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:67 ~ url[a8a3]::host::{impl#1}::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:371 ~ url[a8a3]::{impl#1}::port_or_known_default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ url[a8a3]::origin::{impl#0}::new_opaque)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ url[a8a3]::origin::{impl#0}::new_opaque)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).14)), segments: [PathSegment { ident: __self_discr#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).28), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).24)), segments: [PathSegment { ident: __arg1_discr#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).30), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).31), kind: Match(Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).32), kind: Tup([Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:10 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).34), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).4)), segments: [PathSegment { ident: other#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).36), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }, [Arm { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).46), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), pat: Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).45), kind: Tuple([Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).40), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:5: 55:5 (#37), res: Def(Ctor(Variant, Fn), DefId(0:532 ~ url[a8a3]::origin::Origin::Opaque::{constructor#0})), segments: [PathSegment { ident: Origin#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).37), res: Def(Enum, DefId(0:530 ~ url[a8a3]::origin::Origin)), args: None, infer_args: true }, PathSegment { ident: Opaque#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).38), res: Def(Ctor(Variant, Fn), DefId(0:532 ~ url[a8a3]::origin::Origin::Opaque::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).39), kind: Binding(BindingMode(No, Not), HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).39), __self_0#37, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).44), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:5: 55:5 (#37), res: Def(Ctor(Variant, Fn), DefId(0:532 ~ url[a8a3]::origin::Origin::Opaque::{constructor#0})), segments: [PathSegment { ident: Origin#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).41), res: Def(Enum, DefId(0:530 ~ url[a8a3]::origin::Origin)), args: None, infer_args: true }, PathSegment { ident: Opaque#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).42), res: Def(Ctor(Variant, Fn), DefId(0:532 ~ url[a8a3]::origin::Origin::Opaque::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).43), kind: Binding(BindingMode(No, Not), HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).43), __arg1_0#37, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).47), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).39)), segments: [PathSegment { ident: __self_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).49), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).43)), segments: [PathSegment { ident: __arg1_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).51), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37) } }, Arm { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).65), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), pat: Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).64), kind: Tuple([Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).57), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:5: 58:5 (#37), res: Def(Ctor(Variant, Fn), DefId(0:535 ~ url[a8a3]::origin::Origin::Tuple::{constructor#0})), segments: [PathSegment { ident: Origin#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).52), res: Def(Enum, DefId(0:530 ~ url[a8a3]::origin::Origin)), args: None, infer_args: true }, PathSegment { ident: Tuple#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).53), res: Def(Ctor(Variant, Fn), DefId(0:535 ~ url[a8a3]::origin::Origin::Tuple::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54), kind: Binding(BindingMode(No, Not), HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54), __self_0#37, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55), kind: Binding(BindingMode(No, Not), HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55), __self_1#37, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).56), kind: Binding(BindingMode(No, Not), HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).56), __self_2#37, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).63), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:5: 58:5 (#37), res: Def(Ctor(Variant, Fn), DefId(0:535 ~ url[a8a3]::origin::Origin::Tuple::{constructor#0})), segments: [PathSegment { ident: Origin#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).58), res: Def(Enum, DefId(0:530 ~ url[a8a3]::origin::Origin)), args: None, infer_args: true }, PathSegment { ident: Tuple#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).59), res: Def(Ctor(Variant, Fn), DefId(0:535 ~ url[a8a3]::origin::Origin::Tuple::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60), kind: Binding(BindingMode(No, Not), HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60), __arg1_0#37, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61), kind: Binding(BindingMode(No, Not), HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61), __arg1_1#37, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).62), kind: Binding(BindingMode(No, Not), HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).62), __arg1_2#37, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).66), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).67), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).68), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54)), segments: [PathSegment { ident: __self_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).70), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60)), segments: [PathSegment { ident: __arg1_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).72), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).73), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55)), segments: [PathSegment { ident: __self_1#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).75), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61)), segments: [PathSegment { ident: __arg1_1#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).77), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).78), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).56)), segments: [PathSegment { ident: __self_2#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).80), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).62)), segments: [PathSegment { ident: __arg1_2#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).82), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) } }, Arm { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).84), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), pat: Pat { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).83), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).85), kind: Block(Block { stmts: [], expr: Some(Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).86), kind: Call(Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:10 (#37), res: Def(Fn, DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)), segments: [PathSegment { ident: $crate#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).88), res: Err, args: None, infer_args: true }, PathSegment { ident: intrinsics#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).89), res: Def(Mod, DefId(2:1290 ~ core[7d5a]::intrinsics)), args: None, infer_args: true }, PathSegment { ident: unreachable#0, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).90), res: Def(Fn, DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }), hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).91), rules: UnsafeBlock(CompilerGenerated), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), targeted_by_break: false }, None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) } }], Normal), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).14)), segments: [PathSegment { ident: __self_discr#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).28), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).24)), segments: [PathSegment { ident: __arg1_discr#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).30), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:52:10: 52:19 (#37) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).39)), segments: [PathSegment { ident: __self_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).49), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).43)), segments: [PathSegment { ident: __arg1_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).51), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:55:12: 55:24 (#37) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).67), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).68), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54)), segments: [PathSegment { ident: __self_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).70), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60)), segments: [PathSegment { ident: __arg1_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).72), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).73), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55)), segments: [PathSegment { ident: __self_1#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).75), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61)), segments: [PathSegment { ident: __arg1_1#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).77), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).78), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).56)), segments: [PathSegment { ident: __self_2#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).80), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).62)), segments: [PathSegment { ident: __arg1_2#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).82), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).68), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54)), segments: [PathSegment { ident: __self_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).70), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60)), segments: [PathSegment { ident: __arg1_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).72), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).73), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55)), segments: [PathSegment { ident: __self_1#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).75), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }, Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61)), segments: [PathSegment { ident: __arg1_1#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).77), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54)), segments: [PathSegment { ident: __self_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).70), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60)), segments: [PathSegment { ident: __arg1_0#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).72), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:11: 58:17 (#37) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55)), segments: [PathSegment { ident: __self_1#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).75), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61)), segments: [PathSegment { ident: __arg1_1#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).77), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:19: 58:31 (#37) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).56)), segments: [PathSegment { ident: __self_2#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).80), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).62)), segments: [PathSegment { ident: __arg1_2#37, hir_id: HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).82), res: Local(HirId(DefId(0:541 ~ url[a8a3]::origin::{impl#2}::eq).62)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:58:33: 58:36 (#37) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1708 ~ core[7d5a]::intrinsics::{extern#0}::unreachable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:543 ~ url[a8a3]::origin::{impl#3}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:545 ~ url[a8a3]::origin::{impl#4}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:548 ~ url[a8a3]::origin::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:550 ~ url[a8a3]::origin::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11214 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field3_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ url[a8a3]::origin::{impl#0}::new_opaque)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:37966 ~ core[7d5a]::sync::atomic::{impl#78}::fetch_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ url[a8a3]::origin::{impl#0}::is_tuple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).25), kind: Call(Expr { hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:20: 79:32 (#0), res: Def(Fn, DefId(0:147 ~ url[a8a3]::parser::default_port)), segments: [PathSegment { ident: default_port#0, hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).27), res: Def(Fn, DefId(0:147 ~ url[a8a3]::parser::default_port)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:20: 79:32 (#0) }, [Expr { hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:33: 79:39 (#0), res: Local(HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).17)), segments: [PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).29), res: Local(HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:33: 79:39 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:20: 79:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).30), kind: Call(Expr { hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:44: 79:48 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).32), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:44: 79:48 (#0) }, [Expr { hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:49: 79:53 (#0), res: Local(HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).19)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).34), res: Local(HirId(DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:49: 79:53 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:79:44: 79:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ url[a8a3]::parser::default_port)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(22:119 ~ idna[18fd]::domain_to_unicode)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).62), kind: Call(Expr { hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:20: 100:32 (#0), res: Def(Fn, DefId(0:147 ~ url[a8a3]::parser::default_port)), segments: [PathSegment { ident: default_port#0, hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).64), res: Def(Fn, DefId(0:147 ~ url[a8a3]::parser::default_port)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:20: 100:32 (#0) }, [Expr { hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:33: 100:39 (#0), res: Local(HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).17)), segments: [PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).66), res: Local(HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:33: 100:39 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:20: 100:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).67), kind: Call(Expr { hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:44: 100:48 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).69), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:44: 100:48 (#0) }, [Expr { hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:49: 100:53 (#0), res: Local(HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).19)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).71), res: Local(HirId(DefId(0:107 ~ url[a8a3]::origin::{impl#0}::unicode_serialization).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:49: 100:53 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:100:44: 100:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ url[a8a3]::parser::default_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:555 ~ url[a8a3]::origin::{impl#7}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:111:14: 111:14 (#53), res: Local(HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).8), res: Local(HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:111:14: 111:23 (#53) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:112:25: 112:30 (#53) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).9), kind: Field(Expr { hir_id: HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:111:14: 111:23 (#53), res: Local(HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).4)), segments: [PathSegment { ident: other#53, hir_id: HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).11), res: Local(HirId(DefId(0:558 ~ url[a8a3]::origin::{impl#9}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:111:14: 111:23 (#53) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/origin.rs:112:25: 112:30 (#53) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:560 ~ url[a8a3]::origin::{impl#10}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:563 ~ url[a8a3]::origin::{impl#11}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:565 ~ url[a8a3]::origin::{impl#12}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:55:18: 55:27 (#58), res: Local(HirId(DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq).14)), segments: [PathSegment { ident: __self_discr#58, hir_id: HirId(DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq).27), res: Local(HirId(DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:55:18: 55:27 (#58) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:55:18: 55:27 (#58), res: Local(HirId(DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq).24)), segments: [PathSegment { ident: __arg1_discr#58, hir_id: HirId(DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq).29), res: Local(HirId(DefId(0:591 ~ url[a8a3]::parser::{impl#13}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:55:18: 55:27 (#58) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:593 ~ url[a8a3]::parser::{impl#14}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:595 ~ url[a8a3]::parser::{impl#15}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:598 ~ url[a8a3]::parser::{impl#17}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:567 ~ url[a8a3]::parser::{impl#11}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ url[a8a3]::parser::{impl#1}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:102:18: 102:27 (#64), res: Local(HirId(DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq).14)), segments: [PathSegment { ident: __self_discr#64, hir_id: HirId(DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq).27), res: Local(HirId(DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:102:18: 102:27 (#64) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:102:18: 102:27 (#64), res: Local(HirId(DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq).24)), segments: [PathSegment { ident: __arg1_discr#64, hir_id: HirId(DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq).29), res: Local(HirId(DefId(0:626 ~ url[a8a3]::parser::{impl#20}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:102:18: 102:27 (#64) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:628 ~ url[a8a3]::parser::{impl#21}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:630 ~ url[a8a3]::parser::{impl#22}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:633 ~ url[a8a3]::parser::{impl#24}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:600 ~ url[a8a3]::parser::{impl#18}::description)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:140 ~ url[a8a3]::parser::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:600 ~ url[a8a3]::parser::{impl#18}::description)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:643 ~ url[a8a3]::parser::{impl#26}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:148:23: 148:32 (#71), res: Local(HirId(DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq).14)), segments: [PathSegment { ident: __self_discr#71, hir_id: HirId(DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq).27), res: Local(HirId(DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:148:23: 148:32 (#71) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:148:23: 148:32 (#71), res: Local(HirId(DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq).24)), segments: [PathSegment { ident: __arg1_discr#71, hir_id: HirId(DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq).29), res: Local(HirId(DefId(0:646 ~ url[a8a3]::parser::{impl#28}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:148:23: 148:32 (#71) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:648 ~ url[a8a3]::parser::{impl#29}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:146 ~ url[a8a3]::parser::{impl#4}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ url[a8a3]::parser::default_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:654 ~ url[a8a3]::parser::{impl#30}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:657 ~ url[a8a3]::parser::{impl#31}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14387 ~ core[7d5a]::str::{impl#0}::trim_matches)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:244 ~ url[a8a3]::parser::ascii_tab_or_new_line)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).23), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).24), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:202:16: 202:21 (#0), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).13)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).26), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:202:16: 202:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:202:22: 202:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:202:16: 202:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).27), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:202:30: 202:44 (#0), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).2)), segments: [PathSegment { ident: original_input#0, hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).30), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:202:30: 202:44 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:202:45: 202:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:202:30: 202:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:203:17: 203:20 (#0), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).17)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).34), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:203:17: 203:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9015 ~ core[7d5a]::iter::traits::iterator::Iterator::any)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:206:17: 206:20 (#0), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).17)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).70), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:206:17: 206:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14387 ~ core[7d5a]::str::{impl#0}::trim_matches)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:243 ~ url[a8a3]::parser::c0_control_or_space)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).23), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).24), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:220:16: 220:21 (#0), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).13)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).26), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).13)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:220:16: 220:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:220:22: 220:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:220:16: 220:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).27), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:220:30: 220:44 (#0), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).2)), segments: [PathSegment { ident: original_input#0, hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).30), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:220:30: 220:44 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:220:45: 220:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:220:30: 220:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:221:17: 221:20 (#0), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).17)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).34), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:221:17: 221:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9015 ~ core[7d5a]::iter::traits::iterator::Iterator::any)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:224:17: 224:20 (#0), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).17)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).70), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:224:17: 224:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ url[a8a3]::parser::{impl#5}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ url[a8a3]::parser::{impl#5}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ url[a8a3]::parser::Pattern::split_prefix)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ url[a8a3]::parser::{impl#5}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ url[a8a3]::parser::Pattern::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ url[a8a3]::parser::{impl#5}::split_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:161 ~ url[a8a3]::parser::{impl#5}::count_matching)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ url[a8a3]::parser::{impl#5}::next_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13619 ~ core[7d5a]::str::iter::{impl#4}::as_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:203:17: 203:20 (#0), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).17)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).34), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:203:17: 203:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:206:17: 206:20 (#0), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).17)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).70), res: Local(HirId(DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:206:17: 206:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:221:17: 221:20 (#0), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).17)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).34), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:221:17: 221:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:224:17: 224:20 (#0), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).17)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).70), res: Local(HirId(DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:224:17: 224:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).6), kind: MethodCall(PathSegment { ident: next#0, hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:9: 295:14 (#0), res: Local(HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).4)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).9), res: Local(HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:9: 295:14 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:15: 295:21 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:9: 295:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).10), kind: Call(Expr { hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:25: 295:29 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).12), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:25: 295:29 (#0) }, [Expr { hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:30: 295:34 (#0), res: Local(HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).14), res: Local(HirId(DefId(0:167 ~ url[a8a3]::parser::{impl#6}::split_prefix).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:30: 295:34 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:295:25: 295:35 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).18), kind: MethodCall(PathSegment { ident: next#0, hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).19), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:16: 302:21 (#0), res: Local(HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).4)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).21), res: Local(HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:16: 302:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:22: 302:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:16: 302:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).22), kind: Call(Expr { hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:32: 302:36 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).24), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:32: 302:36 (#0) }, [Expr { hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:37: 302:38 (#0), res: Local(HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).9)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).26), res: Local(HirId(DefId(0:170 ~ url[a8a3]::parser::{impl#7}::split_prefix).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:37: 302:38 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:302:32: 302:39 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:173 ~ url[a8a3]::parser::{impl#8}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9681 ~ core[7d5a]::option::{impl#0}::map_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:177 ~ url[a8a3]::parser::{impl#9}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9022 ~ core[7d5a]::iter::traits::iterator::Iterator::find)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:333:10: 333:19 (#82), res: Local(HirId(DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq).14)), segments: [PathSegment { ident: __self_discr#82, hir_id: HirId(DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq).27), res: Local(HirId(DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:333:10: 333:19 (#82) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:333:10: 333:19 (#82), res: Local(HirId(DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq).24)), segments: [PathSegment { ident: __arg1_discr#82, hir_id: HirId(DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq).29), res: Local(HirId(DefId(0:667 ~ url[a8a3]::parser::{impl#33}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:333:10: 333:19 (#82) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:669 ~ url[a8a3]::parser::{impl#34}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:672 ~ url[a8a3]::parser::{impl#36}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:343:13: 343:14 (#0), res: Local(HirId(DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation).15), res: Local(HirId(DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:343:13: 343:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:349:16: 349:20 (#0), res: Local(HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).6)), segments: [PathSegment { ident: test#0, hir_id: HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).18), res: Local(HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:349:16: 349:20 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:350:17: 350:18 (#0), res: Local(HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).10)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).22), res: Local(HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:350:17: 350:18 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ url[a8a3]::parser::{impl#10}::for_setter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ url[a8a3]::parser::{impl#10}::parse_url)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:153 ~ url[a8a3]::parser::{impl#5}::new_trim_c0_control_and_space)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ url[a8a3]::parser::{impl#5}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).7), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:12: 392:17 (#0), res: Local(HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).4)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).10), res: Local(HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:12: 392:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:18: 392:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:12: 392:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).11), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).12), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:33: 392:38 (#0), res: Local(HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).4)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).15), res: Local(HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:33: 392:38 (#0) }, [Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:51: 392:62 (#0), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), segments: [PathSegment { ident: ascii_alpha#0, hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).17), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:51: 392:62 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:39: 392:63 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:33: 392:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:392:32: 392:63 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ url[a8a3]::parser::{impl#5}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ url[a8a3]::parser::{impl#5}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:5321 ~ core[7d5a]::char::methods::{impl#0}::to_ascii_lowercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:6028 ~ alloc[5873]::string::{impl#0}::clear)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).127), kind: Field(Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:409:12: 409:16 (#0), res: Local(HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).129), res: Local(HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:409:12: 409:16 (#0) }, context#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:409:12: 409:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:409:28: 409:43 (#0), res: Def(Ctor(Variant, Const), DefId(0:662 ~ url[a8a3]::parser::Context::Setter::{constructor#0})), segments: [PathSegment { ident: Context#0, hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).131), res: Def(Enum, DefId(0:658 ~ url[a8a3]::parser::Context)), args: None, infer_args: true }, PathSegment { ident: Setter#0, hir_id: HirId(DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme).132), res: Def(Ctor(Variant, Const), DefId(0:662 ~ url[a8a3]::parser::Context::Setter::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:409:28: 409:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6028 ~ alloc[5873]::string::{impl#0}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ url[a8a3]::parser::{impl#5}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).90), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).91), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:426:24: 426:28 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).86)), segments: [PathSegment { ident: base#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).93), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).86)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:426:24: 426:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:426:29: 426:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:426:24: 426:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).94), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:426:41: 426:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:426:41: 426:47 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6028 ~ alloc[5873]::string::{impl#0}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:161 ~ url[a8a3]::parser::{impl#5}::count_matching)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).169), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:38: 439:39 (#0) }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:24: 439:37 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).156)), segments: [PathSegment { ident: slashes_count#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).171), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:24: 439:37 (#0) }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).172), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:40: 439:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:40: 439:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:24: 439:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).173), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:46: 440:48 (#0) }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).174), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).175), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:28: 440:36 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).162)), segments: [PathSegment { ident: base_url#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).177), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).162)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:28: 440:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:37: 440:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:28: 440:45 (#0) }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).178), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).179), kind: Index(Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).180), kind: Field(Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:50: 440:54 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).182), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:50: 440:54 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:50: 440:68 (#0) }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).183), kind: Struct(LangItem(RangeTo, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:69: 440:90 (#0)), [ExprField { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).189), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).184), kind: Cast(Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:71: 440:81 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).36)), segments: [PathSegment { ident: scheme_end#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).186), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:71: 440:81 (#0) }, Ty { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:85: 440:90 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).188), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:85: 440:90 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:71: 440:90 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:71: 440:90 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:69: 440:90 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:68: 440:91 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:50: 440:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:49: 440:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:28: 440:91 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:24: 439:37 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).156)), segments: [PathSegment { ident: slashes_count#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).171), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:24: 439:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).172), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:40: 439:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:439:40: 439:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).174), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).175), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:28: 440:36 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).162)), segments: [PathSegment { ident: base_url#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).177), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).162)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:28: 440:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:37: 440:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:28: 440:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).178), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).179), kind: Index(Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).180), kind: Field(Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:50: 440:54 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).182), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:50: 440:54 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:50: 440:68 (#0) }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).183), kind: Struct(LangItem(RangeTo, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:69: 440:90 (#0)), [ExprField { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).189), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).184), kind: Cast(Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:71: 440:81 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).36)), segments: [PathSegment { ident: scheme_end#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).186), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:71: 440:81 (#0) }, Ty { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:85: 440:90 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).188), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:85: 440:90 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:71: 440:90 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:71: 440:90 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:69: 440:90 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:68: 440:91 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:50: 440:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:440:49: 440:91 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6028 ~ alloc[5873]::string::{impl#0}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).246), kind: MethodCall(PathSegment { ident: collect#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).249), res: Err, args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).247), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:453:36: 453:42 (#0), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), segments: [PathSegment { ident: String#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).248), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:453:36: 453:42 (#0) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:453:35: 453:43 (#0) }), infer_args: false }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).250), kind: MethodCall(PathSegment { ident: take_while#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).251), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).252), kind: MethodCall(PathSegment { ident: clone#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).253), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).254), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:450:21: 450:26 (#0), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).4)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).255), res: Local(HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:450:21: 450:26 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:451:26: 451:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:450:21: 451:33 (#0) }, [Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).256), kind: Closure(Closure { def_id: DefId(0:203 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme::{closure#3}::{closure#0}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).273), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:452:38: 452:40 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:452:41: 452:41 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).260) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:452:37: 452:41 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:452:37: 452:41 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:452:37: 452:65 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:452:26: 452:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:450:21: 452:66 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:453:26: 453:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:450:21: 453:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:195 ~ url[a8a3]::parser::{impl#10}::parse_with_scheme).274), kind: Lit(Spanned { node: Str("//", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:454:28: 454:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:454:28: 454:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8929 ~ core[7d5a]::iter::traits::iterator::Iterator::take_while)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:204 ~ url[a8a3]::parser::{impl#10}::parse_non_special)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:204 ~ url[a8a3]::parser::{impl#10}::parse_non_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ url[a8a3]::parser::{impl#5}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ url[a8a3]::parser::{impl#5}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ url[a8a3]::parser::{impl#10}::parse_cannot_be_a_base_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ url[a8a3]::parser::{impl#5}::split_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:510:66: 510:76 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).39)), segments: [PathSegment { ident: first_char#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).71), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:510:66: 510:76 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).72), kind: Call(Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:510:80: 510:84 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).74), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:510:80: 510:84 (#0) }, [Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).75), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:510:85: 510:89 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:510:85: 510:89 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:510:80: 510:90 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ url[a8a3]::parser::{impl#5}::split_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:514:53: 514:62 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).83)), segments: [PathSegment { ident: next_char#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).114), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).83)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:514:53: 514:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).115), kind: Call(Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:514:66: 514:70 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).117), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:514:66: 514:70 (#0) }, [Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).118), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:514:71: 514:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:514:71: 514:75 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:514:66: 514:76 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ url[a8a3]::parser::{impl#10}::parse_file_host)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6029 ~ alloc[5873]::string::{impl#0}::drain)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ url[a8a3]::parser::{impl#10}::parse_query_and_fragment)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ url[a8a3]::parser::starts_with_windows_drive_letter_segment)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:379 ~ url[a8a3]::{impl#1}::path_segments)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:367 ~ url[a8a3]::{impl#1}::host_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).521), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:46: 574:48 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).522), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:33: 574:35 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).523), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:26: 574:28 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).524), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:25 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).525), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:25 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).526), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:29: 574:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:29: 574:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:32 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).527), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:38: 574:40 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).528), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:37 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).529), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:37 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).530), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:41: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:41: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:45 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).531), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:51: 574:53 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).532), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:49: 574:50 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).533), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:49: 574:50 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).534), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:54: 574:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:54: 574:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:49: 574:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).535), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:63: 574:65 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).536), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:61: 574:62 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).537), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:61: 574:62 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).538), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:66: 574:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:66: 574:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:61: 574:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).522), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:33: 574:35 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).523), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:26: 574:28 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).524), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:25 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).525), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:25 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).526), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:29: 574:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:29: 574:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:32 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).527), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:38: 574:40 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).528), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:37 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).529), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:37 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).530), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:41: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:41: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).531), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:51: 574:53 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).532), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:49: 574:50 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).533), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:49: 574:50 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).534), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:54: 574:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:54: 574:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:49: 574:57 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).523), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:26: 574:28 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).524), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:25 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).525), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:25 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).526), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:29: 574:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:29: 574:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).527), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:38: 574:40 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).528), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:37 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).529), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:37 (#0) }, Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).530), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:41: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:41: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:45 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).524), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:25 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).525), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:24: 574:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).526), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:29: 574:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:29: 574:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).528), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:37 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).529), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:36: 574:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).530), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:41: 574:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:41: 574:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).532), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:49: 574:50 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).533), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:49: 574:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).534), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:54: 574:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:54: 574:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).536), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:61: 574:62 (#0), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).537), res: Local(HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).515)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:61: 574:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:205 ~ url[a8a3]::parser::{impl#10}::parse_file).538), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:66: 574:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:574:66: 574:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ url[a8a3]::parser::{impl#10}::parse_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ url[a8a3]::parser::{impl#10}::parse_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ url[a8a3]::parser::starts_with_windows_drive_letter_segment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ url[a8a3]::parser::{impl#10}::parse_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ url[a8a3]::parser::{impl#10}::parse_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ url[a8a3]::parser::{impl#5}::split_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ url[a8a3]::parser::{impl#10}::parse_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:161 ~ url[a8a3]::parser::{impl#5}::count_matching)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).265), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:752:20: 752:33 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).260)), segments: [PathSegment { ident: slashes_count#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).266), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).260)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:752:20: 752:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).267), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:752:37: 752:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:752:37: 752:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).279), kind: MethodCall(PathSegment { ident: collect#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).282), res: Err, args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:757:40: 757:46 (#0), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), segments: [PathSegment { ident: String#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).281), res: Def(Struct, DefId(5:8016 ~ alloc[5873]::string::String)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:757:40: 757:46 (#0) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:757:39: 757:47 (#0) }), infer_args: false }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).283), kind: MethodCall(PathSegment { ident: take_while#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).284), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).285), kind: MethodCall(PathSegment { ident: clone#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).286), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).287), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:754:25: 754:30 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).4)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).288), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:754:25: 754:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:755:30: 755:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:754:25: 755:37 (#0) }, [Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).289), kind: Closure(Closure { def_id: DefId(0:212 ~ url[a8a3]::parser::{impl#10}::parse_relative::{closure#1}::{closure#0}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).306), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:756:42: 756:44 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:756:45: 756:45 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).293) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:756:41: 756:45 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:756:41: 756:45 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:756:41: 756:69 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:756:30: 756:70 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:754:25: 756:70 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:757:30: 757:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:754:25: 757:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).307), kind: Lit(Spanned { node: Str("//", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:758:32: 758:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:758:32: 758:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8929 ~ core[7d5a]::iter::traits::iterator::Iterator::take_while)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).322), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).323), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:761:35: 761:43 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), segments: [PathSegment { ident: base_url#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).325), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:761:35: 761:43 (#0) }, [Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:761:52: 761:62 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).315)), segments: [PathSegment { ident: scheme_end#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).327), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).315)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:761:52: 761:62 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:761:44: 761:63 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:761:35: 761:63 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).328), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:761:67: 761:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:761:67: 761:71 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).353), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:763:52: 763:62 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).315)), segments: [PathSegment { ident: scheme_end#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).354), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).315)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:763:52: 763:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).355), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:763:65: 763:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:763:65: 763:66 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ url[a8a3]::parser::{impl#5}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).542), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:45: 800:47 (#0) }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).543), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).544), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).545), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).546), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:24 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).547), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:24 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:39: 800:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:44 (#0) }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).548), kind: Cast(Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).549), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).550), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:48: 800:56 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), segments: [PathSegment { ident: base_url#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).551), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:48: 800:56 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:48: 800:67 (#0) }, Ty { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).552), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:71: 800:76 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).553), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:71: 800:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:48: 800:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:76 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).554), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:74: 801:76 (#0) }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).555), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).556), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).557), kind: Call(Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).558), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).560), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:35 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).559), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:35 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).561), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:41 (#0) }, [Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).562), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).563), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).564), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:42: 801:50 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), segments: [PathSegment { ident: base_url#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).565), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:42: 801:50 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:51: 801:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:42: 801:59 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:60 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:61: 801:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:73 (#0) }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).566), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).567), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).568), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).569), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:78: 801:83 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).4)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).570), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:78: 801:83 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:84: 801:94 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:78: 801:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:77: 801:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:24: 801:95 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).543), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).544), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).545), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).546), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:24 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).547), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:24 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:39: 800:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:20: 800:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).548), kind: Cast(Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).549), kind: Field(Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).550), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:48: 800:56 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), segments: [PathSegment { ident: base_url#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).551), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:48: 800:56 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:48: 800:67 (#0) }, Ty { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).552), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:71: 800:76 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).553), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:71: 800:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:800:48: 800:76 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).555), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).556), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).557), kind: Call(Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).558), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).560), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:35 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).559), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:35 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).561), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:41 (#0) }, [Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).562), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).563), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).564), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:42: 801:50 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), segments: [PathSegment { ident: base_url#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).565), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:42: 801:50 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:51: 801:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:42: 801:59 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:60 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:61: 801:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:25: 801:73 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).566), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).567), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).568), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).569), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:78: 801:83 (#0), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).4)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).570), res: Local(HirId(DefId(0:209 ~ url[a8a3]::parser::{impl#10}::parse_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:78: 801:83 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:84: 801:94 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:78: 801:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:801:77: 801:94 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ url[a8a3]::parser::{impl#5}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ url[a8a3]::parser::{impl#5}::split_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:842:29: 842:45 (#0), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).30)), segments: [PathSegment { ident: before_authority#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).65), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:842:29: 842:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).66), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).67), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).68), kind: Field(Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:842:49: 842:53 (#0), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).70), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:842:49: 842:53 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:842:49: 842:67 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:842:68: 842:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:842:49: 842:73 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:216 ~ url[a8a3]::parser::{impl#10}::parse_host_and_port)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).139), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:17: 847:19 (#0) }, Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:12: 847:16 (#0), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).133)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).141), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).133)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:12: 847:16 (#0) }, Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:20: 847:38 (#0), res: Def(Ctor(Variant, Const), DefId(0:481 ~ url[a8a3]::host::HostInternal::None::{constructor#0})), segments: [PathSegment { ident: HostInternal#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).143), res: Def(Enum, DefId(0:479 ~ url[a8a3]::host::HostInternal)), args: None, infer_args: true }, PathSegment { ident: None#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).144), res: Def(Ctor(Variant, Const), DefId(0:481 ~ url[a8a3]::host::HostInternal::None::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:20: 847:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:12: 847:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:42: 847:55 (#0), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).72)), segments: [PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).146), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:42: 847:55 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:12: 847:16 (#0), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).133)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).141), res: Local(HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).133)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:12: 847:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:20: 847:38 (#0), res: Def(Ctor(Variant, Const), DefId(0:481 ~ url[a8a3]::host::HostInternal::None::{constructor#0})), segments: [PathSegment { ident: HostInternal#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).143), res: Def(Enum, DefId(0:479 ~ url[a8a3]::host::HostInternal)), args: None, infer_args: true }, PathSegment { ident: None#0, hir_id: HirId(DefId(0:213 ~ url[a8a3]::parser::{impl#10}::after_double_slash).144), res: Def(Ctor(Variant, Const), DefId(0:481 ~ url[a8a3]::host::HostInternal::None::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:847:20: 847:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ url[a8a3]::parser::{impl#5}::split_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).174), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:45: 899:47 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).175), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:33: 899:35 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).176), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:26: 899:28 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).177), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:25 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).178), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:25 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).179), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:29: 899:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:29: 899:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:32 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).180), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:38: 899:40 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:37 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).182), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:37 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).183), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:41: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:41: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:44 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).184), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:50: 899:52 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:48: 899:49 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).186), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:48: 899:49 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).187), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:53: 899:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:53: 899:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:48: 899:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).188), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:86: 899:88 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).189), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).190), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:61: 899:72 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).6)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).192), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:61: 899:72 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:73: 899:85 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:61: 899:85 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).193), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:91: 899:93 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:89: 899:90 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).195), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:89: 899:90 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).196), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:94: 899:98 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:94: 899:98 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:89: 899:98 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:60: 899:99 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).175), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:33: 899:35 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).176), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:26: 899:28 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).177), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:25 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).178), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:25 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).179), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:29: 899:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:29: 899:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:32 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).180), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:38: 899:40 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:37 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).182), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:37 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).183), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:41: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:41: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).184), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:50: 899:52 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:48: 899:49 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).186), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:48: 899:49 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).187), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:53: 899:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:53: 899:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:48: 899:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).176), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:26: 899:28 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).177), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:25 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).178), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:25 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).179), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:29: 899:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:29: 899:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).180), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:38: 899:40 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:37 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).182), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:37 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).183), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:41: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:41: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).177), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:25 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).178), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:24: 899:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).179), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:29: 899:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:29: 899:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:37 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).182), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:36: 899:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).183), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:41: 899:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:41: 899:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:48: 899:49 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).186), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:48: 899:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).187), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:53: 899:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:53: 899:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).189), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).190), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:61: 899:72 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).6)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).192), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:61: 899:72 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:73: 899:85 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:61: 899:85 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).193), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:91: 899:93 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:89: 899:90 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).195), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:89: 899:90 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).196), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:94: 899:98 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:94: 899:98 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:89: 899:98 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:89: 899:90 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).195), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).164)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:89: 899:90 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).196), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:94: 899:98 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:899:94: 899:98 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:911:15: 911:34 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).253)), segments: [PathSegment { ident: userinfo_char_count#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).272), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).253)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:911:15: 911:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).273), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:911:37: 911:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:911:37: 911:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ url[a8a3]::parser::{impl#5}::next_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).293), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:18: 914:20 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).294), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:16: 914:17 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).283)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).295), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).283)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:16: 914:17 (#0) }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).296), kind: Lit(Spanned { node: Char(':'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:21: 914:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:21: 914:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:16: 914:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).297), kind: MethodCall(PathSegment { ident: is_none#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).298), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).299), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:28: 914:40 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).260)), segments: [PathSegment { ident: username_end#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).300), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).260)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:28: 914:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:41: 914:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:28: 914:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).294), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:16: 914:17 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).283)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).295), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).283)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:16: 914:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).296), kind: Lit(Spanned { node: Char(':'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:21: 914:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:914:21: 914:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).337), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:918:20: 918:39 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).253)), segments: [PathSegment { ident: userinfo_char_count#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).338), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).253)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:918:20: 918:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).339), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:918:42: 918:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:918:42: 918:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).447), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:935:12: 935:24 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).268)), segments: [PathSegment { ident: has_username#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).448), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).268)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:935:12: 935:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).449), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:935:28: 935:40 (#0), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).264)), segments: [PathSegment { ident: has_password#0, hir_id: HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).450), res: Local(HirId(DefId(0:214 ~ url[a8a3]::parser::{impl#10}::parse_userinfo).264)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:935:28: 935:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:216 ~ url[a8a3]::parser::{impl#10}::parse_host_and_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11086 ~ core[7d5a]::fmt::Write::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ url[a8a3]::parser::{impl#5}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ url[a8a3]::parser::{impl#5}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ url[a8a3]::parser::default_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11086 ~ core[7d5a]::fmt::Write::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ url[a8a3]::parser::{impl#10}::get_file_host)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:13619 ~ core[7d5a]::str::iter::{impl#4}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5304 ~ core[7d5a]::char::methods::{impl#0}::len_utf8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).247), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:24: 1020:26 (#0) }, Expr { hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:12: 1020:23 (#0), res: Local(HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).4)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).249), res: Local(HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:12: 1020:23 (#0) }, Expr { hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:27: 1020:53 (#0), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).251), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: SpecialNotFile#0, hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).252), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:27: 1020:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:12: 1020:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).253), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).254), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).255), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:57: 1020:65 (#0), res: Local(HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).169)), segments: [PathSegment { ident: host_str#0, hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).256), res: Local(HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).169)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:57: 1020:65 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:66: 1020:76 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:57: 1020:76 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:12: 1020:23 (#0), res: Local(HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).4)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).249), res: Local(HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:12: 1020:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:27: 1020:53 (#0), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).251), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: SpecialNotFile#0, hir_id: HirId(DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host).252), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1020:27: 1020:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ url[a8a3]::host::{impl#2}::parse_opaque)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ url[a8a3]::host::{impl#2}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:220 ~ url[a8a3]::parser::{impl#10}::get_file_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ url[a8a3]::parser::{impl#10}::file_host)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ url[a8a3]::host::{impl#2}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:221 ~ url[a8a3]::parser::{impl#10}::parse_file_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ url[a8a3]::parser::{impl#10}::file_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ url[a8a3]::host::{impl#2}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11086 ~ core[7d5a]::fmt::Write::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ url[a8a3]::parser::{impl#10}::file_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13619 ~ core[7d5a]::str::iter::{impl#4}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5304 ~ core[7d5a]::char::methods::{impl#0}::len_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8952 ~ core[7d5a]::iter::traits::iterator::Iterator::by_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ url[a8a3]::parser::{impl#5}::split_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:5299 ~ core[7d5a]::char::methods::{impl#0}::to_digit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).42), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:29: 1111:30 (#0) }, Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:24: 1111:28 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).12)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).44), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:24: 1111:28 (#0) }, Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).45), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:31: 1111:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:31: 1111:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:24: 1111:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:36: 1111:41 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).31)), segments: [PathSegment { ident: digit#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).47), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).31)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:36: 1111:41 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:24: 1111:28 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).12)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).44), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:24: 1111:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).45), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:31: 1111:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1111:31: 1111:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1112:20: 1112:24 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).12)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).52), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1112:20: 1112:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).53), kind: Cast(Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).54), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1112:27: 1112:30 (#0), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).55), res: PrimTy(Uint(U16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1112:27: 1112:30 (#0) }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).57), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1112:27: 1112:35 (#0) }, Ty { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1112:39: 1112:42 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).59), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1112:39: 1112:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1112:27: 1112:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).81), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:31: 1116:33 (#0) }, Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:23: 1116:30 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).6)), segments: [PathSegment { ident: context#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).83), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:23: 1116:30 (#0) }, Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:34: 1116:52 (#0), res: Def(Ctor(Variant, Const), DefId(0:660 ~ url[a8a3]::parser::Context::UrlParser::{constructor#0})), segments: [PathSegment { ident: Context#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).85), res: Def(Enum, DefId(0:658 ~ url[a8a3]::parser::Context)), args: None, infer_args: true }, PathSegment { ident: UrlParser#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).86), res: Def(Ctor(Variant, Const), DefId(0:660 ~ url[a8a3]::parser::Context::UrlParser::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:34: 1116:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:23: 1116:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).87), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).88), kind: Match(Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:66: 1116:67 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).20)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).90), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:66: 1116:67 (#0) }, [Arm { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).100), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#119), pat: Pat { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).99), kind: Or([Pat { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).92), kind: Lit(Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).91), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:69: 1116:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:69: 1116:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:69: 1116:72 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).94), kind: Lit(Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).93), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:75: 1116:79 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:75: 1116:79 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:75: 1116:79 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).96), kind: Lit(Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).95), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:82: 1116:85 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:82: 1116:85 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:82: 1116:85 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).98), kind: Lit(Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).97), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:88: 1116:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:88: 1116:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:88: 1116:91 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:69: 1116:91 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).101), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#119) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#119) } }, Arm { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).103), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#119), pat: Pat { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).102), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#119), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).104), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#119) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#119) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#119) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:56: 1116:92 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:23: 1116:30 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).6)), segments: [PathSegment { ident: context#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).83), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:23: 1116:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:34: 1116:52 (#0), res: Def(Ctor(Variant, Const), DefId(0:660 ~ url[a8a3]::parser::Context::UrlParser::{constructor#0})), segments: [PathSegment { ident: Context#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).85), res: Def(Enum, DefId(0:658 ~ url[a8a3]::parser::Context)), args: None, infer_args: true }, PathSegment { ident: UrlParser#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).86), res: Def(Ctor(Variant, Const), DefId(0:660 ~ url[a8a3]::parser::Context::UrlParser::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1116:34: 1116:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).149), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:13: 1124:26 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).16)), segments: [PathSegment { ident: has_any_digit#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).151), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:13: 1124:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:12: 1124:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).152), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:39: 1124:41 (#0) }, Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:30: 1124:38 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).146)), segments: [PathSegment { ident: opt_port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).154), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).146)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:30: 1124:38 (#0) }, Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).155), kind: Call(Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:54 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).4)), segments: [PathSegment { ident: default_port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).157), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:54 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:30: 1124:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:30: 1124:38 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).146)), segments: [PathSegment { ident: opt_port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).154), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).146)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:30: 1124:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).155), kind: Call(Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:54 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).4)), segments: [PathSegment { ident: default_port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).157), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:54 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:56 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:54 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).4)), segments: [PathSegment { ident: default_port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).157), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:54 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:160 ~ url[a8a3]::parser::{impl#5}::split_first)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1140:16: 1140:23 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).35), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1140:16: 1140:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).36), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1140:27: 1140:31 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).38), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1140:27: 1140:31 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).39), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1140:32: 1140:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1140:32: 1140:36 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1140:27: 1140:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).70), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:28: 1148:30 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:20: 1148:27 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).72), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:20: 1148:27 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).73), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:31: 1148:35 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).75), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:31: 1148:35 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).76), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:36: 1148:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:36: 1148:39 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:31: 1148:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:20: 1148:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).77), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:52: 1148:54 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:44: 1148:51 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).79), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:44: 1148:51 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).80), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:55: 1148:59 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).82), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:55: 1148:59 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).83), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:60: 1148:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:60: 1148:64 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:55: 1148:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:44: 1148:65 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:20: 1148:27 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).72), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:20: 1148:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).73), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:31: 1148:35 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).75), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:31: 1148:35 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).76), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:36: 1148:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:36: 1148:39 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:31: 1148:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:44: 1148:51 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).79), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:44: 1148:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).80), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:55: 1148:59 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).82), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:55: 1148:59 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).83), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:60: 1148:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:60: 1148:64 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1148:55: 1148:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).122), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:27: 1153:29 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:19: 1153:26 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).124), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:19: 1153:26 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).125), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).126), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:30: 1153:34 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).127), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:30: 1153:34 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).128), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:35: 1153:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:35: 1153:38 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:30: 1153:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:19: 1153:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).129), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:51: 1153:53 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:43: 1153:50 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).131), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:43: 1153:50 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).132), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:54: 1153:58 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).134), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:54: 1153:58 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).135), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:59: 1153:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:59: 1153:62 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:54: 1153:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:43: 1153:63 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:19: 1153:26 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).124), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:19: 1153:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).125), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).126), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:30: 1153:34 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).127), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:30: 1153:34 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).128), kind: Lit(Spanned { node: Char('?'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:35: 1153:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:35: 1153:38 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:30: 1153:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:43: 1153:50 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).131), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:43: 1153:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).132), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:54: 1153:58 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).134), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:54: 1153:58 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).135), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:59: 1153:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:59: 1153:62 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1153:54: 1153:63 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).146), kind: MethodCall(PathSegment { ident: is_some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).147), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:12: 1162:19 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).149), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:12: 1162:19 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:20: 1162:29 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:12: 1162:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).150), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:41: 1162:43 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:33: 1162:40 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).152), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:33: 1162:40 (#0) }, Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).153), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:44: 1162:48 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).155), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:44: 1162:48 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).156), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:49: 1162:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:49: 1162:52 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:44: 1162:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:33: 1162:53 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:33: 1162:40 (#0), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), segments: [PathSegment { ident: maybe_c#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).152), res: Local(HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:33: 1162:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).153), kind: Call(Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:44: 1162:48 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).155), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:44: 1162:48 (#0) }, [Expr { hir_id: HirId(DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start).156), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:49: 1162:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:49: 1162:52 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1162:44: 1162:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ url[a8a3]::parser::{impl#5}::next_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).161), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:29: 1208:31 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).162), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).163), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:28: 1207:39 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).4)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).165), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:28: 1207:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:40: 1207:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:28: 1207:49 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).166), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:57: 1208:58 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).167), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).168), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).169), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:36 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).171), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:36 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:50 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:51: 1208:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:56 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).172), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:59: 1208:69 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).173), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:59: 1208:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:28: 1208:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).174), kind: Call(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1209:32: 1209:66 (#0), res: Def(Fn, DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)), segments: [PathSegment { ident: is_normalized_windows_drive_letter#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).176), res: Def(Fn, DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1209:32: 1209:66 (#0) }, [Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).177), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).178), kind: Index(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).179), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:34: 1210:38 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).181), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:34: 1210:38 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:34: 1210:52 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).182), kind: Struct(LangItem(RangeFrom, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:53: 1210:69 (#0)), [ExprField { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).187), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).183), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:64: 1210:65 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:53: 1210:63 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).185), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:53: 1210:63 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).186), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:66: 1210:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:66: 1210:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:53: 1210:67 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:53: 1210:67 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:53: 1210:69 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:52: 1210:70 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:34: 1210:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1210:33: 1210:70 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1209:32: 1211:30 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).162), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).163), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:28: 1207:39 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).4)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).165), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:28: 1207:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:40: 1207:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1207:28: 1207:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).166), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:57: 1208:58 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).167), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).168), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).169), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:36 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).171), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:36 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:50 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:51: 1208:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:56 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).172), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:59: 1208:69 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).173), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:59: 1208:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).167), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).168), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).169), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).170), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:36 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).171), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:36 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:50 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:51: 1208:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:32: 1208:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).172), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:59: 1208:69 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).173), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1208:59: 1208:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).206), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1216:28: 1216:32 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).208), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1216:28: 1216:32 (#0) }, context#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1216:28: 1216:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1216:44: 1216:70 (#0), res: Def(Ctor(Variant, Const), DefId(0:664 ~ url[a8a3]::parser::Context::PathSegmentSetter::{constructor#0})), segments: [PathSegment { ident: Context#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).210), res: Def(Enum, DefId(0:658 ~ url[a8a3]::parser::Context)), args: None, infer_args: true }, PathSegment { ident: PathSegmentSetter#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).211), res: Def(Ctor(Variant, Const), DefId(0:664 ~ url[a8a3]::parser::Context::PathSegmentSetter::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1216:44: 1216:70 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).342), kind: Index(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).343), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).344), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).345), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).346), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:35: 1239:39 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).347), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:35: 1239:39 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:35: 1239:53 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:54: 1239:64 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:35: 1239:64 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).348), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:79: 1239:80 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).349), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:65: 1239:78 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).19)), segments: [PathSegment { ident: segment_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).350), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:65: 1239:78 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).351), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:81: 1239:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:81: 1239:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:65: 1239:82 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:64: 1239:83 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:35: 1239:83 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).352), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:87: 1239:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1239:87: 1239:91 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).376), kind: MethodCall(PathSegment { ident: ends_with#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).377), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).378), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).379), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1241:24: 1241:28 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).380), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1241:24: 1241:28 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1241:24: 1241:42 (#0) }, [Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).381), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1241:53: 1241:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1241:53: 1241:56 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1241:43: 1241:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1241:24: 1241:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).382), kind: Call(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).383), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).386), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:28: 1242:34 (#0), res: Def(Struct, DefId(0:179 ~ url[a8a3]::parser::Parser)), segments: [PathSegment { ident: Parser#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).385), res: Def(Struct, DefId(0:179 ~ url[a8a3]::parser::Parser)), args: Some(GenericArgs { args: [Lifetime(Lifetime { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).384), ident: #0, res: Infer })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:61: 1242:61 (#0) }), infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:28: 1242:34 (#0) }, PathSegment { ident: last_slash_can_be_removed#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).387), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:28: 1242:61 (#0) }, [Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).388), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).389), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).390), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:63: 1242:67 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).391), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:63: 1242:67 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:63: 1242:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:62: 1242:81 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).392), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:83: 1242:93 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).393), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:83: 1242:93 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1242:28: 1242:94 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6004 ~ alloc[5873]::string::{impl#0}::pop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).415), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:24: 1249:39 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).23)), segments: [PathSegment { ident: ends_with_slash#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).416), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:24: 1249:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).417), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).418), kind: MethodCall(PathSegment { ident: ends_with#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).419), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).420), kind: Field(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).421), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:44: 1249:48 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).422), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:44: 1249:48 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:44: 1249:62 (#0) }, [Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).423), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:73: 1249:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:73: 1249:76 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:63: 1249:77 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:44: 1249:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1249:43: 1249:77 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).476), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:25: 1264:27 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).477), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).478), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).479), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:24: 1263:35 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).4)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).480), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:24: 1263:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:36: 1263:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:24: 1263:45 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).481), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:42: 1264:44 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).482), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:28: 1264:41 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).19)), segments: [PathSegment { ident: segment_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).483), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:28: 1264:41 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).484), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:56: 1264:57 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:55 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).486), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:55 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).487), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:58: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:58: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:28: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:24: 1264:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).488), kind: Call(Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).489), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1265:28: 1265:51 (#0), res: Def(Fn, DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)), segments: [PathSegment { ident: is_windows_drive_letter#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).490), res: Def(Fn, DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1265:28: 1265:51 (#0) }, [Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).491), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1265:52: 1265:72 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).311)), segments: [PathSegment { ident: segment_before_slash#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).492), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).311)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1265:52: 1265:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1265:28: 1265:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).477), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).478), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).479), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:24: 1263:35 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).4)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).480), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:24: 1263:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:36: 1263:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1263:24: 1263:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).481), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:42: 1264:44 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).482), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:28: 1264:41 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).19)), segments: [PathSegment { ident: segment_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).483), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:28: 1264:41 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).484), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:56: 1264:57 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:55 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).486), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:55 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).487), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:58: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:58: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:28: 1264:59 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).482), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:28: 1264:41 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).19)), segments: [PathSegment { ident: segment_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).483), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:28: 1264:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).484), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:56: 1264:57 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:55 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).486), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:55 (#0) }, Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).487), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:58: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:58: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:55 (#0), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).486), res: Local(HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:45: 1264:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path).487), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:58: 1264:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1264:58: 1264:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6027 ~ alloc[5873]::string::{impl#0}::split_off)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14390 ~ core[7d5a]::str::{impl#0}::trim_start_matches)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14343 ~ core[7d5a]::str::{impl#0}::rfind)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).31), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:34: 1306:36 (#0) }, Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:13: 1306:33 (#0), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).23)), segments: [PathSegment { ident: segment_before_start#0, hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).33), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:13: 1306:33 (#0) }, Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:37: 1306:47 (#0), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).4)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).35), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:37: 1306:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:13: 1306:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).36), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).37), kind: Call(Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:21: 1308:58 (#0), res: Def(Fn, DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter)), segments: [PathSegment { ident: path_starts_with_windows_drive_letter#0, hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).39), res: Def(Fn, DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:21: 1308:58 (#0) }, [Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).40), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).41), kind: Index(Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:60: 1308:73 (#0), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).2)), segments: [PathSegment { ident: serialization#0, hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).43), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:60: 1308:73 (#0) }, Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).44), kind: Struct(LangItem(RangeFrom, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:74: 1308:96 (#0)), [ExprField { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).47), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:74: 1308:94 (#0), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).23)), segments: [PathSegment { ident: segment_before_start#0, hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).46), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:74: 1308:94 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:74: 1308:94 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:74: 1308:96 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:73: 1308:97 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:60: 1308:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:59: 1308:97 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:21: 1308:98 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1308:20: 1308:98 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:13: 1306:33 (#0), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).23)), segments: [PathSegment { ident: segment_before_start#0, hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).33), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).23)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:13: 1306:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:37: 1306:47 (#0), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).4)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).35), res: Local(HirId(DefId(0:230 ~ url[a8a3]::parser::{impl#10}::last_slash_can_be_removed).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1306:37: 1306:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).11), kind: Field(Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1317:12: 1317:16 (#0), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).13), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1317:12: 1317:16 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1317:12: 1317:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1317:31: 1317:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1317:12: 1317:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1317:40: 1317:50 (#0), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).6)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).15), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1317:40: 1317:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).24), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).25), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1321:12: 1321:23 (#0), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).4)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).27), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1321:12: 1321:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1321:24: 1321:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1321:12: 1321:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).28), kind: Call(Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:16: 1322:50 (#0), res: Def(Fn, DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)), segments: [PathSegment { ident: is_normalized_windows_drive_letter#0, hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).30), res: Def(Fn, DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:16: 1322:50 (#0) }, [Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).31), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).32), kind: Index(Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).33), kind: Field(Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:52: 1322:56 (#0), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).35), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:52: 1322:56 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:52: 1322:70 (#0) }, Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).36), kind: Struct(LangItem(RangeFrom, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:71: 1322:83 (#0)), [ExprField { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).39), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:71: 1322:81 (#0), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).6)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).38), res: Local(HirId(DefId(0:231 ~ url[a8a3]::parser::{impl#10}::shorten_path).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:71: 1322:81 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:71: 1322:81 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:71: 1322:83 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:70: 1322:84 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:52: 1322:84 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:51: 1322:84 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1322:16: 1322:85 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).11), kind: Field(Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1332:12: 1332:16 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).13), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1332:12: 1332:16 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1332:12: 1332:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1332:31: 1332:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1332:12: 1332:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1332:39: 1332:49 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).6)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).15), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1332:39: 1332:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14343 ~ core[7d5a]::str::{impl#0}::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).35), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:44: 1335:45 (#0) }, Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:33: 1335:43 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).6)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).37), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:33: 1335:43 (#0) }, Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:46: 1335:60 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).32)), segments: [PathSegment { ident: slash_position#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).39), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:46: 1335:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:33: 1335:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).40), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:63: 1335:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:63: 1335:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:33: 1335:43 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).6)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).37), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:33: 1335:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:46: 1335:60 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).32)), segments: [PathSegment { ident: slash_position#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).39), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1335:46: 1335:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).46), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).47), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1337:18: 1337:29 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).4)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).49), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1337:18: 1337:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1337:30: 1337:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1337:18: 1337:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).50), kind: Call(Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:20: 1338:54 (#0), res: Def(Fn, DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)), segments: [PathSegment { ident: is_normalized_windows_drive_letter#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).52), res: Def(Fn, DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:20: 1338:54 (#0) }, [Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).53), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).54), kind: Index(Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).55), kind: Field(Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:56: 1338:60 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).57), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:56: 1338:60 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:56: 1338:74 (#0) }, Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).58), kind: Struct(LangItem(RangeFrom, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:75: 1338:90 (#0)), [ExprField { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).61), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:75: 1338:88 (#0), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).42)), segments: [PathSegment { ident: segment_start#0, hir_id: HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).60), res: Local(HirId(DefId(0:232 ~ url[a8a3]::parser::{impl#10}::pop_path).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:75: 1338:88 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:75: 1338:88 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:75: 1338:90 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:74: 1338:91 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:56: 1338:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:55: 1338:91 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1338:20: 1338:92 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ url[a8a3]::parser::{impl#10}::parse_cannot_be_a_base_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ url[a8a3]::parser::{impl#5}::next_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:12: 1385:31 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), segments: [PathSegment { ident: path_start_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).40), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:12: 1385:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).41), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:55: 1385:56 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:35: 1385:54 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), segments: [PathSegment { ident: scheme_end_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).43), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:35: 1385:54 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).44), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:57: 1385:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:57: 1385:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:35: 1385:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:35: 1385:54 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), segments: [PathSegment { ident: scheme_end_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).43), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:35: 1385:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).44), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:57: 1385:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1385:57: 1385:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6023 ~ alloc[5873]::string::{impl#0}::insert_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).104), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:39: 1394:41 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:19: 1394:38 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), segments: [PathSegment { ident: path_start_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).106), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:19: 1394:38 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).107), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:62: 1394:63 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:42: 1394:61 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), segments: [PathSegment { ident: scheme_end_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).109), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:42: 1394:61 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).110), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:64: 1394:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:64: 1394:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:42: 1394:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:19: 1394:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).111), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:78: 1395:80 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).112), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).113), kind: Index(Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).114), kind: Field(Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:17: 1395:21 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).116), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:17: 1395:21 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:17: 1395:35 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).117), kind: Struct(LangItem(Range, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:76 (#0)), [ExprField { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).120), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:55 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), segments: [PathSegment { ident: scheme_end_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).119), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:55 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:55 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).123), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:57: 1395:76 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), segments: [PathSegment { ident: path_start_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).122), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:57: 1395:76 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:57: 1395:76 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:76 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:35: 1395:77 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:17: 1395:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:16: 1395:77 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).124), kind: Lit(Spanned { node: Str(":/.", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:81: 1395:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:81: 1395:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:16: 1395:86 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:19: 1394:38 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), segments: [PathSegment { ident: path_start_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).106), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:19: 1394:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).107), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:62: 1394:63 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:42: 1394:61 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), segments: [PathSegment { ident: scheme_end_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).109), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:42: 1394:61 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).110), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:64: 1394:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:64: 1394:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:42: 1394:65 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:42: 1394:61 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), segments: [PathSegment { ident: scheme_end_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).109), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:42: 1394:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).110), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:64: 1394:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1394:64: 1394:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).112), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).113), kind: Index(Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).114), kind: Field(Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:17: 1395:21 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).116), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:17: 1395:21 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:17: 1395:35 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).117), kind: Struct(LangItem(Range, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:76 (#0)), [ExprField { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).120), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:55 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), segments: [PathSegment { ident: scheme_end_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).119), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:55 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:55 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).123), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:57: 1395:76 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), segments: [PathSegment { ident: path_start_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).122), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:57: 1395:76 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:57: 1395:76 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:36: 1395:76 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:35: 1395:77 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:17: 1395:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:16: 1395:77 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).124), kind: Lit(Spanned { node: Str(":/.", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:81: 1395:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1395:81: 1395:86 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).147), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#126), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).139)), segments: [PathSegment { ident: left_val#126, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).149), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#126) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#126) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).150), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#126), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).140)), segments: [PathSegment { ident: right_val#126, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).152), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).140)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#126) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#126) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).189), kind: MethodCall(PathSegment { ident: copied#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).190), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).191), kind: MethodCall(PathSegment { ident: get#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).192), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).193), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).194), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).195), kind: Field(Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1400:16: 1400:20 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).197), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1400:16: 1400:20 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1400:16: 1401:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1402:18: 1402:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1400:16: 1402:28 (#0) }, [Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).198), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:42: 1403:43 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:22: 1403:41 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), segments: [PathSegment { ident: path_start_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).200), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:22: 1403:41 (#0) }, Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).201), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:44: 1403:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:44: 1403:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:22: 1403:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:18: 1403:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1400:16: 1403:46 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1404:18: 1404:26 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1400:16: 1404:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).202), kind: Call(Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).203), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1405:20: 1405:24 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).204), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1405:20: 1405:24 (#0) }, [Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).205), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1405:25: 1405:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1405:25: 1405:29 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1405:20: 1405:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9729 ~ core[7d5a]::option::{impl#2}::copied)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:22: 1403:41 (#0), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), segments: [PathSegment { ident: path_start_as_usize#0, hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).200), res: Local(HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:22: 1403:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:235 ~ url[a8a3]::parser::{impl#10}::with_query_and_fragment).201), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:44: 1403:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1403:44: 1403:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6031 ~ alloc[5873]::string::{impl#0}::replace_range)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ url[a8a3]::parser::{impl#10}::parse_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ url[a8a3]::parser::{impl#10}::parse_query_and_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13619 ~ core[7d5a]::str::iter::{impl#4}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5964 ~ alloc[5873]::string::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).45), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:18: 1472:20 (#0) }, Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:16: 1472:17 (#0), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).37)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).47), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:16: 1472:17 (#0) }, Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).48), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:21: 1472:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:21: 1472:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:16: 1472:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).49), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:41: 1472:43 (#0) }, Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).50), kind: Field(Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:28: 1472:32 (#0), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).52), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:28: 1472:32 (#0) }, context#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:28: 1472:40 (#0) }, Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:44: 1472:62 (#0), res: Def(Ctor(Variant, Const), DefId(0:660 ~ url[a8a3]::parser::Context::UrlParser::{constructor#0})), segments: [PathSegment { ident: Context#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).54), res: Def(Enum, DefId(0:658 ~ url[a8a3]::parser::Context)), args: None, infer_args: true }, PathSegment { ident: UrlParser#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).55), res: Def(Ctor(Variant, Const), DefId(0:660 ~ url[a8a3]::parser::Context::UrlParser::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:44: 1472:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:28: 1472:62 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:16: 1472:17 (#0), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).37)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).47), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:16: 1472:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).48), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:21: 1472:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:21: 1472:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).50), kind: Field(Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:28: 1472:32 (#0), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).52), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:28: 1472:32 (#0) }, context#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:28: 1472:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:44: 1472:62 (#0), res: Def(Ctor(Variant, Const), DefId(0:660 ~ url[a8a3]::parser::Context::UrlParser::{constructor#0})), segments: [PathSegment { ident: Context#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).54), res: Def(Enum, DefId(0:658 ~ url[a8a3]::parser::Context)), args: None, infer_args: true }, PathSegment { ident: UrlParser#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).55), res: Def(Ctor(Variant, Const), DefId(0:660 ~ url[a8a3]::parser::Context::UrlParser::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1472:44: 1472:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1486:13: 1486:14 (#0), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).135)), segments: [PathSegment { ident: o#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).141), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).135)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1486:13: 1486:14 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:34 ~ percent_encoding[200d]::percent_encode)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5994 ~ alloc[5873]::string::{impl#0}::reserve)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).63), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).64), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:22: 1506:37 (#0), res: Local(HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).33)), segments: [PathSegment { ident: before_fragment#0, hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).66), res: Local(HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:22: 1506:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:38: 1506:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:22: 1506:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).67), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).68), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).69), kind: MethodCall(PathSegment { ident: as_str#0, hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).70), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).71), kind: Field(Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:46: 1506:51 (#0), res: Local(HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).6)), segments: [PathSegment { ident: input#0, hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).73), res: Local(HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:46: 1506:51 (#0) }, chars#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:46: 1506:57 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:58: 1506:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:46: 1506:66 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:67: 1506:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1506:46: 1506:72 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13619 ~ core[7d5a]::str::iter::{impl#4}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1510:23: 1510:27 (#0), res: Local(HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).96)), segments: [PathSegment { ident: next#0, hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).104), res: Local(HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).96)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1510:23: 1510:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).105), kind: Call(Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1510:31: 1510:35 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).107), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1510:31: 1510:35 (#0) }, [Expr { hir_id: HirId(DefId(0:239 ~ url[a8a3]::parser::{impl#10}::fragment_only).108), kind: Lit(Spanned { node: Char('#'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1510:36: 1510:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1510:36: 1510:39 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1510:31: 1510:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ url[a8a3]::parser::{impl#5}::next_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1521:16: 1521:17 (#0), res: Local(HirId(DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment).8)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment).19), res: Local(HirId(DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1521:16: 1521:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment).20), kind: Lit(Spanned { node: Char('\0'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1521:21: 1521:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1521:21: 1521:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1533:16: 1533:17 (#0), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).4)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).18), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1533:16: 1533:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).19), kind: Lit(Spanned { node: Char('%'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1533:21: 1533:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1533:21: 1533:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1538:21: 1538:24 (#0), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).10)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).64), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1538:21: 1538:24 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:242 ~ url[a8a3]::parser::is_url_code_point)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1541:17: 1541:20 (#0), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).10)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).82), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1541:17: 1541:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:343:13: 343:14 (#0), res: Local(HirId(DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation).8)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation).15), res: Local(HirId(DefId(0:188 ~ url[a8a3]::parser::{impl#10}::log_violation).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:343:13: 343:14 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:349:16: 349:20 (#0), res: Local(HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).6)), segments: [PathSegment { ident: test#0, hir_id: HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).18), res: Local(HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:349:16: 349:20 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:350:17: 350:18 (#0), res: Local(HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).10)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).22), res: Local(HirId(DefId(0:189 ~ url[a8a3]::parser::{impl#10}::log_violation_if).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:350:17: 350:18 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:54 (#0), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).4)), segments: [PathSegment { ident: default_port#0, hir_id: HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).157), res: Local(HirId(DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1124:42: 1124:54 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1486:13: 1486:14 (#0), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).135)), segments: [PathSegment { ident: o#0, hir_id: HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).141), res: Local(HirId(DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query).135)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1486:13: 1486:14 (#0) }
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1538:21: 1538:24 (#0), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).10)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).64), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1538:21: 1538:24 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1541:17: 1541:20 (#0), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).10)), segments: [PathSegment { ident: vfn#0, hir_id: HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).82), res: Local(HirId(DefId(0:241 ~ url[a8a3]::parser::{impl#10}::check_url_code_point).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1541:17: 1541:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:242 ~ url[a8a3]::parser::is_url_code_point)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:243 ~ url[a8a3]::parser::c0_control_or_space)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:243 ~ url[a8a3]::parser::c0_control_or_space).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1576:5: 1576:7 (#0), res: Local(HirId(DefId(0:243 ~ url[a8a3]::parser::c0_control_or_space).2)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:243 ~ url[a8a3]::parser::c0_control_or_space).5), res: Local(HirId(DefId(0:243 ~ url[a8a3]::parser::c0_control_or_space).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1576:5: 1576:7 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:243 ~ url[a8a3]::parser::c0_control_or_space).6), kind: Lit(Spanned { node: Char(' '), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1576:11: 1576:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1576:11: 1576:14 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:244 ~ url[a8a3]::parser::ascii_tab_or_new_line)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5325 ~ core[7d5a]::char::methods::{impl#0}::is_ascii_alphabetic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1593:8: 1593:9 (#0), res: Local(HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).2)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).6), res: Local(HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1593:8: 1593:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).7), kind: Cast(Expr { hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).8), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1593:13: 1593:16 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).9), res: PrimTy(Uint(U32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1593:13: 1593:16 (#0) }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).11), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1593:13: 1593:21 (#0) }, Ty { hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1593:25: 1593:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:246 ~ url[a8a3]::parser::to_u32).13), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1593:25: 1593:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1593:13: 1593:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).4), kind: Call(Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:5: 1601:28 (#0), res: Def(Fn, DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)), segments: [PathSegment { ident: is_windows_drive_letter#0, hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).6), res: Def(Fn, DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:5: 1601:28 (#0) }, [Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:29: 1601:36 (#0), res: Local(HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).2)), segments: [PathSegment { ident: segment#0, hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).8), res: Local(HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:29: 1601:36 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:5: 1601:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).9), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:63: 1601:65 (#0) }, Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).10), kind: Index(Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).11), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:48 (#0), res: Local(HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).2)), segments: [PathSegment { ident: segment#0, hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).14), res: Local(HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:48 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:49: 1601:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:59 (#0) }, Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).15), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:60: 1601:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:60: 1601:61 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:59: 1601:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:62 (#0) }, Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).16), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:66: 1601:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:66: 1601:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:70 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).10), kind: Index(Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).11), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).12), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:48 (#0), res: Local(HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).2)), segments: [PathSegment { ident: segment#0, hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).14), res: Local(HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:48 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:49: 1601:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:59 (#0) }, Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).15), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:60: 1601:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:60: 1601:61 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:59: 1601:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:41: 1601:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:247 ~ url[a8a3]::parser::is_normalized_windows_drive_letter).16), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:66: 1601:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1601:66: 1601:70 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).4), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:19: 1608:21 (#0) }, Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).5), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:5: 1608:12 (#0), res: Local(HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).2)), segments: [PathSegment { ident: segment#0, hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).8), res: Local(HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:5: 1608:12 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:13: 1608:18 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:5: 1608:18 (#0) }, Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).9), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:22: 1608:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:22: 1608:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:5: 1608:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).10), kind: Call(Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:27: 1608:59 (#0), res: Def(Fn, DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter)), segments: [PathSegment { ident: starts_with_windows_drive_letter#0, hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).12), res: Def(Fn, DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:27: 1608:59 (#0) }, [Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:60: 1608:67 (#0), res: Local(HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).2)), segments: [PathSegment { ident: segment#0, hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).14), res: Local(HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:60: 1608:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:27: 1608:68 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).5), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:5: 1608:12 (#0), res: Local(HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).2)), segments: [PathSegment { ident: segment#0, hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).8), res: Local(HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:5: 1608:12 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:13: 1608:18 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:5: 1608:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter).9), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:22: 1608:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1608:22: 1608:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:13230 ~ core[7d5a]::slice::{impl#0}::first)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).15), kind: Match(Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:18: 1615:19 (#0), res: Local(HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).6)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).17), res: Local(HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:18: 1615:19 (#0) }, [Arm { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).27), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#144), pat: Pat { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).26), kind: Or([Pat { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).19), kind: Lit(Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).18), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:21: 1615:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:21: 1615:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:21: 1615:25 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).21), kind: Lit(Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).20), kind: Lit(Spanned { node: Byte(92), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:28: 1615:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:28: 1615:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:28: 1615:33 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).23), kind: Lit(Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).22), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:36: 1615:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:36: 1615:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:36: 1615:40 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).25), kind: Lit(Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).24), kind: Lit(Spanned { node: Byte(35), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:43: 1615:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:43: 1615:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:43: 1615:47 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:21: 1615:47 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).28), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#144) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#144) } }, Arm { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).30), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#144), pat: Pat { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).29), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#144), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).31), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#144) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#144) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#144) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).32), kind: Call(Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:52: 1615:84 (#0), res: Def(Fn, DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter)), segments: [PathSegment { ident: starts_with_windows_drive_letter#0, hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).34), res: Def(Fn, DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:52: 1615:84 (#0) }, [Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).35), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).36), kind: Index(Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:86: 1615:87 (#0), res: Local(HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).38), res: Local(HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:86: 1615:87 (#0) }, Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).39), kind: Struct(LangItem(RangeFrom, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:88: 1615:91 (#0)), [ExprField { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).41), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:249 ~ url[a8a3]::parser::path_starts_with_windows_drive_letter).40), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:88: 1615:89 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:88: 1615:89 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:88: 1615:89 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:88: 1615:91 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:87: 1615:92 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:86: 1615:92 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:85: 1615:92 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1615:52: 1615:93 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).4), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:9: 1624:11 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).5), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:9: 1623:11 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).6), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:13: 1622:15 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:6 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).10), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:6 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:7: 1622:12 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:12 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).11), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:16: 1622:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:16: 1622:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:17 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).12), kind: Call(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:23 (#0), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), segments: [PathSegment { ident: ascii_alpha#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).14), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:23 (#0) }, [Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).15), kind: Cast(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).16), kind: Index(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).17), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:25 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).20), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:26: 1623:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:36 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:37: 1623:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:37: 1623:38 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:36: 1623:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:39 (#0) }, Ty { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:43: 1623:47 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).23), res: PrimTy(Char), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:43: 1623:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:47 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1623:48 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).24), kind: Match(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).25), kind: Index(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).26), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).27), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:21: 1624:22 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).29), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:21: 1624:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:23: 1624:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:21: 1624:33 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).30), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:34: 1624:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:34: 1624:35 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:33: 1624:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:21: 1624:36 (#0) }, [Arm { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).36), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#145), pat: Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).35), kind: Or([Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).32), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).31), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:38: 1624:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:38: 1624:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:38: 1624:42 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).34), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).33), kind: Lit(Spanned { node: Byte(124), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:45: 1624:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:45: 1624:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:45: 1624:49 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:38: 1624:49 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).37), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#145) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#145) } }, Arm { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).39), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#145), pat: Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).38), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#145), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).40), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#145) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#145) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#145) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1624:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).41), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:26: 1625:28 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).42), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:21: 1625:23 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).43), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:14 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).46), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:14 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:15: 1625:20 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:20 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).47), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:24: 1625:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:24: 1625:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:25 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).48), kind: Match(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).49), kind: Index(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).50), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).51), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:38: 1625:39 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).53), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:38: 1625:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:40: 1625:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:38: 1625:50 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).54), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:51: 1625:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:51: 1625:52 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:50: 1625:53 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:38: 1625:53 (#0) }, [Arm { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).64), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#146), pat: Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).63), kind: Or([Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).56), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).55), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:55: 1625:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:55: 1625:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:55: 1625:59 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).58), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).57), kind: Lit(Spanned { node: Byte(92), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:62: 1625:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:62: 1625:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:62: 1625:67 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).60), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).59), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:70: 1625:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:70: 1625:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:70: 1625:74 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).62), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).61), kind: Lit(Spanned { node: Byte(35), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:77: 1625:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:77: 1625:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:77: 1625:81 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:55: 1625:81 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).65), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#146) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#146) } }, Arm { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).67), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#146), pat: Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).66), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#146), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).68), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#146) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#146) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#146) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:12: 1625:83 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).5), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:9: 1623:11 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).6), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:13: 1622:15 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:6 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).10), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:6 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:7: 1622:12 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:12 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).11), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:16: 1622:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:16: 1622:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:17 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).12), kind: Call(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:23 (#0), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), segments: [PathSegment { ident: ascii_alpha#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).14), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:23 (#0) }, [Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).15), kind: Cast(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).16), kind: Index(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).17), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:25 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).20), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:26: 1623:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:36 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:37: 1623:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:37: 1623:38 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:36: 1623:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:39 (#0) }, Ty { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:43: 1623:47 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).23), res: PrimTy(Char), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:43: 1623:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:47 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1623:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).24), kind: Match(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).25), kind: Index(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).26), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).27), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:21: 1624:22 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).29), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:21: 1624:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:23: 1624:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:21: 1624:33 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).30), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:34: 1624:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:34: 1624:35 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:33: 1624:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:21: 1624:36 (#0) }, [Arm { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).36), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#145), pat: Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).35), kind: Or([Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).32), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).31), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:38: 1624:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:38: 1624:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:38: 1624:42 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).34), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).33), kind: Lit(Spanned { node: Byte(124), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:45: 1624:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:45: 1624:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:45: 1624:49 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1624:38: 1624:49 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).37), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#145) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#145) } }, Arm { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).39), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#145), pat: Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).38), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#145), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).40), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#145) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#145) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#145) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).6), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:13: 1622:15 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:6 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).10), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:6 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:7: 1622:12 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:12 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).11), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:16: 1622:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:16: 1622:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).12), kind: Call(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:23 (#0), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), segments: [PathSegment { ident: ascii_alpha#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).14), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:23 (#0) }, [Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).15), kind: Cast(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).16), kind: Index(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).17), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:25 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).20), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:26: 1623:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:36 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).21), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:37: 1623:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:37: 1623:38 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:36: 1623:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:39 (#0) }, Ty { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:43: 1623:47 (#0), res: PrimTy(Char), segments: [PathSegment { ident: char#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).23), res: PrimTy(Char), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:43: 1623:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:24: 1623:47 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1623:12: 1623:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).7), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:6 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).10), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:6 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:7: 1622:12 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:5: 1622:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).11), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:16: 1622:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1622:16: 1622:17 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).42), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:21: 1625:23 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).43), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:14 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).46), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:14 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:15: 1625:20 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:20 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).47), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:24: 1625:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:24: 1625:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).48), kind: Match(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).49), kind: Index(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).50), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).51), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:38: 1625:39 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).53), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:38: 1625:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:40: 1625:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:38: 1625:50 (#0) }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).54), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:51: 1625:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:51: 1625:52 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:50: 1625:53 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:38: 1625:53 (#0) }, [Arm { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).64), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#146), pat: Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).63), kind: Or([Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).56), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).55), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:55: 1625:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:55: 1625:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:55: 1625:59 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).58), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).57), kind: Lit(Spanned { node: Byte(92), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:62: 1625:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:62: 1625:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:62: 1625:67 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).60), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).59), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:70: 1625:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:70: 1625:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:70: 1625:74 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).62), kind: Lit(Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).61), kind: Lit(Spanned { node: Byte(35), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:77: 1625:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:77: 1625:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:77: 1625:81 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:55: 1625:81 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).65), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#146) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#146) } }, Arm { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).67), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#146), pat: Pat { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).66), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#146), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).68), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#146) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#146) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#146) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).43), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:14 (#0), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).46), res: Local(HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:14 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:15: 1625:20 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:13: 1625:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:250 ~ url[a8a3]::parser::starts_with_windows_drive_letter).47), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:24: 1625:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/parser.rs:1625:24: 1625:25 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ url[a8a3]::parser::starts_with_windows_drive_letter_segment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:681 ~ url[a8a3]::path_segments::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:259 ~ url[a8a3]::path_segments::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:396 ~ url[a8a3]::{impl#1}::take_after_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).42), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).43), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:23: 50:26 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).45), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:23: 50:26 (#0) }, [Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).46), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:35: 50:38 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).48), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:35: 50:38 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:35: 50:49 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:27: 50:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:23: 50:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).49), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:54: 50:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:50:54: 50:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).72), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:37: 53:39 (#0) }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).73), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).74), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).75), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:16 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).77), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:16 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:31: 53:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:36 (#0) }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).78), kind: Cast(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).79), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:40: 53:43 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).81), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:40: 53:43 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:40: 53:54 (#0) }, Ty { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:58: 53:63 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).83), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:58: 53:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:40: 53:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:63 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).84), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:48: 54:50 (#0) }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).85), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).86), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:20: 54:23 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).88), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:20: 54:23 (#0) }, [Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).89), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:32: 54:35 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).91), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:32: 54:35 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:32: 54:46 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:24: 54:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:20: 54:47 (#0) }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).92), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:51: 54:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:51: 54:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:20: 54:55 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).73), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).74), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).75), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:16 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).77), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:16 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:31: 53:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:13: 53:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).78), kind: Cast(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).79), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:40: 53:43 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).81), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:40: 53:43 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:40: 53:54 (#0) }, Ty { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:58: 53:63 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).83), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:58: 53:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:53:40: 53:63 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).85), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).86), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:20: 54:23 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).88), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:20: 54:23 (#0) }, [Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).89), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:32: 54:35 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).91), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:32: 54:35 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:32: 54:46 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:24: 54:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:20: 54:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).92), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:51: 54:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:54:51: 54:55 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).113), kind: Cast(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).114), kind: Field(Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:28: 58:31 (#0), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).116), res: Local(HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:28: 58:31 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:28: 58:42 (#0) }, Ty { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:46: 58:51 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).118), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:46: 58:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:28: 58:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).119), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).120), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:259 ~ url[a8a3]::path_segments::new).121), kind: Lit(Spanned { node: Str("/", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:54: 58:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:54: 58:57 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:58: 58:63 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:58:54: 58:63 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:262 ~ url[a8a3]::path_segments::{impl#0}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ url[a8a3]::path_segments::{impl#1}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).5), kind: Field(Expr { hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:12: 126:16 (#0), res: Local(HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).7), res: Local(HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:12: 126:16 (#0) }, after_first_slash#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:12: 126:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).8), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).10), kind: Field(Expr { hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).11), kind: Field(Expr { hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:38: 126:42 (#0), res: Local(HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).13), res: Local(HirId(DefId(0:266 ~ url[a8a3]::path_segments::{impl#1}::pop_if_empty).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:38: 126:42 (#0) }, url#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:38: 126:46 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:38: 126:60 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:61: 126:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:126:38: 126:66 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6004 ~ alloc[5873]::string::{impl#0}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).5), kind: Field(Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:12: 141:16 (#0), res: Local(HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).7), res: Local(HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:12: 141:16 (#0) }, after_first_slash#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:12: 141:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).8), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).10), kind: Field(Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).11), kind: Field(Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:38: 141:42 (#0), res: Local(HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).13), res: Local(HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:38: 141:42 (#0) }, url#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:38: 141:46 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:38: 141:60 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:61: 141:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:141:38: 141:66 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14343 ~ core[7d5a]::str::{impl#0}::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).48), kind: Field(Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:149:23: 149:27 (#0), res: Local(HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).50), res: Local(HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:149:23: 149:27 (#0) }, after_first_slash#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:149:23: 149:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:149:48: 149:58 (#0), res: Local(HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).40)), segments: [PathSegment { ident: last_slash#0, hir_id: HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).52), res: Local(HirId(DefId(0:267 ~ url[a8a3]::path_segments::{impl#1}::pop).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:149:48: 149:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:268 ~ url[a8a3]::path_segments::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:385 ~ url[a8a3]::{impl#1}::mutate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).84), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:47: 229:48 (#0) }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).85), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).86), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).87), kind: Field(Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:26 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).35)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).89), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:26 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:41: 229:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:46 (#0) }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).90), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:60: 229:61 (#0) }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:49: 229:59 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).92), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:49: 229:59 (#0) }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).93), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:62: 229:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:62: 229:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:49: 229:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:63 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).94), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:51: 231:53 (#0) }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).95), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).96), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).97), kind: Field(Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:30 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).35)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).99), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:30 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:44 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:45: 231:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:50 (#0) }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).100), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:54: 231:64 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).101), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:54: 231:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).85), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).86), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).87), kind: Field(Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:26 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).35)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).89), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:26 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:41: 229:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:20: 229:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).90), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:60: 229:61 (#0) }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:49: 229:59 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).92), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:49: 229:59 (#0) }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).93), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:62: 229:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:62: 229:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:49: 229:63 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:49: 229:59 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).92), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:49: 229:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).93), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:62: 229:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:229:62: 229:63 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).95), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).96), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).97), kind: Field(Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:30 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).35)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).99), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:30 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:44 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:45: 231:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:24: 231:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).100), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:54: 231:64 (#0), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), segments: [PathSegment { ident: path_start#0, hir_id: HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).101), res: Local(HirId(DefId(0:269 ~ url[a8a3]::path_segments::{impl#1}::extend).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/path_segments.rs:231:54: 231:64 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:228 ~ url[a8a3]::parser::{impl#10}::parse_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:282 ~ url[a8a3]::slicing::{impl#0}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:285 ~ url[a8a3]::slicing::{impl#1}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:288 ~ url[a8a3]::slicing::{impl#2}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:291 ~ url[a8a3]::slicing::{impl#3}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:292 ~ url[a8a3]::slicing::count_digits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:717 ~ url[a8a3]::slicing::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:719 ~ url[a8a3]::slicing::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).35), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).36), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:21: 133:25 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).38), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:21: 133:25 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:21: 133:36 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:40: 133:45 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).40), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:40: 133:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:21: 133:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).41), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).42), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).43), kind: Lit(Spanned { node: Str("://", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:48: 133:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:48: 133:53 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:54: 133:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:133:48: 133:59 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).53), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).54), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:35: 135:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).56), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:35: 135:39 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).57), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:48: 135:52 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).59), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:48: 135:52 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:48: 135:63 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:40: 135:64 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:35: 135:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).60), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:68: 135:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:135:68: 135:72 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).80), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:51: 136:52 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).81), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:35: 136:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).83), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:35: 136:39 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:35: 136:50 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).84), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).85), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).86), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).87), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:53: 136:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:53: 136:56 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:57: 136:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:53: 136:62 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:66: 136:69 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).89), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:66: 136:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:53: 136:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:35: 136:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).90), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:73: 136:77 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).92), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:73: 136:77 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:73: 136:90 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).81), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:35: 136:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).83), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:35: 136:39 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:35: 136:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).84), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).85), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).86), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).87), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:53: 136:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:53: 136:56 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:57: 136:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:53: 136:62 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:66: 136:69 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).89), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:66: 136:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:136:53: 136:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).107), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).108), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:21: 137:25 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).110), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:21: 137:25 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:21: 137:36 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:40: 137:45 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).112), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:40: 137:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:21: 137:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).113), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).114), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).115), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:48: 137:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:48: 137:51 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:52: 137:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:137:48: 137:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).135), kind: MethodCall(PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).136), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).137), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:20: 144:24 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).138), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:20: 144:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:25: 144:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:20: 144:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).139), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:76: 144:78 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).140), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).141), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:44: 144:48 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).143), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:44: 144:48 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).144), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:57: 144:61 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).146), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:57: 144:61 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:57: 144:74 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:49: 144:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:44: 144:75 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).147), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:79: 144:83 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:79: 144:83 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:44: 144:83 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).140), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).141), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:44: 144:48 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).143), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:44: 144:48 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).144), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).145), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:57: 144:61 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).146), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:57: 144:61 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:57: 144:74 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:49: 144:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:44: 144:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).147), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:79: 144:83 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:144:79: 144:83 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).150), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).151), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:21: 145:25 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).153), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:21: 145:25 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:21: 145:38 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:42: 145:47 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).155), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:42: 145:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:21: 145:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).156), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).157), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).158), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:50: 145:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:50: 145:53 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:54: 145:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:145:50: 145:59 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).168), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:147:35: 147:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).170), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:147:35: 147:39 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:147:35: 147:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).171), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).172), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:147:56: 147:60 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).173), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:147:56: 147:60 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:147:56: 147:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).202), kind: MethodCall(PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).203), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:20: 153:24 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).205), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:20: 153:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:25: 153:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:20: 153:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).206), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:76: 153:78 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).207), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).208), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:44: 153:48 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).210), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:44: 153:48 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).211), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:57: 153:61 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).213), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:57: 153:61 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:57: 153:74 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:49: 153:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:44: 153:75 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).214), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:79: 153:83 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:79: 153:83 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:44: 153:83 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).207), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).208), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:44: 153:48 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).210), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:44: 153:48 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).211), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:57: 153:61 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).213), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:57: 153:61 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:57: 153:74 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:49: 153:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:44: 153:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).214), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:79: 153:83 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:153:79: 153:83 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).222), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).223), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:35: 154:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).225), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:35: 154:39 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).226), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:64: 154:65 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).227), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:48: 154:52 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).229), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:48: 154:52 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:48: 154:63 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).230), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).231), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).232), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).233), kind: Lit(Spanned { node: Str("@", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:66: 154:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:66: 154:69 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:70: 154:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:66: 154:75 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).234), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:79: 154:82 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).235), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:79: 154:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:66: 154:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:48: 154:82 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:40: 154:83 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:35: 154:83 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).236), kind: Lit(Spanned { node: Byte(64), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:87: 154:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:87: 154:91 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).227), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:48: 154:52 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).229), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:48: 154:52 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:48: 154:63 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).230), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).231), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).232), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).233), kind: Lit(Spanned { node: Str("@", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:66: 154:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:66: 154:69 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:70: 154:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:66: 154:75 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).234), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:79: 154:82 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).235), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:79: 154:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:154:66: 154:82 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).251), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).252), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).253), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:21: 155:25 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).254), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:21: 155:25 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:21: 155:36 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).255), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:40: 155:45 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).256), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:40: 155:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:21: 155:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).257), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).258), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).259), kind: Lit(Spanned { node: Str("@", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:48: 155:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:48: 155:51 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:52: 155:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:155:48: 155:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).269), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).270), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:157:35: 157:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).271), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:157:35: 157:39 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:157:35: 157:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).272), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).273), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:157:56: 157:60 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).274), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:157:56: 157:60 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:157:56: 157:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).334), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).335), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).336), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:35: 168:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).337), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:35: 168:39 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).338), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).339), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:48: 168:52 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).340), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:48: 168:52 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:48: 168:61 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:40: 168:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:35: 168:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).341), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:66: 168:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:168:66: 168:70 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).356), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).357), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).358), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:21: 169:25 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).359), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:21: 169:25 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:21: 169:34 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).360), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:38: 169:43 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).361), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:38: 169:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:21: 169:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).362), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).363), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).364), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:46: 169:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:46: 169:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:50: 169:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:169:46: 169:55 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).395), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).396), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).397), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:35: 177:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).398), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:35: 177:39 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).399), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).400), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:48: 177:52 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).401), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:48: 177:52 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:48: 177:61 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:40: 177:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:35: 177:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).402), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:66: 177:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:177:66: 177:70 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).417), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:44: 178:45 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).418), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).419), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).420), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:25 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).421), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:25 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:34 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).422), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:38: 178:43 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).423), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:38: 178:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:43 (#0) }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).424), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).425), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).426), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:46: 178:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:46: 178:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:50: 178:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:46: 178:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).427), kind: Call(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).428), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:58: 178:70 (#0), res: Def(Fn, DefId(0:292 ~ url[a8a3]::slicing::count_digits)), segments: [PathSegment { ident: count_digits#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).429), res: Def(Fn, DefId(0:292 ~ url[a8a3]::slicing::count_digits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:58: 178:70 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).430), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:71: 178:75 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).384)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).431), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).384)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:71: 178:75 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:58: 178:76 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).418), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).419), kind: Field(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).420), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:25 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).421), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:25 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:34 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).422), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:38: 178:43 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).423), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:38: 178:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:21: 178:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).424), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).425), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).426), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:46: 178:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:46: 178:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:50: 178:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:178:46: 178:55 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:292 ~ url[a8a3]::slicing::count_digits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).524), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).525), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).526), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:194:35: 194:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).527), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:194:35: 194:39 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).528), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:194:48: 194:49 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).512)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).529), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).512)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:194:48: 194:49 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:194:40: 194:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:194:35: 194:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).530), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:194:54: 194:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:194:54: 194:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).545), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).546), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:21: 195:22 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).512)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).547), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).512)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:21: 195:22 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).548), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:26: 195:31 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).549), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:26: 195:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:21: 195:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).550), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).551), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).552), kind: Lit(Spanned { node: Str("?", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:34: 195:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:34: 195:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:38: 195:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:195:34: 195:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).621), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).622), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).623), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:208:35: 208:39 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).624), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:208:35: 208:39 (#0) }, [Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).625), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:208:48: 208:49 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).611)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).626), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).611)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:208:48: 208:49 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:208:40: 208:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:208:35: 208:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).627), kind: Lit(Spanned { node: Byte(35), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:208:54: 208:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:208:54: 208:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).642), kind: Cast(Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).643), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:21: 209:22 (#0), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).611)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).644), res: Local(HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).611)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:21: 209:22 (#0) }, Ty { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).645), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:26: 209:31 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).646), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:26: 209:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:21: 209:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).647), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).648), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:294 ~ url[a8a3]::slicing::{impl#4}::index).649), kind: Lit(Spanned { node: Str("#", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:34: 209:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:34: 209:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:38: 209:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/slicing.rs:209:34: 209:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:307 ~ url[a8a3]::quirks::domain_to_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ url[a8a3]::host::{impl#2}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:308 ~ url[a8a3]::quirks::domain_to_unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ url[a8a3]::host::{impl#2}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(22:119 ~ idna[18fd]::domain_to_unicode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:309 ~ url[a8a3]::quirks::href)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:353 ~ url[a8a3]::{impl#1}::as_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:310 ~ url[a8a3]::quirks::set_href)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ url[a8a3]::{impl#1}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:311 ~ url[a8a3]::quirks::origin)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:106 ~ url[a8a3]::origin::{impl#0}::ascii_serialization)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:358 ~ url[a8a3]::{impl#1}::origin)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:312 ~ url[a8a3]::quirks::protocol)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:353 ~ url[a8a3]::{impl#1}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:313 ~ url[a8a3]::quirks::set_protocol)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14340 ~ core[7d5a]::str::{impl#0}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:314 ~ url[a8a3]::quirks::username)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:364 ~ url[a8a3]::{impl#1}::username)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:315 ~ url[a8a3]::quirks::set_username)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:411 ~ url[a8a3]::{impl#1}::set_username)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:316 ~ url[a8a3]::quirks::password)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:365 ~ url[a8a3]::{impl#1}::password)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:317 ~ url[a8a3]::quirks::set_password)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:409 ~ url[a8a3]::{impl#1}::set_password)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:318 ~ url[a8a3]::quirks::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:319 ~ url[a8a3]::quirks::set_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).57), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:24: 161:26 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:12: 161:23 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).54)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).59), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:12: 161:23 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:27: 161:43 (#0), res: Def(Ctor(Variant, Const), DefId(0:636 ~ url[a8a3]::parser::SchemeType::File::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).61), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: File#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).62), res: Def(Ctor(Variant, Const), DefId(0:636 ~ url[a8a3]::parser::SchemeType::File::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:27: 161:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:12: 161:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).63), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).64), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:47: 161:55 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).4)), segments: [PathSegment { ident: new_host#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).66), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:47: 161:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:56: 161:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:47: 161:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:12: 161:23 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).54)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).59), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:12: 161:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:27: 161:43 (#0), res: Def(Ctor(Variant, Const), DefId(0:636 ~ url[a8a3]::parser::SchemeType::File::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).61), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: File#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).62), res: Def(Ctor(Variant, Const), DefId(0:636 ~ url[a8a3]::parser::SchemeType::File::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:161:27: 161:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ url[a8a3]::parser::{impl#5}::split_prefix)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ url[a8a3]::parser::{impl#5}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ url[a8a3]::parser::default_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).191), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:13: 184:15 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).192), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:8: 184:12 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).33)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).193), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:8: 184:12 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).194), kind: Call(Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).195), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:16: 184:28 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).196), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).197), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:16: 184:28 (#0) }, [Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).198), kind: MethodCall(PathSegment { ident: to_string#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).199), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).200), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:29: 184:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:29: 184:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:32: 184:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:29: 184:43 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:16: 184:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:8: 184:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).201), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:76: 185:78 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).202), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:39: 185:41 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).203), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).204), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).205), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).206), kind: Call(Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:22 (#0), res: Def(Fn, DefId(0:314 ~ url[a8a3]::quirks::username)), segments: [PathSegment { ident: username#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).208), res: Def(Fn, DefId(0:314 ~ url[a8a3]::quirks::username)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:22 (#0) }, [Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:23: 185:26 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).210), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:23: 185:26 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:28: 185:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:13: 185:38 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).211), kind: Match(Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:51: 185:59 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).36)), segments: [PathSegment { ident: opt_port#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).213), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:51: 185:59 (#0) }, [Arm { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).219), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#199), pat: Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).218), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:61: 185:65 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).214), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).217), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:66: 185:70 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).215), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).216), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:71: 185:72 (#0), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:66: 185:73 (#0), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:61: 185:74 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).220), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#199) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#199) } }, Arm { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).222), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#199), pat: Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).221), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#199), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).223), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#199) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#199) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#199) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:13: 185:75 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).224), kind: MethodCall(PathSegment { ident: is_some#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).225), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).226), kind: MethodCall(PathSegment { ident: port#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).227), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:79: 185:82 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).229), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:79: 185:82 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:83: 185:89 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:79: 185:89 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:90: 185:99 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:79: 185:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:12: 185:100 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).192), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:8: 184:12 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).33)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).193), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:8: 184:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).194), kind: Call(Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).195), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:16: 184:28 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).196), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).197), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:16: 184:28 (#0) }, [Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).198), kind: MethodCall(PathSegment { ident: to_string#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).199), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).200), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:29: 184:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:29: 184:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:32: 184:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:29: 184:43 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:184:16: 184:44 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).202), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:39: 185:41 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).203), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).204), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).205), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).206), kind: Call(Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:22 (#0), res: Def(Fn, DefId(0:314 ~ url[a8a3]::quirks::username)), segments: [PathSegment { ident: username#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).208), res: Def(Fn, DefId(0:314 ~ url[a8a3]::quirks::username)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:22 (#0) }, [Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:23: 185:26 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).210), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:23: 185:26 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:28: 185:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:13: 185:38 (#0) }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).211), kind: Match(Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:51: 185:59 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).36)), segments: [PathSegment { ident: opt_port#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).213), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:51: 185:59 (#0) }, [Arm { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).219), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#199), pat: Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).218), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:61: 185:65 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).214), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).217), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:66: 185:70 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).215), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).216), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:71: 185:72 (#0), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:66: 185:73 (#0), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:61: 185:74 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).220), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#199) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#199) } }, Arm { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).222), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#199), pat: Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).221), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#199), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).223), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#199) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#199) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#199) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:13: 185:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).224), kind: MethodCall(PathSegment { ident: is_some#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).225), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).226), kind: MethodCall(PathSegment { ident: port#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).227), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:79: 185:82 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).229), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:79: 185:82 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:83: 185:89 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:79: 185:89 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:90: 185:99 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:79: 185:99 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).203), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).204), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).205), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).206), kind: Call(Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:22 (#0), res: Def(Fn, DefId(0:314 ~ url[a8a3]::quirks::username)), segments: [PathSegment { ident: username#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).208), res: Def(Fn, DefId(0:314 ~ url[a8a3]::quirks::username)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:22 (#0) }, [Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:23: 185:26 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).210), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:23: 185:26 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:28: 185:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:14: 185:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:13: 185:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).211), kind: Match(Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:51: 185:59 (#0), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).36)), segments: [PathSegment { ident: opt_port#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).213), res: Local(HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:51: 185:59 (#0) }, [Arm { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).219), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#199), pat: Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).218), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:61: 185:65 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).214), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).217), kind: TupleStruct(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:66: 185:70 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).215), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] }), [Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).216), kind: Wild, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:71: 185:72 (#0), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:66: 185:73 (#0), default_binding_modes: true }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:185:61: 185:74 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).220), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#199) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#199) } }, Arm { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).222), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#199), pat: Pat { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).221), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#199), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:319 ~ url[a8a3]::quirks::set_host).223), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#199) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#199) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#199) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:314 ~ url[a8a3]::quirks::username)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ url[a8a3]::{impl#1}::port)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:322 ~ url[a8a3]::quirks::hostname)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:367 ~ url[a8a3]::{impl#1}::host_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:323 ~ url[a8a3]::quirks::set_hostname)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).45), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:20: 208:22 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:8: 208:19 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).42)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).47), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:8: 208:19 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:23: 208:39 (#0), res: Def(Ctor(Variant, Const), DefId(0:636 ~ url[a8a3]::parser::SchemeType::File::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).49), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: File#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).50), res: Def(Ctor(Variant, Const), DefId(0:636 ~ url[a8a3]::parser::SchemeType::File::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:23: 208:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:8: 208:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).51), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).52), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:43: 208:55 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).4)), segments: [PathSegment { ident: new_hostname#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).54), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:43: 208:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:56: 208:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:43: 208:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:8: 208:19 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).42)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).47), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:8: 208:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:23: 208:39 (#0), res: Def(Ctor(Variant, Const), DefId(0:636 ~ url[a8a3]::parser::SchemeType::File::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).49), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: File#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).50), res: Def(Ctor(Variant, Const), DefId(0:636 ~ url[a8a3]::parser::SchemeType::File::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:208:23: 208:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ url[a8a3]::parser::{impl#10}::parse_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).115), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:21: 221:23 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).116), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:21: 219:23 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).117), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:51: 217:53 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).118), kind: Call(Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).119), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:30 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).120), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:30 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).122), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:36 (#0) }, [Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).123), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).124), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:40 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).126), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:41: 217:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:49 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:50 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:54: 217:80 (#0), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).128), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: SpecialNotFile#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).129), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:54: 217:80 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:80 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).130), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).131), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).132), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).133), kind: Call(Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:28 (#0), res: Def(Fn, DefId(0:324 ~ url[a8a3]::quirks::port)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).135), res: Def(Fn, DefId(0:324 ~ url[a8a3]::quirks::port)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:28 (#0) }, [Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:29: 219:32 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).137), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:29: 219:32 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:34: 219:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:23: 219:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 219:44 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).138), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).139), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).140), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).141), kind: MethodCall(PathSegment { ident: username#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).142), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:25: 221:28 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).144), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:25: 221:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:29: 221:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:25: 221:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:40: 221:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:25: 221:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:24: 221:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 221:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).145), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).146), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).147), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).148), kind: MethodCall(PathSegment { ident: unwrap_or#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).149), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).150), kind: MethodCall(PathSegment { ident: password#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).151), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:25: 222:28 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).153), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:25: 222:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:29: 222:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:25: 222:39 (#0) }, [Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).154), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:50: 222:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:50: 222:52 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:40: 222:53 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:25: 222:53 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:54: 222:64 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:25: 222:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:222:24: 222:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).116), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:21: 219:23 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).117), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:51: 217:53 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).118), kind: Call(Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).119), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:30 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).120), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:30 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).122), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:36 (#0) }, [Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).123), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).124), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:40 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).126), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:41: 217:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:49 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:50 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:54: 217:80 (#0), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).128), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: SpecialNotFile#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).129), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:54: 217:80 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:80 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).130), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).131), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).132), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).133), kind: Call(Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:28 (#0), res: Def(Fn, DefId(0:324 ~ url[a8a3]::quirks::port)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).135), res: Def(Fn, DefId(0:324 ~ url[a8a3]::quirks::port)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:28 (#0) }, [Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:29: 219:32 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).137), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:29: 219:32 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:34: 219:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:23: 219:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 219:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).138), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).139), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).140), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).141), kind: MethodCall(PathSegment { ident: username#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).142), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:25: 221:28 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).144), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:25: 221:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:29: 221:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:25: 221:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:40: 221:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:25: 221:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:221:24: 221:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).117), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:51: 217:53 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).118), kind: Call(Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).119), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:30 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).120), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:30 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).122), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:36 (#0) }, [Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).123), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).124), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:40 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).126), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:41: 217:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:49 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:50 (#0) }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:54: 217:80 (#0), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).128), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: SpecialNotFile#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).129), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:54: 217:80 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:80 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).130), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).131), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).132), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).133), kind: Call(Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:28 (#0), res: Def(Fn, DefId(0:324 ~ url[a8a3]::quirks::port)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).135), res: Def(Fn, DefId(0:324 ~ url[a8a3]::quirks::port)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:28 (#0) }, [Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:29: 219:32 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).137), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:29: 219:32 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:34: 219:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:24: 219:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:219:23: 219:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).118), kind: Call(Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).119), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:30 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).120), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:30 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).122), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:36 (#0) }, [Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).123), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).124), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:40 (#0), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).126), res: Local(HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:41: 217:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:37: 217:49 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:20: 217:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:54: 217:80 (#0), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).128), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }, PathSegment { ident: SpecialNotFile#0, hir_id: HirId(DefId(0:323 ~ url[a8a3]::quirks::set_hostname).129), res: Def(Ctor(Variant, Const), DefId(0:638 ~ url[a8a3]::parser::SchemeType::SpecialNotFile::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:217:54: 217:80 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:324 ~ url[a8a3]::quirks::port)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:364 ~ url[a8a3]::{impl#1}::username)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:365 ~ url[a8a3]::{impl#1}::password)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:324 ~ url[a8a3]::quirks::port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:325 ~ url[a8a3]::quirks::set_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).18), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:28: 248:30 (#0) }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).19), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).20), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).21), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:13: 248:16 (#0), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).23), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:13: 248:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:17: 248:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:13: 248:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:12: 248:27 (#0) }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).24), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:42: 248:44 (#0) }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).25), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).26), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:34 (#0), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).28), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:35: 248:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:41 (#0) }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).29), kind: Call(Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:49 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).31), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:49 (#0) }, [Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).32), kind: Call(Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:62 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).34), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).35), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:62 (#0) }, [Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).36), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:63: 248:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:63: 248:65 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:66 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:12: 248:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).37), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:78: 248:80 (#0) }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:71: 248:77 (#0), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).15)), segments: [PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).39), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:71: 248:77 (#0) }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).40), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:81: 248:87 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:81: 248:87 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:71: 248:87 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).19), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).20), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).21), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:13: 248:16 (#0), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).23), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:13: 248:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:17: 248:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:13: 248:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:12: 248:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).24), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:42: 248:44 (#0) }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).25), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).26), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:34 (#0), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).28), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:35: 248:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:41 (#0) }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).29), kind: Call(Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:49 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).31), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:49 (#0) }, [Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).32), kind: Call(Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:62 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).34), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).35), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:62 (#0) }, [Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).36), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:63: 248:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:63: 248:65 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:66 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:67 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).25), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).26), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:34 (#0), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).28), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:35: 248:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:31: 248:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).29), kind: Call(Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:49 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).31), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:49 (#0) }, [Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).32), kind: Call(Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:62 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).34), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).35), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:62 (#0) }, [Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).36), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:63: 248:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:63: 248:65 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:50: 248:66 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:45: 248:67 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:71: 248:77 (#0), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).15)), segments: [PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).39), res: Local(HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:71: 248:77 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:325 ~ url[a8a3]::quirks::set_port).40), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:81: 248:87 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:248:81: 248:87 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:224 ~ url[a8a3]::parser::{impl#10}::parse_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ url[a8a3]::parser::default_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:327 ~ url[a8a3]::quirks::pathname)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ url[a8a3]::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:328 ~ url[a8a3]::quirks::set_pathname)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).18), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).19), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:276:8: 276:20 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), segments: [PathSegment { ident: new_pathname#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).21), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:276:8: 276:20 (#0) }, [Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).22), kind: Lit(Spanned { node: Char('/'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:276:33: 276:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:276:33: 276:36 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:276:21: 276:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:276:8: 276:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).23), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:13: 279:15 (#0) }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).24), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).25), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).26), kind: Call(Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).27), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:23 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).28), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:23 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).30), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:29 (#0) }, [Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).31), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:30: 277:33 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).34), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:30: 277:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:34: 277:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:30: 277:42 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:43 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:44: 277:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:56 (#0) }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).35), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).36), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:16: 279:28 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), segments: [PathSegment { ident: new_pathname#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).38), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:16: 279:28 (#0) }, [Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).39), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:41: 279:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:41: 279:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:29: 279:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:16: 279:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:12: 279:47 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).24), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).25), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).26), kind: Call(Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).27), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:23 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).28), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:23 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).30), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:29 (#0) }, [Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).31), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:30: 277:33 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).34), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:30: 277:33 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:34: 277:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:30: 277:42 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:43 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:44: 277:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:277:13: 277:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).35), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).36), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:16: 279:28 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), segments: [PathSegment { ident: new_pathname#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).38), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:16: 279:28 (#0) }, [Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).39), kind: Lit(Spanned { node: Char('\\'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:41: 279:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:41: 279:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:29: 279:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:279:16: 279:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:397 ~ url[a8a3]::{impl#1}::set_path)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).51), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:9: 283:11 (#0) }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).52), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).53), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).54), kind: Call(Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).55), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:25 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).56), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:25 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).58), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:31 (#0) }, [Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).59), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).60), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:32: 282:35 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).62), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:32: 282:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:36: 282:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:32: 282:44 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:45 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:46: 282:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:58 (#0) }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).63), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).64), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).65), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:13: 283:25 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), segments: [PathSegment { ident: new_pathname#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).67), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:13: 283:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:26: 283:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:13: 283:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:12: 283:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 283:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).68), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).69), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).70), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:284:13: 284:16 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).72), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:284:13: 284:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:284:17: 284:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:284:13: 284:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:284:12: 284:27 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).52), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).53), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).54), kind: Call(Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).55), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:25 (#0), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), segments: [PathSegment { ident: SchemeType#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).56), res: Def(Enum, DefId(0:634 ~ url[a8a3]::parser::SchemeType)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:25 (#0) }, PathSegment { ident: from#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).58), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:31 (#0) }, [Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).59), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).60), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:32: 282:35 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).62), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:32: 282:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:36: 282:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:32: 282:44 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:45 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:46: 282:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:282:15: 282:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).63), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).64), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).65), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:13: 283:25 (#0), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), segments: [PathSegment { ident: new_pathname#0, hir_id: HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).67), res: Local(HirId(DefId(0:328 ~ url[a8a3]::quirks::set_pathname).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:13: 283:25 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:26: 283:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:13: 283:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:283:12: 283:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:397 ~ url[a8a3]::{impl#1}::set_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:397 ~ url[a8a3]::{impl#1}::set_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:329 ~ url[a8a3]::quirks::search)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ url[a8a3]::quirks::trim)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:330 ~ url[a8a3]::quirks::set_search)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:393 ~ url[a8a3]::{impl#1}::set_query)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:331 ~ url[a8a3]::quirks::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ url[a8a3]::quirks::trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:332 ~ url[a8a3]::quirks::set_hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ url[a8a3]::quirks::trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:333 ~ url[a8a3]::quirks::trim).5), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:333 ~ url[a8a3]::quirks::trim).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:333 ~ url[a8a3]::quirks::trim).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:326:8: 326:9 (#0), res: Local(HirId(DefId(0:333 ~ url[a8a3]::quirks::trim).2)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:333 ~ url[a8a3]::quirks::trim).8), res: Local(HirId(DefId(0:333 ~ url[a8a3]::quirks::trim).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:326:8: 326:9 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:326:10: 326:15 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:326:8: 326:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:333 ~ url[a8a3]::quirks::trim).9), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:326:19: 326:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/quirks.rs:326:19: 326:20 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:732 ~ url[a8a3]::{impl#18}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:742 ~ url[a8a3]::{impl#20}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:336 ~ url[a8a3]::{impl#0}::base_url)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:337 ~ url[a8a3]::{impl#0}::encoding_override)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:338 ~ url[a8a3]::{impl#0}::syntax_violation_callback)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:339 ~ url[a8a3]::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:192 ~ url[a8a3]::parser::{impl#10}::parse_url)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5964 ~ alloc[5873]::string::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ url[a8a3]::{impl#1}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:339 ~ url[a8a3]::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:351 ~ url[a8a3]::{impl#1}::options)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:342 ~ url[a8a3]::{impl#1}::parse_with_params)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:339 ~ url[a8a3]::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:351 ~ url[a8a3]::{impl#1}::options)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(20:72 ~ form_urlencoded[181d]::{impl#6}::extend_pairs)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8895 ~ core[7d5a]::iter::traits::iterator::Iterator::count)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8929 ~ core[7d5a]::iter::traits::iterator::Iterator::take_while)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).55), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:364:30: 364:31 (#0), res: Local(HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).53)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).57), res: Local(HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:364:30: 364:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:364:29: 364:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).58), kind: Lit(Spanned { node: Char(' '), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:364:35: 364:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:364:35: 364:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).64), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).65), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).66), kind: Field(Expr { hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:367:21: 367:25 (#0), res: Local(HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).68), res: Local(HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:367:21: 367:25 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:367:21: 367:39 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:367:40: 367:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:367:21: 367:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:367:48: 367:68 (#0), res: Local(HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).61)), segments: [PathSegment { ident: trailing_space_count#0, hir_id: HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).70), res: Local(HirId(DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path).61)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:367:48: 367:68 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:348 ~ url[a8a3]::{impl#1}::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:339 ~ url[a8a3]::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:336 ~ url[a8a3]::{impl#0}::base_url)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:351 ~ url[a8a3]::{impl#1}::options)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).20), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:42: 476:44 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).21), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:26: 476:28 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).22), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:16 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).25), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:17: 476:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:25 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).26), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).27), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:32 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).29), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:33: 476:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:41 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).30), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:57: 476:59 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).31), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:49 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).34), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:50: 476:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:56 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).35), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).36), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:63 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).38), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:63 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:64: 476:70 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:70 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).39), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:86: 476:88 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).40), kind: MethodCall(PathSegment { ident: port#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).41), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:74: 476:78 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).43), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:74: 476:78 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:79: 476:85 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:74: 476:85 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).44), kind: MethodCall(PathSegment { ident: port#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:89: 476:92 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).47), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:89: 476:92 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:93: 476:99 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:89: 476:99 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:74: 476:99 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).21), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:26: 476:28 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).22), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:16 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).25), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:17: 476:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:25 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).26), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).27), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:32 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).29), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:33: 476:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).30), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:57: 476:59 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).31), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:49 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).34), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:50: 476:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:56 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).35), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).36), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:63 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).38), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:63 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:64: 476:70 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).22), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).23), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:16 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).25), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:17: 476:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:12: 476:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).26), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).27), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:32 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).29), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:33: 476:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:29: 476:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).31), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:49 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).34), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:50: 476:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:45: 476:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).35), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).36), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:63 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).38), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:63 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:64: 476:70 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:60: 476:70 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).40), kind: MethodCall(PathSegment { ident: port#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).41), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:74: 476:78 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).43), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:74: 476:78 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:79: 476:85 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:74: 476:85 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).44), kind: MethodCall(PathSegment { ident: port#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:89: 476:92 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), segments: [PathSegment { ident: url#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).47), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:89: 476:92 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:93: 476:99 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:476:89: 476:99 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ url[a8a3]::{impl#1}::port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ url[a8a3]::{impl#1}::port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:350 ~ url[a8a3]::{impl#1}::make_relative::extract_path_filename)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14343 ~ core[7d5a]::str::{impl#0}::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14320 ~ core[7d5a]::str::{impl#0}::split_at)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:350 ~ url[a8a3]::{impl#1}::make_relative::extract_path_filename)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ url[a8a3]::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:350 ~ url[a8a3]::{impl#1}::make_relative::extract_path_filename)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ url[a8a3]::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8926 ~ core[7d5a]::iter::traits::iterator::Iterator::peekable)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8926 ~ core[7d5a]::iter::traits::iterator::Iterator::peekable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).111), kind: MethodCall(PathSegment { ident: is_some#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).112), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).113), kind: MethodCall(PathSegment { ident: peek#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).114), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:15: 503:24 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).98)), segments: [PathSegment { ident: base_path#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).116), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).98)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:15: 503:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:25: 503:31 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:15: 503:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:32: 503:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:15: 503:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).117), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:62: 503:64 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).118), kind: MethodCall(PathSegment { ident: peek#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).119), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:45: 503:54 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).98)), segments: [PathSegment { ident: base_path#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).121), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).98)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:45: 503:54 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:55: 503:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:45: 503:61 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).122), kind: MethodCall(PathSegment { ident: peek#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).123), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:65: 503:73 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).108)), segments: [PathSegment { ident: url_path#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).125), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:65: 503:73 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:74: 503:80 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:65: 503:80 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:45: 503:80 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:7462 ~ core[7d5a]::iter::adapters::peekable::{impl#5}::peek)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).118), kind: MethodCall(PathSegment { ident: peek#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).119), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:45: 503:54 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).98)), segments: [PathSegment { ident: base_path#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).121), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).98)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:45: 503:54 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:55: 503:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:45: 503:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).122), kind: MethodCall(PathSegment { ident: peek#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).123), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:65: 503:73 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).108)), segments: [PathSegment { ident: url_path#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).125), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:65: 503:73 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:74: 503:80 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:503:65: 503:80 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:7462 ~ core[7d5a]::iter::adapters::peekable::{impl#5}::peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:7462 ~ core[7d5a]::iter::adapters::peekable::{impl#5}::peek)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).258), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).259), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).260), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).261), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:13: 532:21 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).63)), segments: [PathSegment { ident: relative#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).262), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:13: 532:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:22: 532:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:13: 532:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:12: 532:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).263), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:50: 532:52 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).264), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:36: 532:49 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).75)), segments: [PathSegment { ident: base_filename#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).265), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).75)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:36: 532:49 (#0) }, Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).266), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:53: 532:65 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).87)), segments: [PathSegment { ident: url_filename#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).267), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).87)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:53: 532:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:36: 532:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).264), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:36: 532:49 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).75)), segments: [PathSegment { ident: base_filename#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).265), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).75)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:36: 532:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).266), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:53: 532:65 (#0), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).87)), segments: [PathSegment { ident: url_filename#0, hir_id: HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).267), res: Local(HirId(DefId(0:349 ~ url[a8a3]::{impl#1}::make_relative).87)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:532:53: 532:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6026 ~ alloc[5873]::string::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:381 ~ url[a8a3]::{impl#1}::query)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:383 ~ url[a8a3]::{impl#1}::fragment)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:351 ~ url[a8a3]::{impl#1}::options)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:353 ~ url[a8a3]::{impl#1}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:354 ~ url[a8a3]::{impl#1}::into_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).8), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:668:17: 668:21 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).10), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:668:17: 668:21 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:668:17: 668:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:668:36: 668:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:668:36: 668:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1144 ~ core[7d5a]::num::{impl#6}::is_ascii_alphabetic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9008 ~ core[7d5a]::iter::traits::iterator::Iterator::all)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).218), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#216), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).211)), segments: [PathSegment { ident: a#216, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).219), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).211)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#216) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#216), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).215)), segments: [PathSegment { ident: b#216, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).221), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).215)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#216) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).294), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).295), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:676:23: 676:27 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).296), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:676:23: 676:27 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:676:23: 676:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).297), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:676:41: 676:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:676:41: 676:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).303), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).304), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:16: 678:20 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).305), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:16: 678:20 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:16: 678:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).306), kind: Cast(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).307), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).308), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).309), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).310), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:37: 678:41 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).311), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:37: 678:41 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:37: 678:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:56: 678:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:37: 678:61 (#0) }, Ty { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).312), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:65: 678:68 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).313), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:65: 678:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:678:37: 678:68 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).330), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).331), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:33: 681:37 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).332), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:33: 681:37 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:33: 681:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).333), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:70: 681:71 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).334), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).335), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:52: 681:56 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).336), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:52: 681:56 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:52: 681:69 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).337), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:72: 681:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:72: 681:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:52: 681:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).334), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).335), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:52: 681:56 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).336), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:52: 681:56 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:52: 681:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).337), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:72: 681:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:681:72: 681:73 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).390), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).391), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:682:49: 682:53 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).392), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:682:49: 682:53 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:682:49: 682:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).393), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:682:67: 682:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:682:67: 682:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).402), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#225), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).395)), segments: [PathSegment { ident: a#225, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).403), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).395)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#225) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).404), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#225), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).399)), segments: [PathSegment { ident: b#225, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).405), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).399)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#225) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).476), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).477), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:37: 684:41 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).478), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:37: 684:41 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:37: 684:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).479), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:74: 684:75 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).480), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).481), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:56: 684:60 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).482), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:56: 684:60 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:56: 684:73 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).483), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:76: 684:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:76: 684:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:56: 684:77 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).480), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).481), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:56: 684:60 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).482), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:56: 684:60 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:56: 684:73 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).483), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:76: 684:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:684:76: 684:77 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).539), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).540), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:685:56: 685:60 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).541), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:685:56: 685:60 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:685:56: 685:71 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).542), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:685:74: 685:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:685:74: 685:75 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).547), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#234), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).536)), segments: [PathSegment { ident: a#234, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).548), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).536)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#234) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).549), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#234), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).544)), segments: [PathSegment { ident: b#234, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).550), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).544)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#234) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).619), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).620), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:688:21: 688:25 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).621), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:688:21: 688:25 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:688:21: 688:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).622), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).623), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:688:40: 688:44 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).624), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:688:40: 688:44 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:688:40: 688:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).673), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).674), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:689:21: 689:25 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).675), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:689:21: 689:25 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:689:21: 689:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).676), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).677), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:689:38: 689:42 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).678), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:689:38: 689:42 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:689:38: 689:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).760), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#247), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).753)), segments: [PathSegment { ident: a#247, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).761), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).753)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#247) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).762), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#247), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).757)), segments: [PathSegment { ident: b#247, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).763), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).757)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#247) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).846), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#252), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).836)), segments: [PathSegment { ident: a#252, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).847), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).836)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#252) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).848), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#252), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).843)), segments: [PathSegment { ident: b#252, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).849), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).843)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#252) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).946), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#257), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).936)), segments: [PathSegment { ident: a#257, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).947), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).936)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#257) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).948), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#257), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).943)), segments: [PathSegment { ident: b#257, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).949), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).943)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#257) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1088), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1089), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:704:16: 704:20 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1090), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:704:16: 704:20 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:704:16: 704:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1091), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1092), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:704:35: 704:39 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1093), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:704:35: 704:39 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:704:35: 704:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#266), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1101)), segments: [PathSegment { ident: a#266, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1110), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1101)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#266) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#266), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1106)), segments: [PathSegment { ident: b#266, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1112), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1106)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#266) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#271), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1189)), segments: [PathSegment { ident: a#271, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1197), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1189)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#271) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#271), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1193)), segments: [PathSegment { ident: b#271, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1199), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1193)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#271) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1270), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:43: 708:47 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1272), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:43: 708:47 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:43: 708:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1273), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:59: 708:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:59: 708:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1270), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:43: 708:47 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1272), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:43: 708:47 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:43: 708:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1273), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:59: 708:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:708:59: 708:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10418 ~ core[7d5a]::result::{impl#0}::expect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14405 ~ core[7d5a]::str::{impl#0}::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1305), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#276), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1287)), segments: [PathSegment { ident: a#276, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1306), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1287)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#276) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1307), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#276), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1302)), segments: [PathSegment { ident: b#276, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1308), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1302)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#276) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1377), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:42: 715:44 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1378), kind: Cast(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1379), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1380), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:21 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1381), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:21 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:32 (#0) }, Ty { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1382), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:36: 715:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1383), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:36: 715:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:41 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1384), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1385), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1386), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1387), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:45: 715:49 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1388), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:45: 715:49 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:45: 715:63 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:64: 715:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:45: 715:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1389), kind: Match(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1390), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1391), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1392), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:33: 716:37 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1393), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:33: 716:37 (#0) }, [Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1394), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1395), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:46: 716:50 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1396), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:46: 716:50 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:46: 716:61 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:38: 716:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:33: 716:62 (#0) }, [Arm { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1404), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#282), pat: Pat { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1403), kind: Or([Pat { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1398), kind: Lit(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1397), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:64: 716:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:64: 716:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:64: 716:68 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1400), kind: Lit(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1399), kind: Lit(Spanned { node: Byte(35), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:71: 716:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:71: 716:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:71: 716:75 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1402), kind: Lit(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1401), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:78: 716:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:78: 716:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:78: 716:82 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:716:64: 716:82 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1405), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#282) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#282) } }, Arm { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1407), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#282), pat: Pat { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1406), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#282), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1408), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#282) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#282) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#282) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1378), kind: Cast(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1379), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1380), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:21 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1381), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:21 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:32 (#0) }, Ty { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1382), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:36: 715:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1383), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:36: 715:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:17: 715:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1384), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1385), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1386), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1387), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:45: 715:49 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1388), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:45: 715:49 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:45: 715:63 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:64: 715:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:715:45: 715:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1466), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1467), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:720:43: 720:47 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1468), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:720:43: 720:47 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:720:43: 720:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1469), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:720:61: 720:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:720:61: 720:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1474), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#286), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1463)), segments: [PathSegment { ident: a#286, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1475), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1463)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#286) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1476), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#286), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1471)), segments: [PathSegment { ident: b#286, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1477), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1471)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#286) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1550), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1551), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:721:41: 721:45 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1552), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:721:41: 721:45 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:721:41: 721:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1553), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:721:59: 721:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:721:59: 721:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1558), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#291), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1547)), segments: [PathSegment { ident: a#291, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1559), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1547)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#291) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1560), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#291), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1555)), segments: [PathSegment { ident: b#291, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1561), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1555)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#291) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1634), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1635), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:722:39: 722:43 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1636), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:722:39: 722:43 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:722:39: 722:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1637), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:722:57: 722:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:722:57: 722:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1642), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#296), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1631)), segments: [PathSegment { ident: a#296, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1643), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1631)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#296) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1644), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#296), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1639)), segments: [PathSegment { ident: b#296, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1645), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1639)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#296) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1724), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#301), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1715)), segments: [PathSegment { ident: a#301, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1725), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1715)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#301) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1726), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#301), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1721)), segments: [PathSegment { ident: b#301, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1727), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1721)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#301) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1805), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#306), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1797)), segments: [PathSegment { ident: a#306, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1806), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1797)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#306) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1807), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#306), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1802)), segments: [PathSegment { ident: b#306, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1808), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1802)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#306) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ url[a8a3]::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1888), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1889), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:727:41: 727:45 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1890), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:727:41: 727:45 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:727:41: 727:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1891), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:727:59: 727:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:727:59: 727:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1900), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#311), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1893)), segments: [PathSegment { ident: a#311, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1901), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1893)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#311) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1902), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#311), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1897)), segments: [PathSegment { ident: b#311, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1903), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1897)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#311) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1974), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1975), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:728:41: 728:45 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1976), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:728:41: 728:45 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:728:41: 728:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1977), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:728:59: 728:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:728:59: 728:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1986), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#316), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1979)), segments: [PathSegment { ident: a#316, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1987), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1979)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#316) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1988), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#316), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1983)), segments: [PathSegment { ident: b#316, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1989), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).1983)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#316) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2062), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2063), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:729:45: 729:49 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2064), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:729:45: 729:49 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:729:45: 729:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2065), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:729:63: 729:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:729:63: 729:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2070), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#321), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2059)), segments: [PathSegment { ident: a#321, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2071), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2059)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#321) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2072), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#321), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2067)), segments: [PathSegment { ident: b#321, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2073), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2067)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#321) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2149), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:731:45: 731:49 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2151), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:731:45: 731:49 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:731:45: 731:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2152), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:731:63: 731:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:731:63: 731:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2157), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#326), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2146)), segments: [PathSegment { ident: a#326, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2158), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2146)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#326) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#326), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2154)), segments: [PathSegment { ident: b#326, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2160), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#326) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:735:21: 735:26 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2230)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2239), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2230)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:735:21: 735:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2240), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2241), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:735:30: 735:34 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2242), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:735:30: 735:34 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:735:30: 735:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2304), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#335), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2297)), segments: [PathSegment { ident: a#335, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2305), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#335) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2306), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#335), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2301)), segments: [PathSegment { ident: b#335, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2307), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2301)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#335) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2385), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:739:21: 739:26 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2377)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2386), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2377)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:739:21: 739:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2387), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2388), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:739:30: 739:34 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2389), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:739:30: 739:34 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:739:30: 739:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2451), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#344), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2444)), segments: [PathSegment { ident: a#344, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2452), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2444)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#344) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2453), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#344), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2448)), segments: [PathSegment { ident: b#344, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2454), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2448)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#344) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Tuple([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }]) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2540), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:743:21: 743:35 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2527)), segments: [PathSegment { ident: fragment_start#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2541), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2527)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:743:21: 743:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2542), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:743:38: 743:49 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2524)), segments: [PathSegment { ident: query_start#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2543), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2524)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:743:38: 743:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10418 ~ core[7d5a]::result::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ url[a8a3]::{impl#1}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:353 ~ url[a8a3]::{impl#1}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2624), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#353), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2614)), segments: [PathSegment { ident: a#353, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2625), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2614)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#353) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2626), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#353), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2621)), segments: [PathSegment { ident: b#353, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2627), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2621)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#353) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2706), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#358), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2697)), segments: [PathSegment { ident: a#358, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2707), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2697)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#358) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2708), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#358), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2703)), segments: [PathSegment { ident: b#358, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2709), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2703)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#358) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2788), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#363), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2779)), segments: [PathSegment { ident: a#363, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2789), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2779)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#363) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2790), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#363), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2785)), segments: [PathSegment { ident: b#363, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2791), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2785)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#363) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2870), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#368), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2861)), segments: [PathSegment { ident: a#368, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2871), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2861)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#368) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2872), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#368), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2867)), segments: [PathSegment { ident: b#368, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2873), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2867)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#368) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2952), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#373), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2943)), segments: [PathSegment { ident: a#373, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2953), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2943)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#373) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2954), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#373), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2949)), segments: [PathSegment { ident: b#373, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2955), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2949)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#373) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3022), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:23: 753:25 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3023), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3024), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:13: 753:17 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3025), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:13: 753:17 (#0) }, host#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:13: 753:22 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3026), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3027), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:26: 753:31 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2606)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3028), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2606)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:26: 753:31 (#0) }, host#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:26: 753:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:13: 753:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3029), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:53: 756:55 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3030), kind: Tup([Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3031), kind: MethodCall(PathSegment { ident: host_str#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3032), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3033), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:18: 756:22 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3034), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:18: 756:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:23: 756:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:18: 756:33 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3035), kind: MethodCall(PathSegment { ident: host_str#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3036), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3037), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:35: 756:40 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2606)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3038), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2606)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:35: 756:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:41: 756:51 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:35: 756:51 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:17: 756:52 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3039), kind: Tup([Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3040), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:57: 756:61 (#0), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), segments: [PathSegment { ident: None#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3041), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:57: 756:61 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3042), kind: Call(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3043), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:63: 756:67 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3044), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:63: 756:67 (#0) }, [Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3045), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:68: 756:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:68: 756:70 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:63: 756:71 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:56: 756:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:17: 756:72 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3023), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3024), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:13: 753:17 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3025), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:13: 753:17 (#0) }, host#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:13: 753:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3026), kind: Field(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3027), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:26: 753:31 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2606)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3028), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2606)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:26: 753:31 (#0) }, host#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:753:26: 753:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3030), kind: Tup([Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3031), kind: MethodCall(PathSegment { ident: host_str#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3032), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3033), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:18: 756:22 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3034), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:18: 756:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:23: 756:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:18: 756:33 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3035), kind: MethodCall(PathSegment { ident: host_str#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3036), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3037), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:35: 756:40 (#0), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2606)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3038), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).2606)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:35: 756:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:41: 756:51 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:35: 756:51 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:17: 756:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3039), kind: Tup([Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3040), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:57: 756:61 (#0), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), segments: [PathSegment { ident: None#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3041), res: Def(Ctor(Variant, Const), DefId(2:37172 ~ core[7d5a]::option::Option::None::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:57: 756:61 (#0) }, Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3042), kind: Call(Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3043), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:63: 756:67 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3044), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:63: 756:67 (#0) }, [Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3045), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:68: 756:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:68: 756:70 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:63: 756:71 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:756:56: 756:72 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:367 ~ url[a8a3]::{impl#1}::host_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:367 ~ url[a8a3]::{impl#1}::host_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Tuple([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }]) }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Tuple([Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({}) }, Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }]) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Tuple([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }]) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#382), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3097)), segments: [PathSegment { ident: a#382, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3107), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3097)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#382) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#382), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3103)), segments: [PathSegment { ident: b#382, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3109), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3103)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#382) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3188), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#387), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3179)), segments: [PathSegment { ident: a#387, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3189), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3179)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#387) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3190), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#387), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3185)), segments: [PathSegment { ident: b#387, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3191), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3185)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#387) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3270), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#392), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3261)), segments: [PathSegment { ident: a#392, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3271), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3261)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#392) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3272), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#392), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3267)), segments: [PathSegment { ident: b#392, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3273), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3267)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#392) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3352), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#397), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3343)), segments: [PathSegment { ident: a#397, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3353), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3343)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:24: 659:25 (#397) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3354), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#397), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3349)), segments: [PathSegment { ident: b#397, hir_id: HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3355), res: Local(HirId(DefId(0:355 ~ url[a8a3]::{impl#1}::check_invariants).3349)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:659:29: 659:30 (#397) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1288 ~ core[7d5a]::hint::must_use)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5104 ~ alloc[5873]::fmt::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:358 ~ url[a8a3]::{impl#1}::origin)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ url[a8a3]::origin::url_origin)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ url[a8a3]::{impl#1}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).9), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:23: 911:27 (#0), res: Local(HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).12), res: Local(HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:23: 911:27 (#0) }, [Expr { hir_id: HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).13), kind: Field(Expr { hir_id: HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:36: 911:40 (#0), res: Local(HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).15), res: Local(HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:36: 911:40 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:36: 911:51 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:28: 911:52 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:23: 911:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority).16), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:56: 911:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:911:56: 911:60 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(0:362 ~ url[a8a3]::{impl#1}::authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).14), kind: MethodCall(PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:12: 949:16 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).17), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:12: 949:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:17: 949:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:12: 949:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).18), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:52: 949:53 (#0) }, Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).19), kind: Field(Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:36: 949:40 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).21), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:36: 949:40 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:36: 949:51 (#0) }, Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).22), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:70: 949:71 (#0) }, Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).23), kind: Field(Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:58 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).25), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:58 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:69 (#0) }, Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:72: 949:92 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).27), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:72: 949:92 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:92 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:36: 949:92 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).19), kind: Field(Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:36: 949:40 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).21), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:36: 949:40 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:36: 949:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).22), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:70: 949:71 (#0) }, Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).23), kind: Field(Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:58 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).25), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:58 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:69 (#0) }, Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:72: 949:92 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).27), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:72: 949:92 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:92 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).23), kind: Field(Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:58 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).25), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:58 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:54: 949:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:72: 949:92 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).27), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:949:72: 949:92 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).35), kind: Field(Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:24: 950:28 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).37), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:24: 950:28 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:24: 950:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:42: 950:62 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).39), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:42: 950:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).35), kind: Field(Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:24: 950:28 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).37), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:24: 950:28 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:24: 950:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:42: 950:62 (#0), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).39), res: Local(HirId(DefId(0:362 ~ url[a8a3]::{impl#1}::authority).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:950:42: 950:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base).12), kind: Field(Expr { hir_id: HirId(DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:983:21: 983:25 (#0), res: Local(HirId(DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base).14), res: Local(HirId(DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:983:21: 983:25 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:983:21: 983:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base).15), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:983:39: 983:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:983:39: 983:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:364 ~ url[a8a3]::{impl#1}::username)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).14), kind: MethodCall(PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:12: 1010:16 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).17), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:12: 1010:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:17: 1010:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:12: 1010:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).18), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:54: 1010:55 (#0) }, Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).19), kind: Field(Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:36: 1010:40 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).21), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:36: 1010:40 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:36: 1010:53 (#0) }, Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).22), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:72: 1010:73 (#0) }, Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).23), kind: Field(Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:60 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).25), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:60 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:71 (#0) }, Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:74: 1010:94 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).27), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:74: 1010:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:36: 1010:94 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).19), kind: Field(Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:36: 1010:40 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).21), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:36: 1010:40 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:36: 1010:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).22), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:72: 1010:73 (#0) }, Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).23), kind: Field(Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:60 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).25), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:60 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:71 (#0) }, Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:74: 1010:94 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).27), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:74: 1010:94 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:94 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).23), kind: Field(Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:60 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).25), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:60 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:56: 1010:71 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:74: 1010:94 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).27), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1010:74: 1010:94 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).35), kind: Field(Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:24: 1011:28 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).37), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:24: 1011:28 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:24: 1011:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:42: 1011:62 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).39), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:42: 1011:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).35), kind: Field(Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:24: 1011:28 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).37), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:24: 1011:28 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:24: 1011:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:42: 1011:62 (#0), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), segments: [PathSegment { ident: scheme_separator_len#0, hir_id: HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).39), res: Local(HirId(DefId(0:364 ~ url[a8a3]::{impl#1}::username).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1011:42: 1011:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:365 ~ url[a8a3]::{impl#1}::password)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).5), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:13: 1045:15 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).6), kind: MethodCall(PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:12: 1044:16 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).9), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:12: 1044:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:17: 1044:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:12: 1044:32 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).10), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:34: 1045:36 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).11), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:20 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).13), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:20 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:33 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).14), kind: Cast(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).15), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).17), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:41 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).19), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:41 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:56: 1045:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:61 (#0) }, Ty { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:65: 1045:68 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).21), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:65: 1045:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:12: 1045:68 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).22), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:48: 1046:50 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).23), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).24), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:16: 1046:20 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).26), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:16: 1046:20 (#0) }, [Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).27), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:29: 1046:33 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).29), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:29: 1046:33 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:29: 1046:46 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:21: 1046:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:16: 1046:47 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).30), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:51: 1046:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:51: 1046:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:16: 1046:55 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).6), kind: MethodCall(PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:12: 1044:16 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).9), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:12: 1044:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:17: 1044:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1044:12: 1044:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).10), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:34: 1045:36 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).11), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:20 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).13), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:20 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:33 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).14), kind: Cast(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).15), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).17), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:41 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).19), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:41 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:56: 1045:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:61 (#0) }, Ty { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:65: 1045:68 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).21), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:65: 1045:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:68 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).11), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:20 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).13), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:20 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:16: 1045:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).14), kind: Cast(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).15), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).17), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:41 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).19), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:41 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:56: 1045:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:61 (#0) }, Ty { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:65: 1045:68 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).21), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:65: 1045:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1045:37: 1045:68 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).23), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).24), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:16: 1046:20 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).26), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:16: 1046:20 (#0) }, [Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).27), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:29: 1046:33 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).29), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:29: 1046:33 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:29: 1046:46 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:21: 1046:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:16: 1046:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).30), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:51: 1046:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1046:51: 1046:55 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).38), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).39), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:27: 1048:31 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).41), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:27: 1048:31 (#0) }, [Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).42), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:56: 1048:57 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).43), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:40: 1048:44 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).45), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:40: 1048:44 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:40: 1048:55 (#0) }, Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).46), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:58: 1048:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:58: 1048:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:40: 1048:59 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:32: 1048:60 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:27: 1048:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).47), kind: Lit(Spanned { node: Byte(64), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:64: 1048:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:64: 1048:68 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).43), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:40: 1048:44 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).45), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:40: 1048:44 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:40: 1048:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).46), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:58: 1048:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1048:58: 1048:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).70), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:29: 1049:33 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).72), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:29: 1049:33 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:29: 1049:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).73), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:49: 1049:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:49: 1049:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).76), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:52: 1049:56 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).78), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:52: 1049:56 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:52: 1049:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).79), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:70: 1049:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:70: 1049:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).70), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:29: 1049:33 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).72), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:29: 1049:33 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:29: 1049:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).73), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:49: 1049:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:49: 1049:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).76), kind: Field(Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:52: 1049:56 (#0), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).78), res: Local(HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:52: 1049:56 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:52: 1049:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:365 ~ url[a8a3]::{impl#1}::password).79), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:70: 1049:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1049:70: 1049:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:367 ~ url[a8a3]::{impl#1}::host_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ url[a8a3]::{impl#1}::domain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ url[a8a3]::{impl#1}::port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:371 ~ url[a8a3]::{impl#1}::port_or_known_default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ url[a8a3]::parser::default_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:373 ~ url[a8a3]::{impl#1}::socket_addrs)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:375 ~ url[a8a3]::{impl#1}::socket_addrs::io_result)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9690 ~ core[7d5a]::option::{impl#0}::ok_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:3244 ~ std[e3cd]::io::error::{impl#8}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:375 ~ url[a8a3]::{impl#1}::socket_addrs::io_result)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:375 ~ url[a8a3]::{impl#1}::socket_addrs::io_result)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:371 ~ url[a8a3]::{impl#1}::port_or_known_default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3980 ~ std[e3cd]::net::socket_addr::ToSocketAddrs::to_socket_addrs)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5738 ~ alloc[5873]::slice::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:336 ~ alloc[5873]::boxed::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ url[a8a3]::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:379 ~ url[a8a3]::{impl#1}::path_segments)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ url[a8a3]::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14392 ~ core[7d5a]::str::{impl#0}::strip_prefix)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:381 ~ url[a8a3]::{impl#1}::query)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).32), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).33), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1411:31: 1411:35 (#0), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).35), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1411:31: 1411:35 (#0) }, [Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1411:44: 1411:55 (#0), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).19)), segments: [PathSegment { ident: query_start#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).37), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1411:44: 1411:55 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1411:36: 1411:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1411:31: 1411:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).38), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1411:60: 1411:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1411:60: 1411:64 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1412:33: 1412:44 (#0), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).19)), segments: [PathSegment { ident: query_start#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).62), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).19)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1412:33: 1412:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).63), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1412:47: 1412:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1412:47: 1412:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).81), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).82), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1415:31: 1415:35 (#0), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).84), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1415:31: 1415:35 (#0) }, [Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1415:44: 1415:55 (#0), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).67)), segments: [PathSegment { ident: query_start#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).86), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1415:44: 1415:55 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1415:36: 1415:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1415:31: 1415:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).87), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1415:60: 1415:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1415:60: 1415:64 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1416:33: 1416:44 (#0), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).67)), segments: [PathSegment { ident: query_start#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).111), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1416:33: 1416:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).112), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1416:47: 1416:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1416:47: 1416:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1416:33: 1416:44 (#0), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).67)), segments: [PathSegment { ident: query_start#0, hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).111), res: Local(HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1416:33: 1416:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:381 ~ url[a8a3]::{impl#1}::query).112), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1416:47: 1416:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1416:47: 1416:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:382 ~ url[a8a3]::{impl#1}::query_pairs)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:15 ~ form_urlencoded[181d]::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:381 ~ url[a8a3]::{impl#1}::query)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:383 ~ url[a8a3]::{impl#1}::fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).18), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).19), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1484:27: 1484:31 (#0), res: Local(HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).21), res: Local(HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1484:27: 1484:31 (#0) }, [Expr { hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1484:40: 1484:45 (#0), res: Local(HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).10)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).23), res: Local(HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1484:40: 1484:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1484:32: 1484:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1484:27: 1484:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).24), kind: Lit(Spanned { node: Byte(35), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1484:50: 1484:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1484:50: 1484:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1485:24: 1485:29 (#0), res: Local(HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).10)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).45), res: Local(HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1485:24: 1485:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:383 ~ url[a8a3]::{impl#1}::fragment).46), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1485:32: 1485:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1485:32: 1485:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:385 ~ url[a8a3]::{impl#1}::mutate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ url[a8a3]::parser::{impl#10}::for_setter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:2182 ~ core[7d5a]::mem::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:385 ~ url[a8a3]::{impl#1}::mutate).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1491:22: 1491:23 (#0), res: Local(HirId(DefId(0:385 ~ url[a8a3]::{impl#1}::mutate).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:385 ~ url[a8a3]::{impl#1}::mutate).25), res: Local(HirId(DefId(0:385 ~ url[a8a3]::{impl#1}::mutate).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1491:22: 1491:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).19), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).20), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1522:27: 1522:31 (#0), res: Local(HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).22), res: Local(HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1522:27: 1522:31 (#0) }, [Expr { hir_id: HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1522:40: 1522:45 (#0), res: Local(HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).8)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).24), res: Local(HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1522:40: 1522:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1522:32: 1522:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1522:27: 1522:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:388 ~ url[a8a3]::{impl#1}::set_fragment).25), kind: Lit(Spanned { node: Byte(35), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1522:50: 1522:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1522:50: 1522:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:385 ~ url[a8a3]::{impl#1}::mutate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:240 ~ url[a8a3]::parser::{impl#10}::parse_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).20), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).21), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1538:27: 1538:31 (#0), res: Local(HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).23), res: Local(HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1538:27: 1538:31 (#0) }, [Expr { hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1538:40: 1538:45 (#0), res: Local(HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).12)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).25), res: Local(HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1538:40: 1538:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1538:32: 1538:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1538:27: 1538:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).26), kind: Lit(Spanned { node: Byte(35), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1538:50: 1538:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1538:50: 1538:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1539:39: 1539:44 (#0), res: Local(HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).12)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).50), res: Local(HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1539:39: 1539:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment).51), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1539:47: 1539:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1539:47: 1539:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:392 ~ url[a8a3]::{impl#1}::restore_already_parsed_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:393 ~ url[a8a3]::{impl#1}::set_query)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).28), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).29), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1579:27: 1579:31 (#0), res: Local(HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).31), res: Local(HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1579:27: 1579:31 (#0) }, [Expr { hir_id: HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1579:40: 1579:45 (#0), res: Local(HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).15)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).33), res: Local(HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1579:40: 1579:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1579:32: 1579:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1579:27: 1579:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:393 ~ url[a8a3]::{impl#1}::set_query).34), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1579:50: 1579:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1579:50: 1579:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:385 ~ url[a8a3]::{impl#1}::mutate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:237 ~ url[a8a3]::parser::{impl#10}::parse_query)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:151 ~ url[a8a3]::parser::{impl#5}::new_trim_tab_and_newlines)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9659 ~ core[7d5a]::option::{impl#0}::is_none)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:346 ~ url[a8a3]::{impl#1}::strip_trailing_spaces_from_opaque_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:392 ~ url[a8a3]::{impl#1}::restore_already_parsed_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:390 ~ url[a8a3]::{impl#1}::take_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).27), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1643:27: 1643:31 (#0), res: Local(HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).30), res: Local(HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1643:27: 1643:31 (#0) }, [Expr { hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1643:40: 1643:45 (#0), res: Local(HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).16)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).32), res: Local(HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1643:40: 1643:45 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1643:32: 1643:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1643:27: 1643:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).33), kind: Lit(Spanned { node: Byte(63), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1643:50: 1643:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1643:50: 1643:54 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(20:67 ~ form_urlencoded[181d]::{impl#6}::for_suffix)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1655:56: 1655:67 (#0), res: Local(HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).12)), segments: [PathSegment { ident: query_start#0, hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).118), res: Local(HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1655:56: 1655:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).119), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).120), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:395 ~ url[a8a3]::{impl#1}::query_pairs_mut).121), kind: Lit(Spanned { node: Str("?", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1655:70: 1655:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1655:70: 1655:73 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1655:74: 1655:79 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1655:70: 1655:79 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:396 ~ url[a8a3]::{impl#1}::take_after_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:397 ~ url[a8a3]::{impl#1}::set_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:396 ~ url[a8a3]::{impl#1}::take_after_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:385 ~ url[a8a3]::{impl#1}::mutate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:233 ~ url[a8a3]::parser::{impl#10}::parse_cannot_be_a_base_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:226 ~ url[a8a3]::parser::{impl#10}::parse_path_start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:399 ~ url[a8a3]::{impl#1}::path_segments_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:259 ~ url[a8a3]::path_segments::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1748:13: 1748:19 (#0), res: Local(HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).46)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).57), res: Local(HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1748:13: 1748:19 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1751:13: 1751:19 (#0), res: Local(HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).46)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).73), res: Local(HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1751:13: 1751:19 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ url[a8a3]::{impl#1}::set_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).7), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:29: 1819:31 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).8), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).9), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:13: 1819:17 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).12), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:13: 1819:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:18: 1819:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:13: 1819:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:12: 1819:28 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).13), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:44: 1819:46 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:36 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).17), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:37: 1819:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:43 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).18), kind: Call(Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:51 (#0) }, [Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).21), kind: Call(Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:64 (#0) }, [Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:65: 1819:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:65: 1819:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:12: 1819:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:87: 1819:89 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).27), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:73: 1819:77 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).30), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:73: 1819:77 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:78: 1819:86 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:73: 1819:86 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).31), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:90: 1819:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:90: 1819:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:73: 1819:96 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).8), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).9), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:13: 1819:17 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).12), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:13: 1819:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:18: 1819:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:13: 1819:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:12: 1819:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).13), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:44: 1819:46 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:36 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).17), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:37: 1819:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:43 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).18), kind: Call(Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:51 (#0) }, [Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).21), kind: Call(Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:64 (#0) }, [Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:65: 1819:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:65: 1819:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:36 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).17), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:37: 1819:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:32: 1819:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).18), kind: Call(Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:51 (#0) }, [Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).21), kind: Call(Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:64 (#0) }, [Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:65: 1819:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:65: 1819:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:52: 1819:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:47: 1819:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).27), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:73: 1819:77 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).30), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:73: 1819:77 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:78: 1819:86 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:73: 1819:86 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).31), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:90: 1819:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1819:90: 1819:96 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).44), kind: MethodCall(PathSegment { ident: is_some#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:12: 1822:16 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).4)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).47), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:12: 1822:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:17: 1822:26 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:12: 1822:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).48), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:35: 1822:37 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:30: 1822:34 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).4)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).50), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:30: 1822:34 (#0) }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).51), kind: Call(Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:38: 1822:58 (#0), res: Def(Fn, DefId(0:147 ~ url[a8a3]::parser::default_port)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).53), res: Def(Mod, DefId(0:108 ~ url[a8a3]::parser)), args: None, infer_args: true }, PathSegment { ident: default_port#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).54), res: Def(Fn, DefId(0:147 ~ url[a8a3]::parser::default_port)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:38: 1822:58 (#0) }, [Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).55), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).56), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:59: 1822:63 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).58), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:59: 1822:63 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:64: 1822:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:59: 1822:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:38: 1822:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:30: 1822:73 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:30: 1822:34 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).4)), segments: [PathSegment { ident: port#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).50), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:30: 1822:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).51), kind: Call(Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:38: 1822:58 (#0), res: Def(Fn, DefId(0:147 ~ url[a8a3]::parser::default_port)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).53), res: Def(Mod, DefId(0:108 ~ url[a8a3]::parser)), args: None, infer_args: true }, PathSegment { ident: default_port#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).54), res: Def(Fn, DefId(0:147 ~ url[a8a3]::parser::default_port)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:38: 1822:58 (#0) }, [Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).55), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).56), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:59: 1822:63 (#0), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).58), res: Local(HirId(DefId(0:402 ~ url[a8a3]::{impl#1}::set_port).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:59: 1822:63 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:64: 1822:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:59: 1822:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1822:38: 1822:73 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ url[a8a3]::parser::default_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6029 ~ alloc[5873]::string::{impl#0}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).51), kind: Field(Expr { hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1835:30: 1835:34 (#0), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).53), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1835:30: 1835:34 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1835:30: 1835:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).54), kind: Field(Expr { hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1835:48: 1835:52 (#0), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).56), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1835:48: 1835:52 (#0) }, host_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1835:48: 1835:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11086 ~ core[7d5a]::fmt::Write::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1857:21: 1857:27 (#0), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).228)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).239), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).228)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1857:21: 1857:27 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).254), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1860:21: 1860:27 (#0), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).228)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).255), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).228)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1860:21: 1860:27 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:405 ~ url[a8a3]::{impl#1}::set_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).43), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:32: 1958:34 (#0) }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).44), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:16: 1958:20 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).37)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).47), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:16: 1958:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:21: 1958:31 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:16: 1958:31 (#0) }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).48), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).49), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:35: 1958:46 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).51), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:35: 1958:46 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:47: 1958:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:35: 1958:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:16: 1958:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).52), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).53), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).54), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:64: 1958:75 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).56), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:64: 1958:75 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:76: 1958:85 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:64: 1958:85 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:63: 1958:85 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).44), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:16: 1958:20 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).37)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).47), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:16: 1958:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:21: 1958:31 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:16: 1958:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).48), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).49), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:35: 1958:46 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).51), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:35: 1958:46 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:47: 1958:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1958:35: 1958:59 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).76), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).77), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).78), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:17: 1963:21 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).37)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).80), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:17: 1963:21 (#0) }, [Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).81), kind: Lit(Spanned { node: Char('['), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:34: 1963:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:34: 1963:37 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:22: 1963:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:17: 1963:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:16: 1963:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).82), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).83), kind: MethodCall(PathSegment { ident: ends_with#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).84), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:43: 1963:47 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).37)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).86), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:43: 1963:47 (#0) }, [Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).87), kind: Lit(Spanned { node: Char(']'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:58: 1963:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:58: 1963:61 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:48: 1963:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:43: 1963:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1963:42: 1963:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14340 ~ core[7d5a]::str::{impl#0}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ url[a8a3]::host::{impl#2}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ url[a8a3]::host::{impl#2}::parse_opaque)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).227), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).228), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).229), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:16: 1982:27 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).230), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:16: 1982:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:28: 1982:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:16: 1982:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).231), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).232), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).233), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).234), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:45: 1982:56 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), segments: [PathSegment { ident: scheme_type#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).235), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:45: 1982:56 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:57: 1982:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:45: 1982:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1982:44: 1982:66 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).249), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).250), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).251), kind: Field(Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).252), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:23: 1984:27 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).253), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:23: 1984:27 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:23: 1984:41 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:42: 1984:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:23: 1984:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).254), kind: Cast(Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).255), kind: Field(Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).256), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:51: 1984:55 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).257), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:51: 1984:55 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:51: 1984:66 (#0) }, Ty { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).258), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:70: 1984:75 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).259), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:70: 1984:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1984:51: 1984:75 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).277), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).278), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).279), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:27: 1987:31 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).280), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:27: 1987:31 (#0) }, [Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).281), kind: Field(Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).282), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:40: 1987:44 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).283), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:40: 1987:44 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:40: 1987:55 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:32: 1987:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:27: 1987:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).284), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:60: 1987:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1987:60: 1987:64 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).304), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).305), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).306), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:27: 1988:31 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).307), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:27: 1988:31 (#0) }, [Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).308), kind: Field(Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).309), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:40: 1988:44 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).310), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:40: 1988:44 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:40: 1988:55 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:32: 1988:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:27: 1988:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).311), kind: Lit(Spanned { node: Byte(47), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:60: 1988:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1988:60: 1988:64 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).333), kind: Field(Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).334), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1991:17: 1991:21 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).335), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1991:17: 1991:21 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1991:17: 1991:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).336), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1991:35: 1991:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1991:35: 1991:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).341), kind: Field(Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).342), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1993:17: 1993:21 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).343), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1993:17: 1993:21 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1993:17: 1993:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).344), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1993:35: 1993:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1993:35: 1993:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6029 ~ alloc[5873]::string::{impl#0}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).370), kind: Field(Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).371), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1998:26: 1998:30 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).372), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1998:26: 1998:30 (#0) }, path_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1998:26: 1998:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).373), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1998:44: 1998:58 (#0), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).347)), segments: [PathSegment { ident: new_path_start#0, hir_id: HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).374), res: Local(HirId(DefId(0:405 ~ url[a8a3]::{impl#1}::set_host).347)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1998:44: 1998:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).64), kind: MethodCall(PathSegment { ident: slice#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).65), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:27: 2024:31 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).67), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:27: 2024:31 (#0) }, [Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).68), kind: Struct(LangItem(Range, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:38: 2024:70 (#0)), [ExprField { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).72), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).69), kind: Field(Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:38: 2024:42 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).71), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:38: 2024:42 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:38: 2024:53 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:38: 2024:53 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).76), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).73), kind: Field(Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:55: 2024:59 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).75), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:55: 2024:59 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:55: 2024:70 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:55: 2024:70 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:38: 2024:70 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:32: 2024:71 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:27: 2024:71 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).77), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:75: 2024:78 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2024:75: 2024:78 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).97), kind: Field(Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2025:27: 2025:31 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).99), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2025:27: 2025:31 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2025:27: 2025:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).100), kind: Field(Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2025:48: 2025:52 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).102), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2025:48: 2025:52 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2025:48: 2025:63 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11086 ~ core[7d5a]::fmt::Write::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11086 ~ core[7d5a]::fmt::Write::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).299), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2048:9: 2048:15 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).300), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2048:9: 2048:15 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2050:13: 2050:19 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).316), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2050:13: 2050:19 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).331), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2053:13: 2053:19 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).332), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2053:13: 2053:19 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:408 ~ url[a8a3]::{impl#1}::set_ip_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:409 ~ url[a8a3]::{impl#1}::set_password)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).7), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:29: 2137:31 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).8), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).9), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:13: 2137:17 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).12), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:13: 2137:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:18: 2137:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:13: 2137:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:12: 2137:28 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).13), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:44: 2137:46 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:36 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).17), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:37: 2137:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:43 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).18), kind: Call(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:51 (#0) }, [Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).21), kind: Call(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:64 (#0) }, [Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:65: 2137:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:65: 2137:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:12: 2137:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:87: 2137:89 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).27), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:73: 2137:77 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).30), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:73: 2137:77 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:78: 2137:86 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:73: 2137:86 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).31), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:90: 2137:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:90: 2137:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:73: 2137:96 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).8), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).9), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:13: 2137:17 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).12), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:13: 2137:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:18: 2137:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:13: 2137:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:12: 2137:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).13), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:44: 2137:46 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:36 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).17), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:37: 2137:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:43 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).18), kind: Call(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:51 (#0) }, [Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).21), kind: Call(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:64 (#0) }, [Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:65: 2137:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:65: 2137:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:36 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).17), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:37: 2137:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:32: 2137:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).18), kind: Call(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:51 (#0) }, [Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).21), kind: Call(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:64 (#0) }, [Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:65: 2137:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:65: 2137:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:52: 2137:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:47: 2137:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).27), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:73: 2137:77 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).30), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:73: 2137:77 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:78: 2137:86 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:73: 2137:86 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).31), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:90: 2137:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2137:90: 2137:96 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:9674 ~ core[7d5a]::option::{impl#0}::unwrap_or_default)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2156:13: 2156:19 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).164), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2156:13: 2156:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2157:13: 2157:19 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).172), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2157:13: 2157:19 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2159:17: 2159:23 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).188), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2159:17: 2159:23 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).203), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2162:17: 2162:23 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).204), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2162:17: 2162:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).223), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).224), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).225), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:19: 2166:23 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).226), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:19: 2166:23 (#0) }, [Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).227), kind: Field(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:32: 2166:36 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).229), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:32: 2166:36 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:32: 2166:49 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:24: 2166:50 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:19: 2166:50 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).230), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:54: 2166:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2166:54: 2166:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).234), kind: MethodCall(PathSegment { ident: byte_at#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).235), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).236), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:44: 2168:48 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).237), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:44: 2168:48 (#0) }, [Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).238), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:73: 2168:74 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).239), kind: Field(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:57: 2168:61 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).241), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:57: 2168:61 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:57: 2168:72 (#0) }, Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).242), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:75: 2168:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:75: 2168:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:57: 2168:76 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:49: 2168:77 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:44: 2168:77 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).243), kind: Lit(Spanned { node: Byte(64), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:81: 2168:85 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:81: 2168:85 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).239), kind: Field(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:57: 2168:61 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).241), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:57: 2168:61 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:57: 2168:72 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).242), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:75: 2168:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2168:75: 2168:76 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).268), kind: Field(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2170:34: 2170:38 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).270), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2170:34: 2170:38 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2170:34: 2170:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).271), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2170:52: 2170:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2170:52: 2170:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).276), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2171:34: 2171:48 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).273)), segments: [PathSegment { ident: username_start#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).277), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).273)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2171:34: 2171:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).278), kind: Field(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).279), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2171:52: 2171:56 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).280), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2171:52: 2171:56 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2171:52: 2171:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).301), kind: Field(Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).302), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2176:17: 2176:21 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).303), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2176:17: 2176:21 (#0) }, host_start#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2176:17: 2176:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).304), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2176:35: 2176:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2176:35: 2176:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6029 ~ alloc[5873]::string::{impl#0}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).329), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2179:26: 2179:29 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).307)), segments: [PathSegment { ident: end#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).330), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).307)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2179:26: 2179:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).331), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2179:32: 2179:37 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).288)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).332), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).288)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2179:32: 2179:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:411 ~ url[a8a3]::{impl#1}::set_username)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).7), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:29: 2231:31 (#0) }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).8), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).9), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:13: 2231:17 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).12), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:13: 2231:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:18: 2231:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:13: 2231:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:12: 2231:28 (#0) }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).13), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:44: 2231:46 (#0) }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:36 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).17), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:37: 2231:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:43 (#0) }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).18), kind: Call(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:51 (#0) }, [Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).21), kind: Call(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:64 (#0) }, [Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:65: 2231:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:65: 2231:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:12: 2231:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).26), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:87: 2231:89 (#0) }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).27), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:73: 2231:77 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).30), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:73: 2231:77 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:78: 2231:86 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:73: 2231:86 (#0) }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).31), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:90: 2231:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:90: 2231:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:73: 2231:96 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).8), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).9), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:13: 2231:17 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).12), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:13: 2231:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:18: 2231:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:13: 2231:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:12: 2231:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).13), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:44: 2231:46 (#0) }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:36 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).17), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:37: 2231:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:43 (#0) }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).18), kind: Call(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:51 (#0) }, [Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).21), kind: Call(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:64 (#0) }, [Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:65: 2231:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:65: 2231:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).14), kind: MethodCall(PathSegment { ident: host#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:36 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).17), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:37: 2231:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:32: 2231:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).18), kind: Call(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:51 (#0), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).20), res: Def(Ctor(Variant, Fn), DefId(2:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:51 (#0) }, [Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).21), kind: Call(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:64 (#0), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), segments: [PathSegment { ident: Host#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).23), res: Def(Enum, DefId(0:500 ~ url[a8a3]::host::Host)), args: None, infer_args: true }, PathSegment { ident: Domain#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).24), res: Def(Ctor(Variant, Fn), DefId(0:503 ~ url[a8a3]::host::Host::Domain::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:64 (#0) }, [Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).25), kind: Lit(Spanned { node: Str("", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:65: 2231:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:65: 2231:67 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:52: 2231:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:47: 2231:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).27), kind: MethodCall(PathSegment { ident: scheme#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:73: 2231:77 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).30), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:73: 2231:77 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:78: 2231:86 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:73: 2231:86 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).31), kind: Lit(Spanned { node: Str("file", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:90: 2231:96 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2231:90: 2231:96 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).44), kind: Field(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2234:30: 2234:34 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).46), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2234:30: 2234:34 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2234:30: 2234:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).47), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2234:48: 2234:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2234:48: 2234:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).56), kind: MethodCall(PathSegment { ident: slice#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).57), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:23: 2235:27 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).59), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:23: 2235:27 (#0) }, [Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).60), kind: Struct(LangItem(Range, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:34: 2235:65 (#0)), [ExprField { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).64), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).61), kind: Field(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:34: 2235:38 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).63), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:34: 2235:38 (#0) }, scheme_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:34: 2235:49 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:34: 2235:49 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).67), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:51: 2235:65 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).49)), segments: [PathSegment { ident: username_start#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).66), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:51: 2235:65 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:51: 2235:65 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:34: 2235:65 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:28: 2235:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:23: 2235:66 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).68), kind: Lit(Spanned { node: Str("://", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:70: 2235:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2235:70: 2235:75 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).84), kind: MethodCall(PathSegment { ident: slice#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).85), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:12: 2236:16 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).87), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:12: 2236:16 (#0) }, [Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).88), kind: Struct(LangItem(Range, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:23: 2236:56 (#0)), [ExprField { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).91), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).89), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:23: 2236:37 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).49)), segments: [PathSegment { ident: username_start#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).90), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:23: 2236:37 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:23: 2236:37 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).95), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).92), kind: Field(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:39: 2236:43 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).94), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:39: 2236:43 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:39: 2236:56 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:39: 2236:56 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:23: 2236:56 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:17: 2236:57 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:12: 2236:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:61: 2236:69 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).4)), segments: [PathSegment { ident: username#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).97), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2236:61: 2236:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(5:6003 ~ alloc[5873]::string::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:36 ~ percent_encoding[200d]::utf8_percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).175), kind: Field(Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2248:37: 2248:41 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).177), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2248:37: 2248:41 (#0) }, username_end#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2248:37: 2248:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2248:58: 2248:72 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).49)), segments: [PathSegment { ident: username_start#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).179), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2248:58: 2248:72 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14325 ~ core[7d5a]::str::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).307), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2268:9: 2268:15 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).308), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2268:9: 2268:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2269:9: 2269:15 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).316), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2269:9: 2269:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).323), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2270:9: 2270:15 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).324), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2270:9: 2270:15 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).339), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2272:13: 2272:19 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).340), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2272:13: 2272:19 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).355), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2275:13: 2275:19 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).356), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2275:13: 2275:19 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ url[a8a3]::parser::{impl#10}::for_setter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5963 ~ alloc[5873]::string::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ url[a8a3]::parser::{impl#10}::parse_scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:150 ~ url[a8a3]::parser::{impl#5}::new_no_trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).79), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:76: 2397:78 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).80), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:42: 2397:44 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).81), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).82), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:28 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).84), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:29: 2397:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:41 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).85), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).86), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).87), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:61 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), segments: [PathSegment { ident: old_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).89), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:61 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:62: 2397:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:45: 2397:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:12: 2397:75 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).90), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:44: 2399:46 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).91), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).92), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).93), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:30 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).95), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:31: 2399:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:14: 2399:43 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).96), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).97), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:62 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), segments: [PathSegment { ident: old_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).99), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:62 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:63: 2399:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:13: 2399:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:12: 2399:76 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).100), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:40: 2402:42 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).101), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).102), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:14: 2402:29 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).104), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:14: 2402:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:30: 2402:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:14: 2402:39 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).105), kind: MethodCall(PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).106), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:43: 2402:47 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).108), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:43: 2402:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:48: 2402:63 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:43: 2402:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:13: 2402:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).80), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:42: 2397:44 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).81), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).82), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:28 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).84), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:29: 2397:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:41 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).85), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).86), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).87), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:61 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), segments: [PathSegment { ident: old_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).89), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:61 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:62: 2397:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:45: 2397:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:12: 2397:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).90), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:44: 2399:46 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).91), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).92), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).93), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:30 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).95), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:31: 2399:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:14: 2399:43 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).96), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).97), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:62 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), segments: [PathSegment { ident: old_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).99), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:62 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:63: 2399:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:13: 2399:76 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).81), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).82), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:28 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).84), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:29: 2397:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:13: 2397:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).85), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).86), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).87), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:61 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), segments: [PathSegment { ident: old_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).89), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:61 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:62: 2397:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:46: 2397:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2397:45: 2397:74 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).91), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).92), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).93), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:30 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).95), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:31: 2399:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:15: 2399:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:14: 2399:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).96), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).97), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:62 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), segments: [PathSegment { ident: old_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).99), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).76)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:62 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:63: 2399:75 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2399:47: 2399:75 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).101), kind: MethodCall(PathSegment { ident: is_file#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).102), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).103), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:14: 2402:29 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).104), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:14: 2402:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:30: 2402:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:14: 2402:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).105), kind: MethodCall(PathSegment { ident: has_authority#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).106), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:43: 2402:47 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).108), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:43: 2402:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:48: 2402:63 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2402:43: 2402:63 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ url[a8a3]::parser::{impl#3}::is_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:361 ~ url[a8a3]::{impl#1}::has_authority)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).121), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).122), kind: MethodCall(PathSegment { ident: is_empty#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).123), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:13: 2407:22 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).52)), segments: [PathSegment { ident: remaining#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).125), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:13: 2407:22 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:23: 2407:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:13: 2407:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:12: 2407:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).126), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:55: 2407:57 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).127), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).128), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).129), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:39: 2407:43 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).131), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:39: 2407:43 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:44: 2407:54 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:39: 2407:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:38: 2407:54 (#0) }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).132), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).133), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:58: 2407:73 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).135), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:58: 2407:73 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:74: 2407:86 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:58: 2407:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:37: 2407:87 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ url[a8a3]::parser::{impl#5}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).127), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).128), kind: MethodCall(PathSegment { ident: has_host#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).129), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:39: 2407:43 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).131), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:39: 2407:43 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:44: 2407:54 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:39: 2407:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:38: 2407:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).132), kind: MethodCall(PathSegment { ident: is_special#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).133), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:58: 2407:73 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), segments: [PathSegment { ident: new_scheme_type#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).135), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:58: 2407:73 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:74: 2407:86 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2407:58: 2407:86 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ url[a8a3]::{impl#1}::has_host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:142 ~ url[a8a3]::parser::{impl#3}::is_special)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).200), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2418:9: 2418:15 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).201), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2418:9: 2418:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).208), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2419:9: 2419:15 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).209), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2419:9: 2419:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2420:9: 2420:15 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).217), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2420:9: 2420:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2421:9: 2421:15 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).225), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2421:9: 2421:15 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2423:13: 2423:19 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).241), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2423:13: 2423:19 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).256), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2426:13: 2426:19 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).257), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2426:13: 2426:19 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ url[a8a3]::{impl#1}::port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:402 ~ url[a8a3]::{impl#1}::set_port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:415 ~ url[a8a3]::{impl#1}::from_file_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:460 ~ url[a8a3]::path_to_file_url_segments)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:417 ~ url[a8a3]::{impl#1}::from_directory_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:415 ~ url[a8a3]::{impl#1}::from_file_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ url[a8a3]::{impl#1}::to_file_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:379 ~ url[a8a3]::{impl#1}::path_segments)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:420 ~ url[a8a3]::{impl#1}::slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:449 ~ url[a8a3]::RangeArg::slice_of)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:422 ~ url[a8a3]::{impl#1}::byte_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6002 ~ alloc[5873]::string::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:385 ~ url[a8a3]::{impl#1}::mutate).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1491:22: 1491:23 (#0), res: Local(HirId(DefId(0:385 ~ url[a8a3]::{impl#1}::mutate).4)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:385 ~ url[a8a3]::{impl#1}::mutate).25), res: Local(HirId(DefId(0:385 ~ url[a8a3]::{impl#1}::mutate).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1491:22: 1491:23 (#0) }
[DEBUG] lang item being silently ignored, 
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1748:13: 1748:19 (#0), res: Local(HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).46)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).57), res: Local(HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1748:13: 1748:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1751:13: 1751:19 (#0), res: Local(HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).46)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).73), res: Local(HirId(DefId(0:400 ~ url[a8a3]::{impl#1}::restore_after_path).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1751:13: 1751:19 (#0) }
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1857:21: 1857:27 (#0), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).228)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).239), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).228)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1857:21: 1857:27 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).254), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1860:21: 1860:27 (#0), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).228)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).255), res: Local(HirId(DefId(0:403 ~ url[a8a3]::{impl#1}::set_port_internal).228)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:1860:21: 1860:27 (#0) }
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).299), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2048:9: 2048:15 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).300), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2048:9: 2048:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2050:13: 2050:19 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).316), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2050:13: 2050:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).331), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2053:13: 2053:19 (#0), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).332), res: Local(HirId(DefId(0:406 ~ url[a8a3]::{impl#1}::set_host_internal).297)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2053:13: 2053:19 (#0) }
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2156:13: 2156:19 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).164), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2156:13: 2156:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2157:13: 2157:19 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).172), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2157:13: 2157:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2159:17: 2159:23 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).188), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2159:17: 2159:23 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).203), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2162:17: 2162:23 (#0), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).204), res: Local(HirId(DefId(0:409 ~ url[a8a3]::{impl#1}::set_password).154)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2162:17: 2162:23 (#0) }
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).307), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2268:9: 2268:15 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).308), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2268:9: 2268:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2269:9: 2269:15 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).316), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2269:9: 2269:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).323), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2270:9: 2270:15 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).324), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2270:9: 2270:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).339), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2272:13: 2272:19 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).340), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2272:13: 2272:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).355), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2275:13: 2275:19 (#0), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).356), res: Local(HirId(DefId(0:411 ~ url[a8a3]::{impl#1}::set_username).305)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2275:13: 2275:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).200), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2418:9: 2418:15 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).201), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2418:9: 2418:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).208), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2419:9: 2419:15 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).209), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2419:9: 2419:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).216), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2420:9: 2420:15 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).217), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2420:9: 2420:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2421:9: 2421:15 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).225), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2421:9: 2421:15 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2423:13: 2423:19 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).241), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2423:13: 2423:19 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).256), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2426:13: 2426:19 (#0), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), segments: [PathSegment { ident: adjust#0, hir_id: HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).257), res: Local(HirId(DefId(0:413 ~ url[a8a3]::{impl#1}::set_scheme).191)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2426:13: 2426:19 (#0) }
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(0:350 ~ url[a8a3]::{impl#1}::make_relative::extract_path_filename)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14343 ~ core[7d5a]::str::{impl#0}::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14320 ~ core[7d5a]::str::{impl#0}::split_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14299 ~ core[7d5a]::str::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:375 ~ url[a8a3]::{impl#1}::socket_addrs::io_result)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9690 ~ core[7d5a]::option::{impl#0}::ok_or_else)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:3244 ~ std[e3cd]::io::error::{impl#8}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:425 ~ url[a8a3]::{impl#2}::from_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ url[a8a3]::{impl#1}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:429 ~ url[a8a3]::{impl#3}::try_from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ url[a8a3]::{impl#1}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:431 ~ url[a8a3]::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ url[a8a3]::{impl#5}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:435 ~ url[a8a3]::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10794 ~ core[7d5a]::fmt::builders::{impl#3}::finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10787 ~ core[7d5a]::fmt::builders::{impl#3}::field)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11194 ~ core[7d5a]::fmt::{impl#9}::debug_struct)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:359 ~ url[a8a3]::{impl#1}::scheme)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ url[a8a3]::{impl#1}::cannot_be_a_base)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:364 ~ url[a8a3]::{impl#1}::username)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:365 ~ url[a8a3]::{impl#1}::password)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ url[a8a3]::{impl#1}::host)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ url[a8a3]::{impl#1}::port)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ url[a8a3]::{impl#1}::path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:381 ~ url[a8a3]::{impl#1}::query)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:383 ~ url[a8a3]::{impl#1}::fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:438 ~ url[a8a3]::{impl#8}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2715:9: 2715:13 (#0), res: Local(HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).8), res: Local(HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2715:9: 2715:13 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2715:9: 2715:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).9), kind: Field(Expr { hir_id: HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2715:31: 2715:36 (#0), res: Local(HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).11), res: Local(HirId(DefId(0:438 ~ url[a8a3]::{impl#8}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2715:31: 2715:36 (#0) }, serialization#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2715:31: 2715:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:440 ~ url[a8a3]::{impl#9}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:442 ~ url[a8a3]::{impl#10}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:444 ~ url[a8a3]::{impl#11}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:447 ~ url[a8a3]::{impl#12}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:452 ~ url[a8a3]::{impl#13}::slice_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:455 ~ url[a8a3]::{impl#14}::slice_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:458 ~ url[a8a3]::{impl#15}::slice_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:460 ~ url[a8a3]::path_to_file_url_segments)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5433 ~ std[e3cd]::path::{impl#63}::is_absolute)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8934 ~ core[7d5a]::iter::traits::iterator::Iterator::skip)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5469 ~ std[e3cd]::path::{impl#63}::components)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:34 ~ percent_encoding[200d]::percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:4248 ~ std[e3cd]::os::unix::ffi::os_str::OsStrExt::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:5220 ~ std[e3cd]::path::{impl#6}::as_os_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5433 ~ std[e3cd]::path::{impl#63}::is_absolute)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5469 ~ std[e3cd]::path::{impl#63}::components)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).33), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).34), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2877:22: 2877:35 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), segments: [PathSegment { ident: serialization#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).36), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2877:22: 2877:35 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2877:36: 2877:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2877:22: 2877:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).37), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2877:44: 2877:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2877:44: 2877:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5205 ~ std[e3cd]::path::{impl#1}::kind)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:69 ~ url[a8a3]::host::{impl#2}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9688 ~ core[7d5a]::option::{impl#0}::ok_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2269 ~ std[e3cd]::ffi::os_str::{impl#23}::to_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11086 ~ core[7d5a]::fmt::Write::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:10419 ~ core[7d5a]::result::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:246 ~ url[a8a3]::parser::to_u32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3163 ~ core[7d5a]::convert::Into::into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9688 ~ core[7d5a]::option::{impl#0}::ok_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2269 ~ std[e3cd]::ffi::os_str::{impl#23}::to_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:34 ~ percent_encoding[200d]::percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).313), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2906:12: 2906:21 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).304)), segments: [PathSegment { ident: component#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).314), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).304)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2906:12: 2906:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2906:25: 2906:43 (#0), res: Def(Ctor(Variant, Const), DefId(1:8839 ~ std[e3cd]::path::Component::RootDir::{constructor#0})), segments: [PathSegment { ident: Component#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).316), res: Def(Enum, DefId(1:8833 ~ std[e3cd]::path::Component)), args: None, infer_args: true }, PathSegment { ident: RootDir#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).317), res: Def(Ctor(Variant, Const), DefId(1:8839 ~ std[e3cd]::path::Component::RootDir::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2906:25: 2906:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Adt({}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9688 ~ core[7d5a]::option::{impl#0}::ok_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2269 ~ std[e3cd]::ffi::os_str::{impl#23}::to_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:5220 ~ std[e3cd]::path::{impl#6}::as_os_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:34 ~ percent_encoding[200d]::percent_encode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).399), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:9: 2920:11 (#0) }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).400), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:28: 2919:29 (#0) }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).401), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).402), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).403), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:21 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), segments: [PathSegment { ident: serialization#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).404), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:22: 2919:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:27 (#0) }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).405), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:30: 2919:40 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), segments: [PathSegment { ident: host_start#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).406), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:30: 2919:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:40 (#0) }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).407), kind: Call(Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).408), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:12: 2920:43 (#0), res: Def(Fn, DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).409), res: Def(Mod, DefId(0:108 ~ url[a8a3]::parser)), args: None, infer_args: true }, PathSegment { ident: is_windows_drive_letter#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).410), res: Def(Fn, DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:12: 2920:43 (#0) }, [Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).411), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).412), kind: Index(Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:45: 2920:58 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), segments: [PathSegment { ident: serialization#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).414), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:45: 2920:58 (#0) }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).415), kind: Struct(LangItem(RangeFrom, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:71 (#0)), [ExprField { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).418), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).416), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:69 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), segments: [PathSegment { ident: host_start#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).417), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:69 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:69 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:71 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:58: 2920:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:45: 2920:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:44: 2920:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:12: 2920:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2920:73 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).419), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2921:12: 2921:32 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).301)), segments: [PathSegment { ident: path_only_has_prefix#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).420), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).301)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2921:12: 2921:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).400), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:28: 2919:29 (#0) }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).401), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).402), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).403), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:21 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), segments: [PathSegment { ident: serialization#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).404), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:22: 2919:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:27 (#0) }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).405), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:30: 2919:40 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), segments: [PathSegment { ident: host_start#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).406), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:30: 2919:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).407), kind: Call(Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).408), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:12: 2920:43 (#0), res: Def(Fn, DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).409), res: Def(Mod, DefId(0:108 ~ url[a8a3]::parser)), args: None, infer_args: true }, PathSegment { ident: is_windows_drive_letter#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).410), res: Def(Fn, DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:12: 2920:43 (#0) }, [Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).411), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).412), kind: Index(Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:45: 2920:58 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), segments: [PathSegment { ident: serialization#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).414), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:45: 2920:58 (#0) }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).415), kind: Struct(LangItem(RangeFrom, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:71 (#0)), [ExprField { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).418), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).416), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:69 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), segments: [PathSegment { ident: host_start#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).417), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:69 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:69 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:59: 2920:71 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:58: 2920:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:45: 2920:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:44: 2920:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2920:12: 2920:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).401), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).402), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).403), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:21 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), segments: [PathSegment { ident: serialization#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).404), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:21 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:22: 2919:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:8: 2919:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).405), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:30: 2919:40 (#0), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), segments: [PathSegment { ident: host_start#0, hir_id: HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).406), res: Local(HirId(DefId(0:462 ~ url[a8a3]::path_to_file_url_segments_windows).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2919:30: 2919:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:6025 ~ alloc[5873]::string::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ url[a8a3]::parser::is_windows_drive_letter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(5:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8717 ~ core[7d5a]::iter::traits::collect::Extend::extend)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:50 ~ percent_encoding[200d]::percent_decode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).87), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:9: 2957:11 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).88), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:20: 2956:21 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).89), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).90), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:13 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).92), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:14: 2956:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:19 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).93), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:22: 2956:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:22: 2956:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:23 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).94), kind: MethodCall(PathSegment { ident: is_ascii_alphabetic#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).95), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).96), kind: Index(Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:12: 2957:17 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).98), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:12: 2957:17 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).99), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:30: 2957:31 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).100), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).101), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).102), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:18: 2957:23 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).103), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:18: 2957:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:24: 2957:29 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:18: 2957:29 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).104), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:32: 2957:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:32: 2957:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:18: 2957:33 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:17: 2957:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:12: 2957:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:35: 2957:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:12: 2957:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2957:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).105), kind: Match(Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).106), kind: Index(Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:21: 2958:26 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).108), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:21: 2958:26 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).109), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:39: 2958:40 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).110), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).111), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:27: 2958:32 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).113), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:27: 2958:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:33: 2958:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:27: 2958:38 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).114), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:41: 2958:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:41: 2958:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:27: 2958:42 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:26: 2958:43 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:21: 2958:43 (#0) }, [Arm { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).120), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:13: 476:43 (#477), pat: Pat { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).119), kind: Or([Pat { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).116), kind: Lit(Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).115), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:45: 2958:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:45: 2958:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:45: 2958:49 (#0), default_binding_modes: true }, Pat { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).118), kind: Lit(Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).117), kind: Lit(Spanned { node: Byte(124), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:52: 2958:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:52: 2958:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:52: 2958:56 (#0), default_binding_modes: true }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2958:45: 2958:56 (#0), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).121), kind: Lit(Spanned { node: Bool(true), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#477) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:476:39: 476:43 (#477) } }, Arm { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).123), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:23 (#477), pat: Pat { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).122), kind: Wild, span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:13: 477:14 (#477), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).124), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#477) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:477:18: 477:23 (#477) } }], Normal), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:475:9: 478:10 (#477) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).88), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:20: 2956:21 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).89), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).90), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:13 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).92), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:14: 2956:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:19 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).93), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:22: 2956:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:22: 2956:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).94), kind: MethodCall(PathSegment { ident: is_ascii_alphabetic#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).95), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).96), kind: Index(Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:12: 2957:17 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).98), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:12: 2957:17 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).99), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:30: 2957:31 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).100), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).101), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).102), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:18: 2957:23 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).103), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:18: 2957:23 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:24: 2957:29 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:18: 2957:29 (#0) }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).104), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:32: 2957:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:32: 2957:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:18: 2957:33 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:17: 2957:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:12: 2957:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:35: 2957:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2957:12: 2957:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).89), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).90), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:13 (#0), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).92), res: Local(HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:13 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:14: 2956:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:8: 2956:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:467 ~ url[a8a3]::file_url_segments_to_pathbuf).93), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:22: 2956:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2956:22: 2956:23 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:7512 ~ alloc[5873]::vec::{impl#1}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:1144 ~ core[7d5a]::num::{impl#6}::is_ascii_alphabetic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:4247 ~ std[e3cd]::os::unix::ffi::os_str::OsStrExt::from_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5433 ~ std[e3cd]::path::{impl#63}::is_absolute)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).14), kind: MethodCall(PathSegment { ident: to_owned#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).15), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).16), kind: Lit(Spanned { node: Str("\\\\", Raw(0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2989:9: 2989:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2989:9: 2989:14 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2989:15: 2989:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2989:9: 2989:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2989:28: 2989:32 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).9)), segments: [PathSegment { ident: host#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).18), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2989:28: 2989:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9688 ~ core[7d5a]::option::{impl#0}::ok_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).61), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).62), kind: MethodCall(PathSegment { ident: starts_with#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).63), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:21: 2995:26 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).49)), segments: [PathSegment { ident: first#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).65), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:21: 2995:26 (#0) }, [Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:39: 2995:58 (#0), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), segments: [PathSegment { ident: parser#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).67), res: Def(Mod, DefId(0:108 ~ url[a8a3]::parser)), args: None, infer_args: true }, PathSegment { ident: ascii_alpha#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).68), res: Def(Fn, DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:39: 2995:58 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:27: 2995:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:21: 2995:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:20: 2995:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).69), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:83: 2995:85 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).70), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).71), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).72), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:68 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).49)), segments: [PathSegment { ident: first#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).74), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:68 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:69: 2995:79 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:79 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).75), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:80: 2995:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:80: 2995:81 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:79: 2995:82 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:82 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).76), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:86: 2995:90 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:86: 2995:90 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:90 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).70), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).71), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).72), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:68 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).49)), segments: [PathSegment { ident: first#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).74), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:68 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:69: 2995:79 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:79 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).75), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:80: 2995:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:80: 2995:81 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:79: 2995:82 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:63: 2995:82 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).76), kind: Lit(Spanned { node: Byte(58), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:86: 2995:90 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:2995:86: 2995:90 (#0) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:245 ~ url[a8a3]::parser::ascii_alpha)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).124), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:37: 3007:39 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).125), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:29: 3007:31 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).126), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:25 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).128), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:25 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).129), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:26: 3007:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:26: 3007:27 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:25: 3007:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:28 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).130), kind: Lit(Spanned { node: Byte(37), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:32: 3007:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:32: 3007:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:36 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).131), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:49: 3007:51 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).132), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:45 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).134), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:45 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).135), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:46: 3007:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:46: 3007:47 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:45: 3007:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:48 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).136), kind: Lit(Spanned { node: Byte(51), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:52: 3007:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:52: 3007:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).137), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:78: 3007:80 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).138), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:70: 3007:72 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).139), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:66 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).141), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:66 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).142), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:67: 3007:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:67: 3007:68 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:66: 3007:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:69 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).143), kind: Lit(Spanned { node: Byte(97), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:73: 3007:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:73: 3007:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:77 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).144), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:90: 3007:92 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).145), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).146), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:86 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).147), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:86 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).148), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:87: 3007:88 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:87: 3007:88 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:86: 3007:89 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:89 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).149), kind: Lit(Spanned { node: Byte(65), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:93: 3007:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:93: 3007:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:60: 3007:98 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).125), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:29: 3007:31 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).126), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:25 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).128), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:25 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).129), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:26: 3007:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:26: 3007:27 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:25: 3007:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:28 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).130), kind: Lit(Spanned { node: Byte(37), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:32: 3007:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:32: 3007:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).131), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:49: 3007:51 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).132), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:45 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).134), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:45 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).135), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:46: 3007:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:46: 3007:47 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:45: 3007:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:48 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).136), kind: Lit(Spanned { node: Byte(51), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:52: 3007:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:52: 3007:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).126), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:25 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).128), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:25 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).129), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:26: 3007:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:26: 3007:27 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:25: 3007:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:20: 3007:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).130), kind: Lit(Spanned { node: Byte(37), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:32: 3007:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:32: 3007:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).132), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:45 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).134), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:45 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).135), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:46: 3007:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:46: 3007:47 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:45: 3007:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:40: 3007:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).136), kind: Lit(Spanned { node: Byte(51), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:52: 3007:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:52: 3007:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).138), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:70: 3007:72 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).139), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:66 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).141), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:66 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).142), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:67: 3007:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:67: 3007:68 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:66: 3007:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:69 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).143), kind: Lit(Spanned { node: Byte(97), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:73: 3007:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:73: 3007:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:77 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).144), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:90: 3007:92 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).145), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).146), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:86 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).147), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:86 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).148), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:87: 3007:88 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:87: 3007:88 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:86: 3007:89 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:89 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).149), kind: Lit(Spanned { node: Byte(65), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:93: 3007:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:93: 3007:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:97 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).139), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:66 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).141), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:66 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).142), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:67: 3007:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:67: 3007:68 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:66: 3007:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:61: 3007:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).143), kind: Lit(Spanned { node: Byte(97), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:73: 3007:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:73: 3007:77 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).145), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).146), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:86 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).147), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).121)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:86 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).148), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:87: 3007:88 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:87: 3007:88 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:86: 3007:89 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:81: 3007:89 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).149), kind: Lit(Spanned { node: Byte(65), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:93: 3007:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3007:93: 3007:97 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).161), kind: MethodCall(PathSegment { ident: to_owned#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).162), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).163), kind: Index(Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:17: 3011:22 (#0), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).49)), segments: [PathSegment { ident: first#0, hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).165), res: Local(HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).49)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:17: 3011:22 (#0) }, Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).166), kind: Struct(LangItem(Range, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:23: 3011:27 (#0)), [ExprField { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).168), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).167), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:23: 3011:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:23: 3011:24 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:23: 3011:24 (#0), is_shorthand: false }, ExprField { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).170), ident: end#0, expr: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).169), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:26: 3011:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:26: 3011:27 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:26: 3011:27 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:23: 3011:27 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:22: 3011:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:17: 3011:28 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:29: 3011:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:17: 3011:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:470 ~ url[a8a3]::file_url_segments_to_pathbuf_windows).171), kind: Lit(Spanned { node: Str(":", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:42: 3011:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/url-2.5.2/src/lib.rs:3011:42: 3011:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(5:820 ~ alloc[5873]::borrow::ToOwned::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"url"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:6000 ~ alloc[5873]::string::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(5:5966 ~ alloc[5873]::string::{impl#0}::from_utf8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:50 ~ percent_encoding[200d]::percent_decode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(5:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"url"}), Specific({"url"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:5433 ~ std[e3cd]::path::{impl#63}::is_absolute)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:750 ~ url[a8a3]::{impl#21}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:473 ~ url[a8a3]::{impl#16}::as_mut_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9663 ~ core[7d5a]::option::{impl#0}::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:474 ~ url[a8a3]::{impl#16}::finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:392 ~ url[a8a3]::{impl#1}::restore_already_parsed_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:478 ~ url[a8a3]::{impl#17}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:392 ~ url[a8a3]::{impl#1}::restore_already_parsed_fragment)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
