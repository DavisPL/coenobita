[DEBUG] Trying to get func ty of defid DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:9:17: 9:18 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).17), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:9:17: 9:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).18), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:9:22: 9:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:9:22: 9:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:11:17: 11:18 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).4)), segments: [PathSegment { ident: y#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).35), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:11:17: 11:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).36), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:11:22: 11:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:11:22: 11:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).43), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:31: 14:32 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).44), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:18: 14:22 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).12)), segments: [PathSegment { ident: x_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).46), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:18: 14:22 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:26: 14:30 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).48), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:26: 14:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:18: 14:30 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).49), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:33: 14:37 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), segments: [PathSegment { ident: y_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).51), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:33: 14:37 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:41: 14:45 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).53), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:41: 14:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:33: 14:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:17: 14:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).54), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:50: 14:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:50: 14:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).44), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:18: 14:22 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).12)), segments: [PathSegment { ident: x_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).46), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:18: 14:22 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:26: 14:30 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).48), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:26: 14:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:18: 14:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).49), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:33: 14:37 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), segments: [PathSegment { ident: y_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).51), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:33: 14:37 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:41: 14:45 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).53), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:41: 14:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:14:33: 14:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).59), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:26: 15:27 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).60), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:13: 15:17 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).12)), segments: [PathSegment { ident: x_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).62), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:13: 15:17 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:21: 15:25 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).64), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:21: 15:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:13: 15:25 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).65), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:28: 15:32 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), segments: [PathSegment { ident: y_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).67), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:28: 15:32 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:36: 15:40 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).69), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:36: 15:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:28: 15:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:13: 15:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:43: 15:48 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).56)), segments: [PathSegment { ident: carry#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).71), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:43: 15:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).60), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:13: 15:17 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).12)), segments: [PathSegment { ident: x_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).62), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:13: 15:17 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:21: 15:25 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).64), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:21: 15:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:13: 15:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).65), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:28: 15:32 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), segments: [PathSegment { ident: y_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).67), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:28: 15:32 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:36: 15:40 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).69), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:36: 15:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:15:28: 15:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:16:17: 16:18 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).73)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).77), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).73)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:16:17: 16:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).78), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:16:22: 16:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:16:22: 16:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).91), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:46: 19:47 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).92), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:31: 19:32 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).93), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:22 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), segments: [PathSegment { ident: x_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).95), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:22 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:26: 19:30 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).97), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:26: 19:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:30 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).98), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:37 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), segments: [PathSegment { ident: y_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).100), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:37 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:41: 19:45 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).102), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:41: 19:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:45 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).103), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:48: 19:52 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).88)), segments: [PathSegment { ident: m_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).105), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).88)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:48: 19:52 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:56: 19:60 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).107), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:56: 19:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:48: 19:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:17: 19:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).108), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:65: 19:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:65: 19:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).92), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:31: 19:32 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).93), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:22 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), segments: [PathSegment { ident: x_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).95), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:22 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:26: 19:30 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).97), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:26: 19:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:30 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).98), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:37 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), segments: [PathSegment { ident: y_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).100), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:37 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:41: 19:45 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).102), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:41: 19:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).103), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:48: 19:52 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).88)), segments: [PathSegment { ident: m_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).105), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).88)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:48: 19:52 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:56: 19:60 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).107), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:56: 19:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:48: 19:60 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).93), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:22 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), segments: [PathSegment { ident: x_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).95), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:22 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:26: 19:30 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).97), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:26: 19:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:18: 19:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).98), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:37 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), segments: [PathSegment { ident: y_lo#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).100), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:37 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:41: 19:45 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).102), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:41: 19:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:19:33: 19:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).112), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:33: 21:34 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).113), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:18: 21:19 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).114), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:9 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), segments: [PathSegment { ident: x_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).116), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:9 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:13: 21:17 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).118), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:13: 21:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:17 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).119), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:24 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), segments: [PathSegment { ident: y_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).121), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:24 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:28: 21:32 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).123), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:28: 21:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:32 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:35: 21:40 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).80)), segments: [PathSegment { ident: high1#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).125), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:35: 21:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).126), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:43: 21:48 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).110)), segments: [PathSegment { ident: high2#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).127), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).110)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:43: 21:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).113), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:18: 21:19 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).114), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:9 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), segments: [PathSegment { ident: x_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).116), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:9 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:13: 21:17 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).118), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:13: 21:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:17 (#0) }, Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).119), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:24 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), segments: [PathSegment { ident: y_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).121), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:24 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:28: 21:32 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).123), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:28: 21:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).124), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:35: 21:40 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).80)), segments: [PathSegment { ident: high1#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).125), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:35: 21:40 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).114), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).115), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:9 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), segments: [PathSegment { ident: x_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).116), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:9 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:13: 21:17 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).118), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:13: 21:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:5: 21:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).119), kind: Cast(Expr { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:24 (#0), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), segments: [PathSegment { ident: y_hi#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).121), res: Local(HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:24 (#0) }, Ty { hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:28: 21:32 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi).123), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:28: 21:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:21:20: 21:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:19: 37:20 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).11), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:19: 37:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).12), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:25: 37:27 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).13), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:23: 37:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:23: 37:24 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).14), kind: Lit(Spanned { node: Int(Pu128(83), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:28: 37:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:28: 37:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:23: 37:30 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).13), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:23: 37:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:23: 37:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).14), kind: Lit(Spanned { node: Int(Pu128(83), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:28: 37:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:37:28: 37:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).18), kind: Cast(Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).19), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:13: 38:15 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:11: 38:12 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).21), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:11: 38:12 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).22), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:16: 38:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:16: 38:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:10: 38:19 (#0) }, Ty { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:23: 38:26 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).24), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:23: 38:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:10: 38:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).25), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:32: 38:34 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:30: 38:31 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).27), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:30: 38:31 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).28), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:35: 38:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:35: 38:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:29: 38:38 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:11: 38:12 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).21), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:11: 38:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).22), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:16: 38:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:16: 38:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:30: 38:31 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).27), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:30: 38:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).28), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:35: 38:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:38:35: 38:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).35), kind: Call(Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:9: 40:19 (#0), res: Def(Fn, DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi)), segments: [PathSegment { ident: u128_mulhi#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).37), res: Def(Fn, DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:9: 40:19 (#0) }, [Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:20: 40:21 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).39), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:20: 40:21 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).40), kind: Lit(Spanned { node: Int(Pu128(156927543384667019095894735580191660403), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:23: 40:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:23: 40:62 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:9: 40:63 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).41), kind: Lit(Spanned { node: Int(Pu128(62), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:67: 40:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:40:67: 40:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:5 ~ itoa[33b6]::udiv128::u128_mulhi)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:16: 43:17 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).49), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:16: 43:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).50), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:25: 43:26 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:20: 43:24 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).44)), segments: [PathSegment { ident: quot#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).52), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:20: 43:24 (#0) }, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).53), kind: Cast(Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:27: 43:28 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).55), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:27: 43:28 (#0) }, Ty { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:32: 43:36 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).57), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:32: 43:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:27: 43:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:20: 43:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:20: 43:24 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).44)), segments: [PathSegment { ident: quot#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).52), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:20: 43:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).53), kind: Cast(Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:27: 43:28 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).55), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:27: 43:28 (#0) }, Ty { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:32: 43:36 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).57), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:32: 43:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:43:27: 43:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:44:28: 44:29 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).73), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:44:28: 44:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).74), kind: Cast(Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:44:32: 44:33 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).76), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:44:32: 44:33 (#0) }, Ty { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:44:37: 44:41 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).78), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:44:37: 44:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:44:32: 44:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).87), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#5), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).79)), segments: [PathSegment { ident: left_val#5, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).89), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#5) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#5) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).90), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#5), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).80)), segments: [PathSegment { ident: right_val#5, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).92), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#5) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#5) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:45:35: 45:36 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).144), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:45:35: 45:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).145), kind: Cast(Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).146), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:45:39: 45:40 (#0), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).147), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:45:39: 45:40 (#0) }, Ty { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:45:44: 45:48 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).149), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:45:44: 45:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/udiv128.rs:45:39: 45:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).158), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#8), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).150)), segments: [PathSegment { ident: left_val#8, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).160), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).150)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#8) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#8) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).161), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#8), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).151)), segments: [PathSegment { ident: right_val#8, hir_id: HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).163), res: Local(HirId(DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19).151)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#8) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#8) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:18 ~ itoa[33b6]::{impl#0}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:23 ~ itoa[33b6]::{impl#3}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:21 ~ itoa[33b6]::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:23 ~ itoa[33b6]::{impl#3}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:23 ~ itoa[33b6]::{impl#3}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2048 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::uninit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ itoa[33b6]::{impl#3}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ itoa[33b6]::private::Sealed::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ itoa[33b6]::{impl#5}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).2)), segments: [PathSegment { ident: self#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).8), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#9), res: PrimTy(Int(I8)), segments: [PathSegment { ident: i8#0, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).71), res: PrimTy(Int(I8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#9) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#9) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).78), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).85), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#9) }, Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).100), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }, Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).100), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#9) }, Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).109), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }, Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).109), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).154), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).181), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#9) }, Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).188), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }, Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).188), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).229), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).249), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9) }, Ty { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).261), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).319), kind: MethodCall(PathSegment { ident: len#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).4)), segments: [PathSegment { ident: buf#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).322), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#9)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).325), res: Local(HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9) }, Ty { hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#9, hir_id: HirId(DefId(0:50 ~ itoa[33b6]::{impl#5}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:56 ~ itoa[33b6]::{impl#7}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).2)), segments: [PathSegment { ident: self#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).8), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#9), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).71), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#9) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#9) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).78), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).85), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#9) }, Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).100), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }, Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).100), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#9) }, Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).109), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }, Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).109), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).154), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).181), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#9) }, Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).188), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }, Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).188), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).229), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).249), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9) }, Ty { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).261), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).319), kind: MethodCall(PathSegment { ident: len#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).4)), segments: [PathSegment { ident: buf#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).322), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#9)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).325), res: Local(HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9) }, Ty { hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#9, hir_id: HirId(DefId(0:56 ~ itoa[33b6]::{impl#7}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:62 ~ itoa[33b6]::{impl#9}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).2)), segments: [PathSegment { ident: self#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).8), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#9), res: PrimTy(Int(I16)), segments: [PathSegment { ident: i16#0, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).71), res: PrimTy(Int(I16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#9) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#9) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).78), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).85), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#9) }, Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).100), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }, Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).100), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#9) }, Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).109), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }, Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).109), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).154), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).181), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#9) }, Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).188), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }, Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).188), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).229), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).249), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9) }, Ty { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).261), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).319), kind: MethodCall(PathSegment { ident: len#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).4)), segments: [PathSegment { ident: buf#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).322), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#9)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).325), res: Local(HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9) }, Ty { hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#9, hir_id: HirId(DefId(0:62 ~ itoa[33b6]::{impl#9}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:68 ~ itoa[33b6]::{impl#11}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).2)), segments: [PathSegment { ident: self#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).8), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#9), res: PrimTy(Uint(U16)), segments: [PathSegment { ident: u16#0, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).71), res: PrimTy(Uint(U16)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#9) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#9) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).78), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).85), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#9) }, Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).100), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }, Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).100), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#9) }, Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).109), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }, Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).109), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).154), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).181), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#9) }, Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).188), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }, Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).188), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).229), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).249), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9) }, Ty { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).261), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).319), kind: MethodCall(PathSegment { ident: len#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).4)), segments: [PathSegment { ident: buf#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).322), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#9)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).325), res: Local(HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9) }, Ty { hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#9, hir_id: HirId(DefId(0:68 ~ itoa[33b6]::{impl#11}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:74 ~ itoa[33b6]::{impl#13}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).2)), segments: [PathSegment { ident: self#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).8), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#9), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).71), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#9) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#9) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).78), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).85), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#9) }, Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).100), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }, Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).100), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#9) }, Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).109), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }, Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).109), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).154), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).181), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#9) }, Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).188), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }, Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).188), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).229), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).249), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9) }, Ty { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).261), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).319), kind: MethodCall(PathSegment { ident: len#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).4)), segments: [PathSegment { ident: buf#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).322), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#9)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).325), res: Local(HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9) }, Ty { hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#9, hir_id: HirId(DefId(0:74 ~ itoa[33b6]::{impl#13}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:80 ~ itoa[33b6]::{impl#15}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).2)), segments: [PathSegment { ident: self#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).8), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25058 ~ core[7d5a]::num::{impl#8}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#9), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).71), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#9) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#9) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#9) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).78), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).36)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).85), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#9) }, Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).100), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }, Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).100), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#9) }, Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).109), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }, Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).90)), segments: [PathSegment { ident: rem#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).109), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).154), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).181), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#9) }, Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).188), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }, Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#9) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).188), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).229), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).249), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#9) }, Ty { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), segments: [PathSegment { ident: n#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).261), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).319), kind: MethodCall(PathSegment { ident: len#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).4)), segments: [PathSegment { ident: buf#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).322), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#9) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#9)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).46)), segments: [PathSegment { ident: curr#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).325), res: Local(HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#9) }, Ty { hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#9, hir_id: HirId(DefId(0:80 ~ itoa[33b6]::{impl#15}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#9) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#9) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:86 ~ itoa[33b6]::{impl#17}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).2)), segments: [PathSegment { ident: self#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).8), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#10), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#10), res: PrimTy(Int(I64)), segments: [PathSegment { ident: i64#0, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).71), res: PrimTy(Int(I64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#10) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#10) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#10) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#10) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).36)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).78), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).36)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).85), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#10) }, Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).90)), segments: [PathSegment { ident: rem#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).100), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#10) }, Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#10) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).90)), segments: [PathSegment { ident: rem#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).100), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#10) }, Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).90)), segments: [PathSegment { ident: rem#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).109), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#10) }, Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#10) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).90)), segments: [PathSegment { ident: rem#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).109), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).46)), segments: [PathSegment { ident: curr#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).154), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).181), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#10) }, Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).188), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#10) }, Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#10) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).188), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).229), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).249), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#10) }, Ty { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#10), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).261), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).319), kind: MethodCall(PathSegment { ident: len#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).4)), segments: [PathSegment { ident: buf#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).322), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#10) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#10)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#10), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).46)), segments: [PathSegment { ident: curr#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).325), res: Local(HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#10) }, Ty { hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#10), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#10, hir_id: HirId(DefId(0:86 ~ itoa[33b6]::{impl#17}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#10) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ itoa[33b6]::{impl#19}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).2)), segments: [PathSegment { ident: self#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).8), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#10), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#10), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).71), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#10) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#10) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#10) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#10) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).36)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).78), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).36)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).85), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#10) }, Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).90)), segments: [PathSegment { ident: rem#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).100), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#10) }, Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#10) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).90)), segments: [PathSegment { ident: rem#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).100), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#10) }, Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).90)), segments: [PathSegment { ident: rem#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).109), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#10) }, Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#10) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).90)), segments: [PathSegment { ident: rem#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).109), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).46)), segments: [PathSegment { ident: curr#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).154), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).181), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#10) }, Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).188), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#10) }, Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#10) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).188), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).229), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).249), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#10) }, Ty { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#10), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), segments: [PathSegment { ident: n#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).261), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#10) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).319), kind: MethodCall(PathSegment { ident: len#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).4)), segments: [PathSegment { ident: buf#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).322), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#10) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#10)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#10) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#10), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).46)), segments: [PathSegment { ident: curr#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).325), res: Local(HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#10) }, Ty { hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#10), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#10, hir_id: HirId(DefId(0:92 ~ itoa[33b6]::{impl#19}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#10) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#10) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:98 ~ itoa[33b6]::{impl#21}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).2)), segments: [PathSegment { ident: self#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).8), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#11), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#11), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#0, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).71), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#11) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#11) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#11) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#11) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).36)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).78), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).36)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).85), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#11) }, Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).90)), segments: [PathSegment { ident: rem#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).100), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#11) }, Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#11) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).90)), segments: [PathSegment { ident: rem#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).100), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#11) }, Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).90)), segments: [PathSegment { ident: rem#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).109), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#11) }, Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#11) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).90)), segments: [PathSegment { ident: rem#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).109), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).46)), segments: [PathSegment { ident: curr#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).154), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).181), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#11) }, Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).188), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#11) }, Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#11) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).188), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).229), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).249), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#11) }, Ty { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#11), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).261), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).319), kind: MethodCall(PathSegment { ident: len#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).4)), segments: [PathSegment { ident: buf#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).322), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#11) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#11)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#11), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).46)), segments: [PathSegment { ident: curr#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).325), res: Local(HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#11) }, Ty { hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#11), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#11, hir_id: HirId(DefId(0:98 ~ itoa[33b6]::{impl#21}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#11) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:104 ~ itoa[33b6]::{impl#23}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).2)), segments: [PathSegment { ident: self#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).8), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:38: 136:42 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:136:46: 136:47 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25184 ~ core[7d5a]::num::{impl#9}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).67), kind: Call(Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).68), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#11), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), segments: [PathSegment { ident: mem#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).69), res: Def(Mod, DefId(1:1995 ~ core[7d5a]::mem)), args: None, infer_args: true }, PathSegment { ident: size_of#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).72), res: Def(Fn, DefId(1:2158 ~ core[7d5a]::mem::size_of)), args: Some(GenericArgs { args: [Type(Ty { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:35 (#11), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).71), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:35: 148:37 (#11) })], constraints: [], parenthesized: No, span_ext: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:34: 148:38 (#11) }), infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:38 (#11) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:20: 148:40 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).73), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:148:44: 148:45 (#11) }
[DEBUG] Trying to get func ty of defid DefId(1:2158 ~ core[7d5a]::mem::size_of)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).36)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).78), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:27: 150:28 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).79), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:150:32: 150:37 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).36)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).85), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:36: 151:37 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).86), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:151:40: 151:45 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).98), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:39: 154:40 (#11) }, Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).90)), segments: [PathSegment { ident: rem#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).100), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#11) }, Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:34: 154:45 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).102), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:49: 154:50 (#11) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).90)), segments: [PathSegment { ident: rem#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).100), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:35: 154:38 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).101), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:154:41: 154:44 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).107), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:39: 155:40 (#11) }, Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).90)), segments: [PathSegment { ident: rem#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).109), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#11) }, Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:34: 155:45 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:49: 155:50 (#11) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).90)), segments: [PathSegment { ident: rem#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).109), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).90)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:35: 155:38 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).110), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:155:41: 155:44 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).46)), segments: [PathSegment { ident: curr#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).154), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:89: 159:93 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).155), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:159:96: 159:97 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).181), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:20: 168:21 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).182), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:168:25: 168:28 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).186), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:33: 169:34 (#11) }, Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).188), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#11) }, Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:30: 169:39 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).190), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:43: 169:44 (#11) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).188), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:31: 169:32 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).189), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:169:35: 169:38 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).229), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:20: 178:21 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).230), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:178:24: 178:26 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).247), kind: Cast(Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).248), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).249), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:50: 181:51 (#11) }, Ty { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#11), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).251), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:55: 181:57 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:49: 181:58 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).252), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:181:61: 181:65 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).260), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), segments: [PathSegment { ident: n#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).261), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).177)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:30: 184:31 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).262), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:184:35: 184:36 (#11) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).319), kind: MethodCall(PathSegment { ident: len#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).320), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).4)), segments: [PathSegment { ident: buf#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).322), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:30 (#11) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:31: 198:36 (#11)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:27: 198:36 (#11) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).323), kind: Cast(Expr { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).324), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#11), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).46)), segments: [PathSegment { ident: curr#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).325), res: Local(HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:43 (#11) }, Ty { hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).326), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#11), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#11, hir_id: HirId(DefId(0:104 ~ itoa[33b6]::{impl#23}::write).327), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:47: 198:52 (#11) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:198:39: 198:52 (#11) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:110 ~ itoa[33b6]::{impl#25}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:246:38: 246:42 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).2)), segments: [PathSegment { ident: self#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).8), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:246:38: 246:42 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:246:46: 246:47 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:246:46: 246:47 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25310 ~ core[7d5a]::num::{impl#10}::wrapping_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:52: 258:56 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).78), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:52: 258:56 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).79), kind: Cast(Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:59: 258:70 (#12), res: Def(Const, DefId(0:42 ~ itoa[33b6]::U64_MAX_LEN)), segments: [PathSegment { ident: U64_MAX_LEN#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).81), res: Def(Const, DefId(0:42 ~ itoa[33b6]::U64_MAX_LEN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:59: 258:70 (#12) }, Ty { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:74: 258:79 (#12), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).83), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:74: 258:79 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:59: 258:79 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ itoa[33b6]::private::Sealed::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:261:20: 261:21 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).66)), segments: [PathSegment { ident: n#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).119), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).66)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:261:20: 261:21 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).120), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:261:25: 261:26 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:261:25: 261:26 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).124), kind: Cast(Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).125), kind: MethodCall(PathSegment { ident: len#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).126), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:34: 263:37 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).4)), segments: [PathSegment { ident: buf#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).128), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:34: 263:37 (#12) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:38: 263:43 (#12)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:34: 263:43 (#12) }, Ty { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:47: 263:52 (#12), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).130), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:47: 263:52 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:34: 263:52 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).131), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:55: 263:57 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:55: 263:57 (#12) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1990 ~ core[7d5a]::intrinsics::write_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:265:73: 265:77 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).149), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:265:73: 265:77 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:265:80: 265:86 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).133)), segments: [PathSegment { ident: target#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).151), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).133)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:265:80: 265:86 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).182), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:56: 271:60 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).183), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:56: 271:60 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).184), kind: Cast(Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:63: 271:74 (#12), res: Def(Const, DefId(0:42 ~ itoa[33b6]::U64_MAX_LEN)), segments: [PathSegment { ident: U64_MAX_LEN#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).186), res: Def(Const, DefId(0:42 ~ itoa[33b6]::U64_MAX_LEN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:63: 271:74 (#12) }, Ty { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:78: 271:83 (#12), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).188), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:78: 271:83 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:63: 271:83 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ itoa[33b6]::private::Sealed::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:274:24: 274:25 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).171)), segments: [PathSegment { ident: n#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).224), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).171)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:274:24: 274:25 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).225), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:274:29: 274:30 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:274:29: 274:30 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).229), kind: Cast(Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).230), kind: MethodCall(PathSegment { ident: len#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).231), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:38: 276:41 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).4)), segments: [PathSegment { ident: buf#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).233), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:38: 276:41 (#12) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:42: 276:47 (#12)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:38: 276:47 (#12) }, Ty { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).234), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:51: 276:56 (#12), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).235), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:51: 276:56 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:38: 276:56 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).236), kind: Lit(Spanned { node: Int(Pu128(38), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:59: 276:61 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:59: 276:61 (#12) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1990 ~ core[7d5a]::intrinsics::write_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).253), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:278:77: 278:81 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).254), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:278:77: 278:81 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).255), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:278:84: 278:90 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).238)), segments: [PathSegment { ident: target#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).256), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).238)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:278:84: 278:90 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).283), kind: Cast(Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:54: 286:55 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).171)), segments: [PathSegment { ident: n#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).285), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).171)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:54: 286:55 (#12) }, Ty { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).286), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:59: 286:61 (#12), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).287), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:59: 286:61 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:53: 286:62 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).288), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:65: 286:69 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:65: 286:69 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).323), kind: MethodCall(PathSegment { ident: len#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).324), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).325), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:27: 298:30 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).4)), segments: [PathSegment { ident: buf#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).326), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:27: 298:30 (#12) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:31: 298:36 (#12)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:27: 298:36 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).327), kind: Cast(Expr { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).328), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:39: 298:43 (#12), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).329), res: Local(HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:39: 298:43 (#12) }, Ty { hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).330), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:47: 298:52 (#12), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#12, hir_id: HirId(DefId(0:110 ~ itoa[33b6]::{impl#25}::write).331), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:47: 298:52 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:39: 298:52 (#12) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ itoa[33b6]::{impl#27}::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:246:38: 246:42 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).2)), segments: [PathSegment { ident: self#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).8), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:246:38: 246:42 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:246:46: 246:47 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:246:46: 246:47 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25310 ~ core[7d5a]::num::{impl#10}::wrapping_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:52: 258:56 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).78), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:52: 258:56 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).79), kind: Cast(Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:59: 258:70 (#12), res: Def(Const, DefId(0:42 ~ itoa[33b6]::U64_MAX_LEN)), segments: [PathSegment { ident: U64_MAX_LEN#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).81), res: Def(Const, DefId(0:42 ~ itoa[33b6]::U64_MAX_LEN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:59: 258:70 (#12) }, Ty { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:74: 258:79 (#12), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).83), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:74: 258:79 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:258:59: 258:79 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ itoa[33b6]::private::Sealed::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:261:20: 261:21 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).66)), segments: [PathSegment { ident: n#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).119), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).66)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:261:20: 261:21 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).120), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:261:25: 261:26 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:261:25: 261:26 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Specific({"itoa"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).124), kind: Cast(Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).125), kind: MethodCall(PathSegment { ident: len#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).126), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:34: 263:37 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).4)), segments: [PathSegment { ident: buf#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).128), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:34: 263:37 (#12) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:38: 263:43 (#12)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:34: 263:43 (#12) }, Ty { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:47: 263:52 (#12), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).130), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:47: 263:52 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:34: 263:52 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).131), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:55: 263:57 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:263:55: 263:57 (#12) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1990 ~ core[7d5a]::intrinsics::write_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:265:73: 265:77 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).149), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:265:73: 265:77 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:265:80: 265:86 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).133)), segments: [PathSegment { ident: target#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).151), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).133)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:265:80: 265:86 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ itoa[33b6]::udiv128::udivmod_1e19)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).182), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:56: 271:60 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).183), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:56: 271:60 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).184), kind: Cast(Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:63: 271:74 (#12), res: Def(Const, DefId(0:42 ~ itoa[33b6]::U64_MAX_LEN)), segments: [PathSegment { ident: U64_MAX_LEN#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).186), res: Def(Const, DefId(0:42 ~ itoa[33b6]::U64_MAX_LEN)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:63: 271:74 (#12) }, Ty { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:78: 271:83 (#12), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).188), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:78: 271:83 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:271:63: 271:83 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:14298 ~ core[7d5a]::str::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ itoa[33b6]::private::Sealed::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:274:24: 274:25 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).171)), segments: [PathSegment { ident: n#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).224), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).171)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:274:24: 274:25 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).225), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:274:29: 274:30 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:274:29: 274:30 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).229), kind: Cast(Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).230), kind: MethodCall(PathSegment { ident: len#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).231), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:38: 276:41 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).4)), segments: [PathSegment { ident: buf#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).233), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:38: 276:41 (#12) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:42: 276:47 (#12)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:38: 276:47 (#12) }, Ty { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).234), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:51: 276:56 (#12), res: PrimTy(Int(Isize)), segments: [PathSegment { ident: isize#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).235), res: PrimTy(Int(Isize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:51: 276:56 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:38: 276:56 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).236), kind: Lit(Spanned { node: Int(Pu128(38), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:59: 276:61 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:276:59: 276:61 (#12) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"itoa"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1990 ~ core[7d5a]::intrinsics::write_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).253), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:278:77: 278:81 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).254), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:278:77: 278:81 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).255), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:278:84: 278:90 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).238)), segments: [PathSegment { ident: target#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).256), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).238)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:278:84: 278:90 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).283), kind: Cast(Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:54: 286:55 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).171)), segments: [PathSegment { ident: n#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).285), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).171)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:54: 286:55 (#12) }, Ty { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).286), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:59: 286:61 (#12), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).287), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:59: 286:61 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:53: 286:62 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).288), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:65: 286:69 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:286:65: 286:69 (#12) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).323), kind: MethodCall(PathSegment { ident: len#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).324), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).325), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:27: 298:30 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).4)), segments: [PathSegment { ident: buf#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).326), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:27: 298:30 (#12) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:31: 298:36 (#12)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:27: 298:36 (#12) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).327), kind: Cast(Expr { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).328), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:39: 298:43 (#12), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), segments: [PathSegment { ident: curr#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).329), res: Local(HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:39: 298:43 (#12) }, Ty { hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).330), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:47: 298:52 (#12), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#12, hir_id: HirId(DefId(0:118 ~ itoa[33b6]::{impl#27}::write).331), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:47: 298:52 (#12) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/itoa-1.0.11/src/lib.rs:298:39: 298:52 (#12) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
