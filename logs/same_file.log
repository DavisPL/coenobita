[DEBUG] Trying to get func ty of defid DefId(0:69 ~ same_file[552a]::unix::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ same_file[552a]::unix::{impl#0}::drop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:4922 ~ std[e3cd]::os::fd::raw::IntoRawFd::into_raw_fd)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).6), kind: Tup([Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).7), kind: Field(Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).8), kind: Path(Resolved(None, Path { span: src/unix.rs:33:10: 33:14 (#0), res: Local(HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).9), res: Local(HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).2)), args: None, infer_args: true }] })), span: src/unix.rs:33:10: 33:14 (#0) }, dev#0), span: src/unix.rs:33:10: 33:18 (#0) }, Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).10), kind: Field(Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).11), kind: Path(Resolved(None, Path { span: src/unix.rs:33:20: 33:24 (#0), res: Local(HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).12), res: Local(HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).2)), args: None, infer_args: true }] })), span: src/unix.rs:33:20: 33:24 (#0) }, ino#0), span: src/unix.rs:33:20: 33:28 (#0) }]), span: src/unix.rs:33:9: 33:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).13), kind: Tup([Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).14), kind: Field(Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).15), kind: Path(Resolved(None, Path { span: src/unix.rs:33:34: 33:39 (#0), res: Local(HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).16), res: Local(HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).4)), args: None, infer_args: true }] })), span: src/unix.rs:33:34: 33:39 (#0) }, dev#0), span: src/unix.rs:33:34: 33:43 (#0) }, Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).17), kind: Field(Expr { hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).18), kind: Path(Resolved(None, Path { span: src/unix.rs:33:45: 33:50 (#0), res: Local(HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).19), res: Local(HirId(DefId(0:28 ~ same_file[552a]::unix::{impl#2}::eq).4)), args: None, infer_args: true }] })), span: src/unix.rs:33:45: 33:50 (#0) }, ino#0), span: src/unix.rs:33:45: 33:54 (#0) }]), span: src/unix.rs:33:33: 33:55 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ same_file[552a]::unix::{impl#3}::as_raw_fd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4918 ~ std[e3cd]::os::fd::raw::AsRawFd::as_raw_fd)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ same_file[552a]::unix::{impl#4}::into_raw_fd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4922 ~ std[e3cd]::os::fd::raw::IntoRawFd::into_raw_fd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:34 ~ same_file[552a]::unix::{impl#5}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ same_file[552a]::unix::{impl#6}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:39 ~ same_file[552a]::unix::{impl#6}::from_file)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:100 ~ std[3c1d]::fs::{impl#7}::open)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:94 ~ std[3c1d]::fs::{impl#7}::read)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:93 ~ std[3c1d]::fs::{impl#7}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:39 ~ same_file[552a]::unix::{impl#6}::from_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:83 ~ std[3c1d]::fs::{impl#5}::metadata)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:4306 ~ std[e3cd]::os::unix::fs::MetadataExt::dev)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:4307 ~ std[e3cd]::os::unix::fs::MetadataExt::ino)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ same_file[552a]::unix::{impl#6}::from_std)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:39 ~ same_file[552a]::unix::{impl#6}::from_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ same_file[552a]::unix::{impl#6}::stdin)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ same_file[552a]::unix::{impl#6}::from_std)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4920 ~ std[e3cd]::os::fd::raw::FromRawFd::from_raw_fd)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ same_file[552a]::unix::{impl#6}::stdout)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ same_file[552a]::unix::{impl#6}::from_std)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4920 ~ std[e3cd]::os::fd::raw::FromRawFd::from_raw_fd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ same_file[552a]::unix::{impl#6}::stderr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ same_file[552a]::unix::{impl#6}::from_std)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4920 ~ std[e3cd]::os::fd::raw::FromRawFd::from_raw_fd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ same_file[552a]::unix::{impl#6}::as_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9662 ~ core[7d5a]::option::{impl#0}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ same_file[552a]::unix::{impl#6}::as_file_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9713 ~ core[7d5a]::option::{impl#0}::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9663 ~ core[7d5a]::option::{impl#0}::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ same_file[552a]::unix::{impl#6}::dev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ same_file[552a]::unix::{impl#6}::ino)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:74 ~ same_file[552a]::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ same_file[552a]::{impl#2}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ same_file[552a]::{impl#4}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).7), kind: Path(Resolved(None, Path { span: src/lib.rs:109:21: 109:21 (#9), res: Local(HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).8), res: Local(HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).2)), args: None, infer_args: true }] })), span: src/lib.rs:109:21: 109:30 (#9) }, 0#0), span: src/lib.rs:110:19: 110:30 (#9) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).9), kind: Field(Expr { hir_id: HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).10), kind: Path(Resolved(None, Path { span: src/lib.rs:109:21: 109:30 (#9), res: Local(HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).4)), segments: [PathSegment { ident: other#9, hir_id: HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).11), res: Local(HirId(DefId(0:79 ~ same_file[552a]::{impl#4}::eq).4)), args: None, infer_args: true }] })), span: src/lib.rs:109:21: 109:30 (#9) }, 0#0), span: src/lib.rs:110:19: 110:30 (#9) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ same_file[552a]::{impl#5}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ same_file[552a]::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:37 ~ same_file[552a]::unix::{impl#6}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ same_file[552a]::{impl#0}::from_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:39 ~ same_file[552a]::unix::{impl#6}::from_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ same_file[552a]::{impl#0}::stdin)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ same_file[552a]::unix::{impl#6}::stdin)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ same_file[552a]::{impl#0}::stdout)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ same_file[552a]::unix::{impl#6}::stdout)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ same_file[552a]::{impl#0}::stderr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ same_file[552a]::unix::{impl#6}::stderr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:56 ~ same_file[552a]::{impl#0}::as_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ same_file[552a]::unix::{impl#6}::as_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:57 ~ same_file[552a]::{impl#0}::as_file_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ same_file[552a]::unix::{impl#6}::as_file_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:58 ~ same_file[552a]::{impl#0}::dev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ same_file[552a]::unix::{impl#6}::dev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:59 ~ same_file[552a]::{impl#0}::ino)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ same_file[552a]::unix::{impl#6}::ino)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:60 ~ same_file[552a]::is_same_file)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).9), kind: Match(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).18), kind: Call(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).17), kind: Path(LangItem(TryTraitBranch, src/lib.rs:376:8: 376:33 (#16))), span: src/lib.rs:376:8: 376:33 (#16) }, [Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).10), kind: Call(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).11), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).13), kind: Path(Resolved(None, Path { span: src/lib.rs:376:8: 376:14 (#0), res: Def(Struct, DefId(0:70 ~ same_file[552a]::Handle)), segments: [PathSegment { ident: Handle#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).12), res: Def(Struct, DefId(0:70 ~ same_file[552a]::Handle)), args: None, infer_args: true }] })), span: src/lib.rs:376:8: 376:14 (#0) }, PathSegment { ident: from_path#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).14), res: Err, args: None, infer_args: true })), span: src/lib.rs:376:8: 376:25 (#0) }, [Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).15), kind: Path(Resolved(None, Path { span: src/lib.rs:376:26: 376:31 (#0), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).2)), segments: [PathSegment { ident: path1#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).16), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).2)), args: None, infer_args: true }] })), span: src/lib.rs:376:26: 376:31 (#0) }]), span: src/lib.rs:376:8: 376:32 (#0) }]), span: src/lib.rs:376:8: 376:33 (#16) }, [Arm { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).33), span: src/lib.rs:376:32: 376:33 (#17), pat: Pat { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).32), kind: Struct(LangItem(ControlFlowBreak, src/lib.rs:376:32: 376:33 (#17)), [PatField { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).31), ident: 0#17, pat: Pat { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).25), kind: Binding(BindingMode(No, Not), HirId(DefId(0:60 ~ same_file[552a]::is_same_file).25), residual#0, None), span: src/lib.rs:376:32: 376:33 (#17), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:376:32: 376:33 (#17) }], false), span: src/lib.rs:376:32: 376:33 (#17), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).30), kind: Ret(Some(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).29), kind: Call(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).28), kind: Path(LangItem(TryTraitFromResidual, src/lib.rs:376:32: 376:33 (#17))), span: src/lib.rs:376:32: 376:33 (#17) }, [Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).27), kind: Path(Resolved(None, Path { span: src/lib.rs:376:32: 376:33 (#17), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).25)), segments: [PathSegment { ident: residual#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).26), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).25)), args: None, infer_args: true }] })), span: src/lib.rs:376:32: 376:33 (#17) }]), span: src/lib.rs:376:8: 376:33 (#16) })), span: src/lib.rs:376:32: 376:33 (#17) } }, Arm { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).24), span: src/lib.rs:376:8: 376:33 (#0), pat: Pat { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).23), kind: Struct(LangItem(ControlFlowContinue, src/lib.rs:376:8: 376:33 (#16)), [PatField { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).22), ident: 0#16, pat: Pat { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).19), kind: Binding(BindingMode(No, Not), HirId(DefId(0:60 ~ same_file[552a]::is_same_file).19), val#0, None), span: src/lib.rs:376:8: 376:33 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:376:8: 376:33 (#16) }], false), span: src/lib.rs:376:8: 376:33 (#16), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).21), kind: Path(Resolved(None, Path { span: src/lib.rs:376:8: 376:33 (#0), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).19)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).20), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).19)), args: None, infer_args: true }] })), span: src/lib.rs:376:8: 376:33 (#0) } }], TryDesugar(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).18))), span: src/lib.rs:376:8: 376:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).34), kind: Match(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).43), kind: Call(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).42), kind: Path(LangItem(TryTraitBranch, src/lib.rs:376:37: 376:62 (#18))), span: src/lib.rs:376:37: 376:62 (#18) }, [Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).35), kind: Call(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).36), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).38), kind: Path(Resolved(None, Path { span: src/lib.rs:376:37: 376:43 (#0), res: Def(Struct, DefId(0:70 ~ same_file[552a]::Handle)), segments: [PathSegment { ident: Handle#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).37), res: Def(Struct, DefId(0:70 ~ same_file[552a]::Handle)), args: None, infer_args: true }] })), span: src/lib.rs:376:37: 376:43 (#0) }, PathSegment { ident: from_path#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).39), res: Err, args: None, infer_args: true })), span: src/lib.rs:376:37: 376:54 (#0) }, [Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).40), kind: Path(Resolved(None, Path { span: src/lib.rs:376:55: 376:60 (#0), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).4)), segments: [PathSegment { ident: path2#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).41), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).4)), args: None, infer_args: true }] })), span: src/lib.rs:376:55: 376:60 (#0) }]), span: src/lib.rs:376:37: 376:61 (#0) }]), span: src/lib.rs:376:37: 376:62 (#18) }, [Arm { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).58), span: src/lib.rs:376:61: 376:62 (#19), pat: Pat { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).57), kind: Struct(LangItem(ControlFlowBreak, src/lib.rs:376:61: 376:62 (#19)), [PatField { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).56), ident: 0#19, pat: Pat { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).50), kind: Binding(BindingMode(No, Not), HirId(DefId(0:60 ~ same_file[552a]::is_same_file).50), residual#0, None), span: src/lib.rs:376:61: 376:62 (#19), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:376:61: 376:62 (#19) }], false), span: src/lib.rs:376:61: 376:62 (#19), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).55), kind: Ret(Some(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).54), kind: Call(Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).53), kind: Path(LangItem(TryTraitFromResidual, src/lib.rs:376:61: 376:62 (#19))), span: src/lib.rs:376:61: 376:62 (#19) }, [Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).52), kind: Path(Resolved(None, Path { span: src/lib.rs:376:61: 376:62 (#19), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).50)), segments: [PathSegment { ident: residual#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).51), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).50)), args: None, infer_args: true }] })), span: src/lib.rs:376:61: 376:62 (#19) }]), span: src/lib.rs:376:37: 376:62 (#18) })), span: src/lib.rs:376:61: 376:62 (#19) } }, Arm { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).49), span: src/lib.rs:376:37: 376:62 (#0), pat: Pat { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).48), kind: Struct(LangItem(ControlFlowContinue, src/lib.rs:376:37: 376:62 (#18)), [PatField { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).47), ident: 0#18, pat: Pat { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).44), kind: Binding(BindingMode(No, Not), HirId(DefId(0:60 ~ same_file[552a]::is_same_file).44), val#0, None), span: src/lib.rs:376:37: 376:62 (#0), default_binding_modes: true }, is_shorthand: false, span: src/lib.rs:376:37: 376:62 (#18) }], false), span: src/lib.rs:376:37: 376:62 (#18), default_binding_modes: true }, guard: None, body: Expr { hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).46), kind: Path(Resolved(None, Path { span: src/lib.rs:376:37: 376:62 (#0), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).44)), segments: [PathSegment { ident: val#0, hir_id: HirId(DefId(0:60 ~ same_file[552a]::is_same_file).45), res: Local(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).44)), args: None, infer_args: true }] })), span: src/lib.rs:376:37: 376:62 (#0) } }], TryDesugar(HirId(DefId(0:60 ~ same_file[552a]::is_same_file).43))), span: src/lib.rs:376:37: 376:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ same_file[552a]::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ same_file[552a]::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
