[DEBUG] Trying to get func ty of defid DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:4:10: 4:10 (#14), res: Local(HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).8), res: Local(HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:4:10: 4:19 (#14) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:5:20: 5:23 (#14) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).9), kind: Field(Expr { hir_id: HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:4:10: 4:19 (#14), res: Local(HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).4)), segments: [PathSegment { ident: other#14, hir_id: HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).11), res: Local(HirId(DefId(0:98 ~ version_check[db9d]::version::{impl#4}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:4:10: 4:19 (#14) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:5:20: 5:23 (#14) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ version_check[db9d]::version::{impl#5}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ version_check[db9d]::version::{impl#7}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:105 ~ version_check[db9d]::version::{impl#8}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:107 ~ version_check[db9d]::version::{impl#9}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ version_check[db9d]::version::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ version_check[db9d]::get_version_and_date)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8901 ~ core[7d5a]::iter::traits::iterator::Iterator::nth)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14405 ~ core[7d5a]::str::{impl#0}::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).11), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:40: 89:41 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).12), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:33: 89:35 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).13), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:19: 89:24 (#0), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).2)), segments: [PathSegment { ident: major#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).15), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:19: 89:24 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:28: 89:31 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).17), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:28: 89:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:18: 89:32 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).18), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:36: 89:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:36: 89:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:17: 89:39 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).19), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:58: 89:60 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).20), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:44: 89:49 (#0), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).4)), segments: [PathSegment { ident: minor#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).22), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:44: 89:49 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:53: 89:56 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).24), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:53: 89:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:43: 89:57 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).25), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:61: 89:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:61: 89:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:42: 89:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:17: 89:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).26), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:67: 89:72 (#0), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).6)), segments: [PathSegment { ident: patch#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).28), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:67: 89:72 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:76: 89:79 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).30), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:76: 89:79 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:67: 89:79 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).12), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:33: 89:35 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).13), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:19: 89:24 (#0), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).2)), segments: [PathSegment { ident: major#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).15), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:19: 89:24 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:28: 89:31 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).17), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:28: 89:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:18: 89:32 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).18), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:36: 89:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:36: 89:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:17: 89:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).19), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:58: 89:60 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).20), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:44: 89:49 (#0), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).4)), segments: [PathSegment { ident: minor#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).22), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:44: 89:49 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:53: 89:56 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).24), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:53: 89:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:43: 89:57 (#0) }, Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).25), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:61: 89:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:61: 89:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:42: 89:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).13), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:19: 89:24 (#0), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).2)), segments: [PathSegment { ident: major#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).15), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:19: 89:24 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:28: 89:31 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).17), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:28: 89:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:18: 89:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).18), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:36: 89:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:36: 89:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).20), kind: Cast(Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:44: 89:49 (#0), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).4)), segments: [PathSegment { ident: minor#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).22), res: Local(HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:44: 89:49 (#0) }, Ty { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:53: 89:56 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).24), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:53: 89:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:43: 89:57 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:12 ~ version_check[db9d]::version::{impl#0}::from_mmp).25), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:61: 89:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:89:61: 89:63 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).5), kind: Field(Expr { hir_id: HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:105:21: 105:25 (#0), res: Local(HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).7), res: Local(HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:105:21: 105:25 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:105:21: 105:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).8), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:105:31: 105:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:105:31: 105:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).13), kind: Field(Expr { hir_id: HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:106:21: 106:25 (#0), res: Local(HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).15), res: Local(HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:106:21: 106:25 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:106:21: 106:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp).16), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:106:31: 106:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:106:31: 106:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:137:28: 137:32 (#0), res: Local(HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).21), res: Local(HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:137:28: 137:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).22), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:137:37: 137:44 (#0), res: Local(HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).18)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).24), res: Local(HirId(DefId(0:14 ~ version_check[db9d]::version::{impl#0}::at_least).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:137:37: 137:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:137:36: 137:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:162:28: 162:32 (#0), res: Local(HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).21), res: Local(HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:162:28: 162:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).22), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:162:37: 162:44 (#0), res: Local(HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).18)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).24), res: Local(HirId(DefId(0:16 ~ version_check[db9d]::version::{impl#0}::at_most).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:162:37: 162:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:162:36: 162:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:186:28: 186:32 (#0), res: Local(HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).21), res: Local(HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:186:28: 186:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).22), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:186:37: 186:44 (#0), res: Local(HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).18)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).24), res: Local(HirId(DefId(0:18 ~ version_check[db9d]::version::{impl#0}::exactly).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:186:37: 186:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/version.rs:186:36: 186:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:21 ~ version_check[db9d]::version::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:23 ~ version_check[db9d]::version::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11035 ~ core[7d5a]::fmt::rt::{impl#1}::new_debug)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:13 ~ version_check[db9d]::version::{impl#0}::to_mmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ version_check[db9d]::channel::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:1919 ~ core[7d5a]::intrinsics::{extern#1}::discriminant_value)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:3:17: 3:26 (#25), res: Local(HirId(DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq).14)), segments: [PathSegment { ident: __self_discr#25, hir_id: HirId(DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq).27), res: Local(HirId(DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:3:17: 3:26 (#25) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:3:17: 3:26 (#25), res: Local(HirId(DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq).24)), segments: [PathSegment { ident: __arg1_discr#25, hir_id: HirId(DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq).29), res: Local(HirId(DefId(0:121 ~ version_check[db9d]::channel::{impl#4}::eq).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:3:17: 3:26 (#25) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ version_check[db9d]::channel::{impl#5}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:126 ~ version_check[db9d]::channel::{impl#7}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ version_check[db9d]::channel::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:12:17: 12:17 (#30), res: Local(HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).8), res: Local(HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:12:17: 12:26 (#30) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:13:20: 13:24 (#30) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).9), kind: Field(Expr { hir_id: HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:12:17: 12:26 (#30), res: Local(HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).4)), segments: [PathSegment { ident: other#30, hir_id: HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).11), res: Local(HirId(DefId(0:134 ~ version_check[db9d]::channel::{impl#10}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:12:17: 12:26 (#30) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:13:20: 13:24 (#30) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:136 ~ version_check[db9d]::channel::{impl#11}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ version_check[db9d]::channel::{impl#13}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:27 ~ version_check[db9d]::channel::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ version_check[db9d]::get_version_and_date)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14379 ~ core[7d5a]::str::{impl#0}::trim)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).12), kind: MethodCall(PathSegment { ident: contains#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:12: 58:19 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).15), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:12: 58:19 (#0) }, [Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).16), kind: Lit(Spanned { node: Str("-dev", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:29: 58:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:29: 58:35 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:20: 58:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:12: 58:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).17), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:48: 58:50 (#0) }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:40: 58:47 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).19), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:40: 58:47 (#0) }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).20), kind: Lit(Spanned { node: Str("dev", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:51: 58:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:51: 58:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:40: 58:56 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:14333 ~ core[7d5a]::str::{impl#0}::contains)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:40: 58:47 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).19), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:40: 58:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).20), kind: Lit(Spanned { node: Str("dev", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:51: 58:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:58:51: 58:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).35), kind: MethodCall(PathSegment { ident: contains#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).36), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:19: 60:26 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).38), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:19: 60:26 (#0) }, [Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).39), kind: Lit(Spanned { node: Str("-nightly", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:36: 60:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:36: 60:46 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:27: 60:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:19: 60:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).40), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:59: 60:61 (#0) }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:51: 60:58 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).42), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:51: 60:58 (#0) }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).43), kind: Lit(Spanned { node: Str("nightly", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:62: 60:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:62: 60:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:51: 60:71 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:14333 ~ core[7d5a]::str::{impl#0}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:51: 60:58 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).42), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:51: 60:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).43), kind: Lit(Spanned { node: Str("nightly", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:62: 60:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:60:62: 60:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).58), kind: MethodCall(PathSegment { ident: contains#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).59), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:19: 62:26 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).61), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:19: 62:26 (#0) }, [Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).62), kind: Lit(Spanned { node: Str("-beta", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:36: 62:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:36: 62:43 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:27: 62:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:19: 62:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).63), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:56: 62:58 (#0) }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:48: 62:55 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).65), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:48: 62:55 (#0) }, Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).66), kind: Lit(Spanned { node: Str("beta", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:59: 62:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:59: 62:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:48: 62:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:14333 ~ core[7d5a]::str::{impl#0}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:48: 62:55 (#0), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).65), res: Local(HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:48: 62:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse).66), kind: Lit(Spanned { node: Str("beta", Cooked), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:59: 62:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/channel.rs:62:59: 62:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:14333 ~ core[7d5a]::str::{impl#0}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:31 ~ version_check[db9d]::channel::{impl#0}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ version_check[db9d]::channel::{impl#0}::supports_features)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:33 ~ version_check[db9d]::channel::{impl#0}::is_dev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:34 ~ version_check[db9d]::channel::{impl#0}::is_nightly)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:35 ~ version_check[db9d]::channel::{impl#0}::is_beta)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:36 ~ version_check[db9d]::channel::{impl#0}::is_stable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:38 ~ version_check[db9d]::channel::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:31 ~ version_check[db9d]::channel::{impl#0}::as_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ version_check[db9d]::date::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).6), kind: Field(Expr { hir_id: HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:5:17: 5:17 (#37), res: Local(HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).8), res: Local(HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:5:17: 5:26 (#37) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:6:17: 6:20 (#37) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).9), kind: Field(Expr { hir_id: HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:5:17: 5:26 (#37), res: Local(HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).4)), segments: [PathSegment { ident: other#37, hir_id: HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).11), res: Local(HirId(DefId(0:147 ~ version_check[db9d]::date::{impl#4}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:5:17: 5:26 (#37) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:6:17: 6:20 (#37) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ version_check[db9d]::date::{impl#5}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ version_check[db9d]::date::{impl#7}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:154 ~ version_check[db9d]::date::{impl#8}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:156 ~ version_check[db9d]::date::{impl#9}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3001 ~ core[7d5a]::cmp::Ord::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ version_check[db9d]::date::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ version_check[db9d]::get_version_and_date)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14405 ~ core[7d5a]::str::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).113), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:50: 61:52 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).114), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:36: 61:38 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).115), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:22: 61:24 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).116), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:17: 61:19 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), segments: [PathSegment { ident: year#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).118), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).119), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:21 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).120), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:31: 61:33 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).122), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).123), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:35 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).124), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:45: 61:46 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:44 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).126), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:44 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).127), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:47: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:47: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:49 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).128), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:57: 61:59 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:53: 61:56 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), segments: [PathSegment { ident: day#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).130), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:53: 61:56 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).131), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:60: 61:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:60: 61:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:53: 61:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).132), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:69: 61:70 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:65: 61:68 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), segments: [PathSegment { ident: day#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).134), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:65: 61:68 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).135), kind: Lit(Spanned { node: Int(Pu128(31), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:71: 61:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:71: 61:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:65: 61:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).114), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:36: 61:38 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).115), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:22: 61:24 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).116), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:17: 61:19 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), segments: [PathSegment { ident: year#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).118), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).119), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:21 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).120), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:31: 61:33 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).122), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).123), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:35 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).124), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:45: 61:46 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:44 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).126), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:44 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).127), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:47: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:47: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).128), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:57: 61:59 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:53: 61:56 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), segments: [PathSegment { ident: day#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).130), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:53: 61:56 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).131), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:60: 61:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:60: 61:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:53: 61:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).115), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:22: 61:24 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).116), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:17: 61:19 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), segments: [PathSegment { ident: year#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).118), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).119), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:21 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).120), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:31: 61:33 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).122), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).123), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).124), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:45: 61:46 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:44 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).126), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:44 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).127), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:47: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:47: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:49 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).116), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:17: 61:19 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), segments: [PathSegment { ident: year#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).118), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).119), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).120), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:31: 61:33 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).122), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).123), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), segments: [PathSegment { ident: year#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).118), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).107)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:12: 61:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).119), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:20: 61:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).122), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:25: 61:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).123), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:34: 61:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:44 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).126), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).108)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:39: 61:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).127), kind: Lit(Spanned { node: Int(Pu128(12), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:47: 61:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:47: 61:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:53: 61:56 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), segments: [PathSegment { ident: day#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).130), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:53: 61:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).131), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:60: 61:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:60: 61:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).133), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:65: 61:68 (#0), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), segments: [PathSegment { ident: day#0, hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).134), res: Local(HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:65: 61:68 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse).135), kind: Lit(Spanned { node: Int(Pu128(31), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:71: 61:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:61:71: 61:73 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).9), kind: Cast(Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:87:21: 87:25 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).2)), segments: [PathSegment { ident: year#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).11), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:87:21: 87:25 (#0) }, Ty { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:87:29: 87:32 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).13), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:87:29: 87:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:87:20: 87:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).14), kind: Lit(Spanned { node: Int(Pu128(9), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:87:37: 87:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:87:37: 87:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).19), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:37: 88:38 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).20), kind: Cast(Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:23: 88:28 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).4)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).22), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:23: 88:28 (#0) }, Ty { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:32: 88:35 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).24), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:32: 88:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:22: 88:36 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).25), kind: Lit(Spanned { node: Int(Pu128(15), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:39: 88:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:39: 88:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:21: 88:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).26), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:47: 88:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:47: 88:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).20), kind: Cast(Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:23: 88:28 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).4)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).22), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:23: 88:28 (#0) }, Ty { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:32: 88:35 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).24), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:32: 88:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:22: 88:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).25), kind: Lit(Spanned { node: Int(Pu128(15), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:39: 88:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:88:39: 88:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).31), kind: Cast(Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:89:20: 89:23 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).6)), segments: [PathSegment { ident: day#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).33), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:89:20: 89:23 (#0) }, Ty { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:89:27: 89:30 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).35), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:89:27: 89:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:89:19: 89:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).36), kind: Lit(Spanned { node: Int(Pu128(31), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:89:34: 89:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:89:34: 89:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).43), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:19: 90:20 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:14: 90:18 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).16)), segments: [PathSegment { ident: year#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).45), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:14: 90:18 (#0) }, Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:21: 90:26 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).28)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).47), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:21: 90:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:14: 90:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:29: 90:32 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).38)), segments: [PathSegment { ident: day#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).49), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).38)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:29: 90:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:14: 90:18 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).16)), segments: [PathSegment { ident: year#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).45), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:14: 90:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:21: 90:26 (#0), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).28)), segments: [PathSegment { ident: month#0, hir_id: HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).47), res: Local(HirId(DefId(0:48 ~ version_check[db9d]::date::{impl#0}::from_ymd).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:90:21: 90:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).5), kind: Field(Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:95:17: 95:21 (#0), res: Local(HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).7), res: Local(HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:95:17: 95:21 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:95:17: 95:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).8), kind: Lit(Spanned { node: Int(Pu128(9), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:95:27: 95:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:95:27: 95:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).13), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:25: 96:27 (#0) }, Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).14), kind: Field(Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:18: 96:22 (#0), res: Local(HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).16), res: Local(HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:18: 96:22 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:18: 96:24 (#0) }, Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).17), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:28: 96:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:28: 96:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:17: 96:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).18), kind: Lit(Spanned { node: Int(Pu128(15), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:33: 96:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:33: 96:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).14), kind: Field(Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:18: 96:22 (#0), res: Local(HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).16), res: Local(HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:18: 96:22 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:18: 96:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).17), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:28: 96:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:96:28: 96:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).23), kind: Field(Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:97:17: 97:21 (#0), res: Local(HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).25), res: Local(HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:97:17: 97:21 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:97:17: 97:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd).26), kind: Lit(Spanned { node: Int(Pu128(31), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:97:26: 97:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:97:26: 97:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"version_check"}), Specific({"version_check"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:122:25: 122:29 (#0), res: Local(HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).21), res: Local(HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:122:25: 122:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).22), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:122:34: 122:38 (#0), res: Local(HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).18)), segments: [PathSegment { ident: date#0, hir_id: HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).24), res: Local(HirId(DefId(0:50 ~ version_check[db9d]::date::{impl#0}::at_least).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:122:34: 122:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:122:33: 122:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:147:25: 147:29 (#0), res: Local(HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).21), res: Local(HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:147:25: 147:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).22), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:147:34: 147:38 (#0), res: Local(HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).18)), segments: [PathSegment { ident: date#0, hir_id: HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).24), res: Local(HirId(DefId(0:52 ~ version_check[db9d]::date::{impl#0}::at_most).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:147:34: 147:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:147:33: 147:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:172:25: 172:29 (#0), res: Local(HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).21), res: Local(HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:172:25: 172:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).22), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:172:34: 172:38 (#0), res: Local(HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).18)), segments: [PathSegment { ident: date#0, hir_id: HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).24), res: Local(HirId(DefId(0:54 ~ version_check[db9d]::date::{impl#0}::exactly).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:172:34: 172:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/date.rs:172:33: 172:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:57 ~ version_check[db9d]::date::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ version_check[db9d]::date::{impl#0}::to_ymd)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11123 ~ core[7d5a]::fmt::{impl#2}::new_v1_formatted)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11026 ~ core[7d5a]::fmt::rt::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11026 ~ core[7d5a]::fmt::rt::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11026 ~ core[7d5a]::fmt::rt::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11071 ~ core[7d5a]::fmt::rt::{impl#2}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ version_check[db9d]::version_and_date_from_rustc_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9671 ~ core[7d5a]::option::{impl#0}::unwrap_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8897 ~ core[7d5a]::iter::traits::iterator::Iterator::last)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14330 ~ core[7d5a]::str::{impl#0}::lines)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14379 ~ core[7d5a]::str::{impl#0}::trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8901 ~ core[7d5a]::iter::traits::iterator::Iterator::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8920 ~ core[7d5a]::iter::traits::iterator::Iterator::filter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14337 ~ core[7d5a]::str::{impl#0}::ends_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14400 ~ core[7d5a]::str::{impl#0}::trim_left_matches)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14385 ~ core[7d5a]::str::{impl#0}::trim_left)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14402 ~ core[7d5a]::str::{impl#0}::trim_right_matches)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14386 ~ core[7d5a]::str::{impl#0}::trim_right)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14330 ~ core[7d5a]::str::{impl#0}::lines)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8901 ~ core[7d5a]::iter::traits::iterator::Iterator::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14359 ~ core[7d5a]::str::{impl#0}::splitn)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14379 ~ core[7d5a]::str::{impl#0}::trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8901 ~ core[7d5a]::iter::traits::iterator::Iterator::nth)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14379 ~ core[7d5a]::str::{impl#0}::trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:63 ~ version_check[db9d]::version_and_date_from_rustc_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9704 ~ core[7d5a]::option::{impl#0}::or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9704 ~ core[7d5a]::option::{impl#0}::or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:148:43: 148:48 (#0), res: Local(HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).55)), segments: [PathSegment { ident: split#0, hir_id: HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).114), res: Local(HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:148:43: 148:48 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).141), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:150:44: 150:49 (#0), res: Local(HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).55)), segments: [PathSegment { ident: split#0, hir_id: HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).142), res: Local(HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:150:44: 150:49 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:148:43: 148:48 (#0), res: Local(HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).55)), segments: [PathSegment { ident: split#0, hir_id: HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).114), res: Local(HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:148:43: 148:48 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).141), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:150:44: 150:49 (#0), res: Local(HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).55)), segments: [PathSegment { ident: split#0, hir_id: HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).142), res: Local(HirId(DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version).55)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:150:44: 150:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ version_check[db9d]::get_version_and_date)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10436 ~ core[7d5a]::result::{impl#0}::unwrap_or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:1989 ~ std[e3cd]::env::var)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9699 ~ core[7d5a]::option::{impl#0}::and_then)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:5695 ~ std[e3cd]::process::{impl#22}::output)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:5671 ~ std[e3cd]::process::{impl#22}::arg)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(2:5671 ~ std[e3cd]::process::{impl#22}::arg)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5669 ~ std[e3cd]::process::{impl#22}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10391 ~ core[7d5a]::result::{impl#0}::ok)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5966 ~ alloc[5873]::string::{impl#0}::from_utf8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:68 ~ version_check[db9d]::version_and_date_from_rustc_verbose_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ version_check[db9d]::triple)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:71 ~ version_check[db9d]::get_version_and_date)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:30 ~ version_check[db9d]::channel::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:76 ~ version_check[db9d]::is_min_date)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ version_check[db9d]::date::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:76 ~ version_check[db9d]::is_min_date).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:204:52: 204:62 (#0), res: Local(HirId(DefId(0:76 ~ version_check[db9d]::is_min_date).18)), segments: [PathSegment { ident: rustc_date#0, hir_id: HirId(DefId(0:76 ~ version_check[db9d]::is_min_date).30), res: Local(HirId(DefId(0:76 ~ version_check[db9d]::is_min_date).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:204:52: 204:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:76 ~ version_check[db9d]::is_min_date).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:204:66: 204:74 (#0), res: Local(HirId(DefId(0:76 ~ version_check[db9d]::is_min_date).21)), segments: [PathSegment { ident: min_date#0, hir_id: HirId(DefId(0:76 ~ version_check[db9d]::is_min_date).32), res: Local(HirId(DefId(0:76 ~ version_check[db9d]::is_min_date).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:204:66: 204:74 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ version_check[db9d]::is_max_date)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ version_check[db9d]::date::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ version_check[db9d]::is_max_date).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:220:52: 220:62 (#0), res: Local(HirId(DefId(0:77 ~ version_check[db9d]::is_max_date).18)), segments: [PathSegment { ident: rustc_date#0, hir_id: HirId(DefId(0:77 ~ version_check[db9d]::is_max_date).30), res: Local(HirId(DefId(0:77 ~ version_check[db9d]::is_max_date).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:220:52: 220:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ version_check[db9d]::is_max_date).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:220:66: 220:74 (#0), res: Local(HirId(DefId(0:77 ~ version_check[db9d]::is_max_date).21)), segments: [PathSegment { ident: max_date#0, hir_id: HirId(DefId(0:77 ~ version_check[db9d]::is_max_date).32), res: Local(HirId(DefId(0:77 ~ version_check[db9d]::is_max_date).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:220:66: 220:74 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:78 ~ version_check[db9d]::is_exact_date)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ version_check[db9d]::date::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ version_check[db9d]::date::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:78 ~ version_check[db9d]::is_exact_date).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:236:48: 236:58 (#0), res: Local(HirId(DefId(0:78 ~ version_check[db9d]::is_exact_date).18)), segments: [PathSegment { ident: rustc_date#0, hir_id: HirId(DefId(0:78 ~ version_check[db9d]::is_exact_date).30), res: Local(HirId(DefId(0:78 ~ version_check[db9d]::is_exact_date).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:236:48: 236:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:78 ~ version_check[db9d]::is_exact_date).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:236:62: 236:66 (#0), res: Local(HirId(DefId(0:78 ~ version_check[db9d]::is_exact_date).21)), segments: [PathSegment { ident: date#0, hir_id: HirId(DefId(0:78 ~ version_check[db9d]::is_exact_date).32), res: Local(HirId(DefId(0:78 ~ version_check[db9d]::is_exact_date).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:236:62: 236:66 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ version_check[db9d]::is_min_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ version_check[db9d]::version::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:79 ~ version_check[db9d]::is_min_version).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:252:50: 252:59 (#0), res: Local(HirId(DefId(0:79 ~ version_check[db9d]::is_min_version).18)), segments: [PathSegment { ident: rustc_ver#0, hir_id: HirId(DefId(0:79 ~ version_check[db9d]::is_min_version).30), res: Local(HirId(DefId(0:79 ~ version_check[db9d]::is_min_version).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:252:50: 252:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:79 ~ version_check[db9d]::is_min_version).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:252:63: 252:70 (#0), res: Local(HirId(DefId(0:79 ~ version_check[db9d]::is_min_version).21)), segments: [PathSegment { ident: min_ver#0, hir_id: HirId(DefId(0:79 ~ version_check[db9d]::is_min_version).32), res: Local(HirId(DefId(0:79 ~ version_check[db9d]::is_min_version).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:252:63: 252:70 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:80 ~ version_check[db9d]::is_max_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ version_check[db9d]::version::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:80 ~ version_check[db9d]::is_max_version).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:268:50: 268:59 (#0), res: Local(HirId(DefId(0:80 ~ version_check[db9d]::is_max_version).18)), segments: [PathSegment { ident: rustc_ver#0, hir_id: HirId(DefId(0:80 ~ version_check[db9d]::is_max_version).30), res: Local(HirId(DefId(0:80 ~ version_check[db9d]::is_max_version).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:268:50: 268:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:80 ~ version_check[db9d]::is_max_version).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:268:63: 268:70 (#0), res: Local(HirId(DefId(0:80 ~ version_check[db9d]::is_max_version).21)), segments: [PathSegment { ident: max_ver#0, hir_id: HirId(DefId(0:80 ~ version_check[db9d]::is_max_version).32), res: Local(HirId(DefId(0:80 ~ version_check[db9d]::is_max_version).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:268:63: 268:70 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ version_check[db9d]::is_exact_version)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:6 ~ version_check[db9d]::version::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:9 ~ version_check[db9d]::version::{impl#0}::parse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ version_check[db9d]::is_exact_version).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:283:50: 283:59 (#0), res: Local(HirId(DefId(0:81 ~ version_check[db9d]::is_exact_version).18)), segments: [PathSegment { ident: rustc_ver#0, hir_id: HirId(DefId(0:81 ~ version_check[db9d]::is_exact_version).30), res: Local(HirId(DefId(0:81 ~ version_check[db9d]::is_exact_version).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:283:50: 283:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ version_check[db9d]::is_exact_version).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:283:63: 283:70 (#0), res: Local(HirId(DefId(0:81 ~ version_check[db9d]::is_exact_version).21)), segments: [PathSegment { ident: version#0, hir_id: HirId(DefId(0:81 ~ version_check[db9d]::is_exact_version).32), res: Local(HirId(DefId(0:81 ~ version_check[db9d]::is_exact_version).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:283:63: 283:70 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ version_check[db9d]::is_feature_flaggable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:27 ~ version_check[db9d]::channel::{impl#0}::read)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ version_check[db9d]::channel::{impl#0}::supports_features)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ version_check[db9d]::supports_feature)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:82 ~ version_check[db9d]::is_feature_flaggable)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9705 ~ core[7d5a]::option::{impl#0}::or_else)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1992 ~ std[e3cd]::env::var_os)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:1992 ~ std[e3cd]::env::var_os)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:2270 ~ std[e3cd]::ffi::os_str::{impl#23}::to_string_lossy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8920 ~ core[7d5a]::iter::traits::iterator::Iterator::filter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8910 ~ core[7d5a]::iter::traits::iterator::Iterator::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14379 ~ core[7d5a]::str::{impl#0}::trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14400 ~ core[7d5a]::str::{impl#0}::trim_left_matches)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14335 ~ core[7d5a]::str::{impl#0}::starts_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8897 ~ core[7d5a]::iter::traits::iterator::Iterator::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9015 ~ core[7d5a]::iter::traits::iterator::Iterator::any)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14347 ~ core[7d5a]::str::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).158), kind: MethodCall(PathSegment { ident: trim#0, hir_id: HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).159), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).160), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:345:59: 345:60 (#0), res: Local(HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).156)), segments: [PathSegment { ident: f#0, hir_id: HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).161), res: Local(HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:345:59: 345:60 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:345:61: 345:67 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:345:59: 345:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:345:71: 345:78 (#0), res: Local(HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).2)), segments: [PathSegment { ident: feature#0, hir_id: HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).163), res: Local(HirId(DefId(0:84 ~ version_check[db9d]::supports_feature).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/version_check-0.9.5/src/lib.rs:345:71: 345:78 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:14379 ~ core[7d5a]::str::{impl#0}::trim)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
