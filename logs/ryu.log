[DEBUG] Trying to get func ty of defid DefId(0:17 ~ ryu[f122]::buffer::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2048 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::uninit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:19 ~ ryu[f122]::buffer::{impl#0}::format)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:32 ~ ryu[f122]::buffer::Sealed::is_nonfinite)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:33 ~ ryu[f122]::buffer::Sealed::format_nonfinite)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:34 ~ ryu[f122]::buffer::Sealed::write_to_ryu_buffer)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:75:27: 75:28 (#0), res: Local(HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).21)), segments: [PathSegment { ident: n#0, hir_id: HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).29), res: Local(HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:75:27: 75:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).30), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).31), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).32), kind: Field(Expr { hir_id: HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:75:32: 75:36 (#0), res: Local(HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).34), res: Local(HirId(DefId(0:21 ~ ryu[f122]::buffer::{impl#0}::format_finite).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:75:32: 75:36 (#0) }, bytes#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:75:32: 75:42 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:75:43: 75:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:75:32: 75:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:25 ~ ryu[f122]::buffer::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:17 ~ ryu[f122]::buffer::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:27 ~ ryu[f122]::buffer::{impl#3}::default)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:17 ~ ryu[f122]::buffer::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:351 ~ core[7d5a]::f32::{impl#0}::to_bits)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).12), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:14: 120:15 (#0) }, Expr { hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:9: 120:13 (#0), res: Local(HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).10)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).14), res: Local(HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:9: 120:13 (#0) }, Expr { hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:16: 120:24 (#0), res: Def(Const, DefId(0:37 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite::EXP_MASK)), segments: [PathSegment { ident: EXP_MASK#0, hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).16), res: Def(Const, DefId(0:37 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite::EXP_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:16: 120:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:9: 120:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:28: 120:36 (#0), res: Def(Const, DefId(0:37 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite::EXP_MASK)), segments: [PathSegment { ident: EXP_MASK#0, hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).18), res: Def(Const, DefId(0:37 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite::EXP_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:28: 120:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:9: 120:13 (#0), res: Local(HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).10)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).14), res: Local(HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:9: 120:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:16: 120:24 (#0), res: Def(Const, DefId(0:37 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite::EXP_MASK)), segments: [PathSegment { ident: EXP_MASK#0, hir_id: HirId(DefId(0:36 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite).16), res: Def(Const, DefId(0:37 ~ ryu[f122]::buffer::{impl#6}::is_nonfinite::EXP_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:120:16: 120:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:351 ~ core[7d5a]::f32::{impl#0}::to_bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).14), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:17: 129:18 (#0) }, Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:12: 129:16 (#0), res: Local(HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).16), res: Local(HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:12: 129:16 (#0) }, Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:19: 129:32 (#0), res: Def(Const, DefId(0:39 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite::MANTISSA_MASK)), segments: [PathSegment { ident: MANTISSA_MASK#0, hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).18), res: Def(Const, DefId(0:39 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite::MANTISSA_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:19: 129:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:12: 129:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:36: 129:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:36: 129:37 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:12: 129:16 (#0), res: Local(HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).16), res: Local(HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:12: 129:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:19: 129:32 (#0), res: Def(Const, DefId(0:39 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite::MANTISSA_MASK)), segments: [PathSegment { ident: MANTISSA_MASK#0, hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).18), res: Def(Const, DefId(0:39 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite::MANTISSA_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:129:19: 129:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).27), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:24: 131:25 (#0) }, Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:19: 131:23 (#0), res: Local(HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).29), res: Local(HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:19: 131:23 (#0) }, Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:26: 131:35 (#0), res: Def(Const, DefId(0:40 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite::SIGN_MASK)), segments: [PathSegment { ident: SIGN_MASK#0, hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).31), res: Def(Const, DefId(0:40 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite::SIGN_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:26: 131:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:19: 131:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).32), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:39: 131:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:39: 131:40 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:19: 131:23 (#0), res: Local(HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).29), res: Local(HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:19: 131:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:26: 131:35 (#0), res: Def(Const, DefId(0:40 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite::SIGN_MASK)), segments: [PathSegment { ident: SIGN_MASK#0, hir_id: HirId(DefId(0:38 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite).31), res: Def(Const, DefId(0:40 ~ ryu[f122]::buffer::{impl#6}::format_nonfinite::SIGN_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:131:26: 131:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ ryu[f122]::buffer::{impl#6}::write_to_ryu_buffer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ ryu[f122]::pretty::format32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:458 ~ core[7d5a]::f64::{impl#0}::to_bits)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).12), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:14: 149:15 (#0) }, Expr { hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:9: 149:13 (#0), res: Local(HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).10)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).14), res: Local(HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:9: 149:13 (#0) }, Expr { hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:16: 149:24 (#0), res: Def(Const, DefId(0:44 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite::EXP_MASK)), segments: [PathSegment { ident: EXP_MASK#0, hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).16), res: Def(Const, DefId(0:44 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite::EXP_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:16: 149:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:9: 149:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:28: 149:36 (#0), res: Def(Const, DefId(0:44 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite::EXP_MASK)), segments: [PathSegment { ident: EXP_MASK#0, hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).18), res: Def(Const, DefId(0:44 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite::EXP_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:28: 149:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:9: 149:13 (#0), res: Local(HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).10)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).14), res: Local(HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:9: 149:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:16: 149:24 (#0), res: Def(Const, DefId(0:44 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite::EXP_MASK)), segments: [PathSegment { ident: EXP_MASK#0, hir_id: HirId(DefId(0:43 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite).16), res: Def(Const, DefId(0:44 ~ ryu[f122]::buffer::{impl#7}::is_nonfinite::EXP_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:149:16: 149:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:458 ~ core[7d5a]::f64::{impl#0}::to_bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).14), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:17: 158:18 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:12: 158:16 (#0), res: Local(HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).16), res: Local(HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:12: 158:16 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:19: 158:32 (#0), res: Def(Const, DefId(0:46 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite::MANTISSA_MASK)), segments: [PathSegment { ident: MANTISSA_MASK#0, hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).18), res: Def(Const, DefId(0:46 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite::MANTISSA_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:19: 158:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:12: 158:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).19), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:36: 158:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:36: 158:37 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:12: 158:16 (#0), res: Local(HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).16), res: Local(HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:12: 158:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:19: 158:32 (#0), res: Def(Const, DefId(0:46 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite::MANTISSA_MASK)), segments: [PathSegment { ident: MANTISSA_MASK#0, hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).18), res: Def(Const, DefId(0:46 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite::MANTISSA_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:158:19: 158:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).27), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:24: 160:25 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:19: 160:23 (#0), res: Local(HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).29), res: Local(HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:19: 160:23 (#0) }, Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:26: 160:35 (#0), res: Def(Const, DefId(0:47 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite::SIGN_MASK)), segments: [PathSegment { ident: SIGN_MASK#0, hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).31), res: Def(Const, DefId(0:47 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite::SIGN_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:26: 160:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:19: 160:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).32), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:39: 160:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:39: 160:40 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:19: 160:23 (#0), res: Local(HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).29), res: Local(HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:19: 160:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:26: 160:35 (#0), res: Def(Const, DefId(0:47 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite::SIGN_MASK)), segments: [PathSegment { ident: SIGN_MASK#0, hir_id: HirId(DefId(0:45 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite).31), res: Def(Const, DefId(0:47 ~ ryu[f122]::buffer::{impl#7}::format_nonfinite::SIGN_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/buffer/mod.rs:160:26: 160:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:48 ~ ryu[f122]::buffer::{impl#7}::write_to_ryu_buffer)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ ryu[f122]::pretty::format64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ ryu[f122]::common::decimal_length9)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:27:19: 27:20 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).10), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:27:19: 27:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).11), kind: Lit(Spanned { node: Int(Pu128(1000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:27:23: 27:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:27:23: 27:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:29:8: 29:9 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).28), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:29:8: 29:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).29), kind: Lit(Spanned { node: Int(Pu128(100000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:29:13: 29:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:29:13: 29:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:31:15: 31:16 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).37), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:31:15: 31:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).38), kind: Lit(Spanned { node: Int(Pu128(10000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:31:20: 31:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:31:20: 31:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:33:15: 33:16 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).46), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:33:15: 33:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).47), kind: Lit(Spanned { node: Int(Pu128(1000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:33:20: 33:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:33:20: 33:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:35:15: 35:16 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).55), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:35:15: 35:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).56), kind: Lit(Spanned { node: Int(Pu128(100000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:35:20: 35:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:35:20: 35:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:37:15: 37:16 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).64), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:37:15: 37:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).65), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:37:20: 37:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:37:20: 37:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:39:15: 39:16 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).73), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:39:15: 39:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).74), kind: Lit(Spanned { node: Int(Pu128(1000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:39:20: 39:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:39:20: 39:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:41:15: 41:16 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).82), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:41:15: 41:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).83), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:41:20: 41:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:41:20: 41:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:43:15: 43:16 (#0), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).91), res: Local(HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:43:15: 43:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:50 ~ ryu[f122]::common::decimal_length9).92), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:43:20: 43:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:43:20: 43:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ ryu[f122]::common::log2_pow5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:57:19: 57:20 (#0), res: Local(HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).10), res: Local(HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:57:19: 57:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:57:24: 57:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:57:24: 57:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:58:19: 58:20 (#0), res: Local(HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).32), res: Local(HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:58:19: 58:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).33), kind: Lit(Spanned { node: Int(Pu128(3528), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:58:24: 58:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:58:24: 58:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).49), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:16: 59:17 (#0) }, Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).50), kind: Cast(Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:7: 59:8 (#0), res: Local(HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).52), res: Local(HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:7: 59:8 (#0) }, Ty { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:12: 59:15 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).54), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:12: 59:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:7: 59:15 (#0) }, Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).55), kind: Lit(Spanned { node: Int(Pu128(1217359), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:18: 59:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:18: 59:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:6: 59:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).56), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:30: 59:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:30: 59:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).50), kind: Cast(Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:7: 59:8 (#0), res: Local(HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).52), res: Local(HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:7: 59:8 (#0) }, Ty { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:12: 59:15 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).54), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:12: 59:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:7: 59:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:51 ~ ryu[f122]::common::log2_pow5).55), kind: Lit(Spanned { node: Int(Pu128(1217359), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:18: 59:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:59:18: 59:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ ryu[f122]::common::pow5bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:68:19: 68:20 (#0), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).10), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:68:19: 68:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:68:24: 68:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:68:24: 68:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:69:19: 69:20 (#0), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).32), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:69:19: 69:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).33), kind: Lit(Spanned { node: Int(Pu128(3528), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:69:24: 69:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:69:24: 69:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).49), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:28: 70:30 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).50), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:17: 70:18 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).51), kind: Cast(Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:9 (#0), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).53), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:9 (#0) }, Ty { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:13: 70:16 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).55), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:13: 70:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:16 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).56), kind: Lit(Spanned { node: Int(Pu128(1217359), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:19: 70:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:19: 70:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:7: 70:27 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).57), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:31: 70:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:31: 70:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:6: 70:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).58), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:37: 70:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:37: 70:38 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).50), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:17: 70:18 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).51), kind: Cast(Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:9 (#0), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).53), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:9 (#0) }, Ty { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:13: 70:16 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).55), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:13: 70:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:16 (#0) }, Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).56), kind: Lit(Spanned { node: Int(Pu128(1217359), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:19: 70:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:19: 70:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:7: 70:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).57), kind: Lit(Spanned { node: Int(Pu128(19), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:31: 70:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:31: 70:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).51), kind: Cast(Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:9 (#0), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).53), res: Local(HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:9 (#0) }, Ty { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:13: 70:16 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).55), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:13: 70:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:8: 70:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:52 ~ ryu[f122]::common::pow5bits).56), kind: Lit(Spanned { node: Int(Pu128(1217359), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:19: 70:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:70:19: 70:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5).4), kind: Call(Expr { hir_id: HirId(DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:76:5: 76:14 (#0), res: Def(Fn, DefId(0:51 ~ ryu[f122]::common::log2_pow5)), segments: [PathSegment { ident: log2_pow5#0, hir_id: HirId(DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5).6), res: Def(Fn, DefId(0:51 ~ ryu[f122]::common::log2_pow5)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:76:5: 76:14 (#0) }, [Expr { hir_id: HirId(DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:76:15: 76:16 (#0), res: Local(HirId(DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5).8), res: Local(HirId(DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:76:15: 76:16 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:76:5: 76:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:53 ~ ryu[f122]::common::ceil_log2_pow5).9), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:76:20: 76:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:76:20: 76:21 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:51 ~ ryu[f122]::common::log2_pow5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ ryu[f122]::common::log10_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:83:19: 83:20 (#0), res: Local(HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).10), res: Local(HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:83:19: 83:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:83:24: 83:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:83:24: 83:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:84:19: 84:20 (#0), res: Local(HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).32), res: Local(HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:84:19: 84:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).33), kind: Lit(Spanned { node: Int(Pu128(1650), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:84:24: 84:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:84:24: 84:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).48), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:15: 85:16 (#0) }, Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).49), kind: Cast(Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:6: 85:7 (#0), res: Local(HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).51), res: Local(HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:6: 85:7 (#0) }, Ty { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:11: 85:14 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).53), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:11: 85:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:6: 85:14 (#0) }, Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).54), kind: Lit(Spanned { node: Int(Pu128(78913), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:17: 85:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:17: 85:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:5: 85:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).55), kind: Lit(Spanned { node: Int(Pu128(18), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:27: 85:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:27: 85:29 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).49), kind: Cast(Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:6: 85:7 (#0), res: Local(HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).51), res: Local(HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:6: 85:7 (#0) }, Ty { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:11: 85:14 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).53), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:11: 85:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:6: 85:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:54 ~ ryu[f122]::common::log10_pow2).54), kind: Lit(Spanned { node: Int(Pu128(78913), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:17: 85:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:85:17: 85:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ ryu[f122]::common::log10_pow5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:92:19: 92:20 (#0), res: Local(HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).10), res: Local(HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:92:19: 92:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:92:24: 92:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:92:24: 92:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:93:19: 93:20 (#0), res: Local(HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).32), res: Local(HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:93:19: 93:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).33), kind: Lit(Spanned { node: Int(Pu128(2620), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:93:24: 93:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:93:24: 93:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).48), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:15: 94:16 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).49), kind: Cast(Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:6: 94:7 (#0), res: Local(HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).51), res: Local(HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:6: 94:7 (#0) }, Ty { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:11: 94:14 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).53), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:11: 94:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:6: 94:14 (#0) }, Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).54), kind: Lit(Spanned { node: Int(Pu128(732923), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:17: 94:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:17: 94:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:5: 94:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).55), kind: Lit(Spanned { node: Int(Pu128(20), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:28: 94:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:28: 94:30 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).49), kind: Cast(Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:6: 94:7 (#0), res: Local(HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).2)), segments: [PathSegment { ident: e#0, hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).51), res: Local(HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:6: 94:7 (#0) }, Ty { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:11: 94:14 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).53), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:11: 94:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:6: 94:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:55 ~ ryu[f122]::common::log10_pow5).54), kind: Lit(Spanned { node: Int(Pu128(732923), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:17: 94:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/common.rs:94:17: 94:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ ryu[f122]::d2s::decimal_length17)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:43:19: 43:20 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).10), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:43:19: 43:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).11), kind: Lit(Spanned { node: Int(Pu128(100000000000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:43:23: 43:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:43:23: 43:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:45:8: 45:9 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).28), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:45:8: 45:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).29), kind: Lit(Spanned { node: Int(Pu128(10000000000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:45:13: 45:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:45:13: 45:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:47:15: 47:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).37), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:47:15: 47:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).38), kind: Lit(Spanned { node: Int(Pu128(1000000000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:47:20: 47:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:47:20: 47:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:49:15: 49:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).46), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:49:15: 49:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).47), kind: Lit(Spanned { node: Int(Pu128(100000000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:49:20: 49:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:49:20: 49:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:51:15: 51:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).55), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:51:15: 51:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).56), kind: Lit(Spanned { node: Int(Pu128(10000000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:51:20: 51:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:51:20: 51:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:53:15: 53:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).64), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:53:15: 53:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).65), kind: Lit(Spanned { node: Int(Pu128(1000000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:53:20: 53:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:53:20: 53:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:55:15: 55:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).73), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:55:15: 55:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).74), kind: Lit(Spanned { node: Int(Pu128(100000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:55:20: 55:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:55:20: 55:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:57:15: 57:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).82), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:57:15: 57:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).83), kind: Lit(Spanned { node: Int(Pu128(10000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:57:20: 57:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:57:20: 57:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:59:15: 59:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).91), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:59:15: 59:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).92), kind: Lit(Spanned { node: Int(Pu128(1000000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:59:20: 59:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:59:20: 59:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).99), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:61:15: 61:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).100), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:61:15: 61:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).101), kind: Lit(Spanned { node: Int(Pu128(100000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:61:20: 61:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:61:20: 61:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:63:15: 63:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).109), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:63:15: 63:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).110), kind: Lit(Spanned { node: Int(Pu128(10000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:63:20: 63:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:63:20: 63:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:65:15: 65:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).118), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:65:15: 65:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).119), kind: Lit(Spanned { node: Int(Pu128(1000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:65:20: 65:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:65:20: 65:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).126), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:67:15: 67:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).127), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:67:15: 67:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).128), kind: Lit(Spanned { node: Int(Pu128(100000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:67:20: 67:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:67:20: 67:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).135), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:69:15: 69:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).136), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:69:15: 69:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).137), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:69:20: 69:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:69:20: 69:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:71:15: 71:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).145), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:71:15: 71:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).146), kind: Lit(Spanned { node: Int(Pu128(1000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:71:20: 71:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:71:20: 71:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:73:15: 73:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).154), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:73:15: 73:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).155), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:73:20: 73:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:73:20: 73:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:75:15: 75:16 (#0), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).163), res: Local(HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:75:15: 75:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:77 ~ ryu[f122]::d2s::decimal_length17).164), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:75:20: 75:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:75:20: 75:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ ryu[f122]::d2s::d2d)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:92:23: 92:36 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).9), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:92:23: 92:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).10), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:92:40: 92:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:92:40: 92:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).14), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:29: 95:30 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).15), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:15: 95:16 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:14 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:17: 95:28 (#0), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), segments: [PathSegment { ident: DOUBLE_BIAS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).18), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:17: 95:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:28 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).19), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:31: 95:51 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).21), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:31: 95:51 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:55: 95:58 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).23), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:55: 95:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:31: 95:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).24), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:61: 95:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:61: 95:62 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).15), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:15: 95:16 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:14 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:17: 95:28 (#0), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), segments: [PathSegment { ident: DOUBLE_BIAS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).18), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:17: 95:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).19), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:31: 95:51 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).21), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:31: 95:51 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:55: 95:58 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).23), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:55: 95:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:31: 95:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:13: 95:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:17: 95:28 (#0), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), segments: [PathSegment { ident: DOUBLE_BIAS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).18), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:95:17: 95:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).32), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:48: 100:49 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).33), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:34: 100:35 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).34), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:26 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).36), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:26 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:30: 100:33 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).38), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:30: 100:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:33 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:36: 100:47 (#0), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), segments: [PathSegment { ident: DOUBLE_BIAS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).40), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:36: 100:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:47 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).41), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:50: 100:70 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).43), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:50: 100:70 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:74: 100:77 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).45), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:74: 100:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:50: 100:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:77 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).46), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:80: 100:81 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:80: 100:81 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).33), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:34: 100:35 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).34), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:26 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).36), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:26 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:30: 100:33 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).38), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:30: 100:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:33 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:36: 100:47 (#0), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), segments: [PathSegment { ident: DOUBLE_BIAS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).40), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:36: 100:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).41), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:50: 100:70 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).43), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:50: 100:70 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:74: 100:77 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).45), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:74: 100:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:50: 100:77 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).34), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:26 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).36), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:26 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:30: 100:33 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).38), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:30: 100:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:13: 100:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:36: 100:47 (#0), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), segments: [PathSegment { ident: DOUBLE_BIAS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).40), res: Def(Const, DefId(0:74 ~ ryu[f122]::d2s::DOUBLE_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:100:36: 100:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).48), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:19: 101:21 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).49), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:14: 101:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:14: 101:18 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:22: 101:42 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).51), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:22: 101:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:13: 101:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:46: 101:59 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).2)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).53), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:46: 101:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).49), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:14: 101:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:14: 101:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:22: 101:42 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).51), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:101:22: 101:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).61), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:20: 104:21 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:17: 104:19 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).63), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:17: 104:19 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).64), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:22: 104:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:22: 104:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:16: 104:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).65), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:28: 104:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:28: 104:29 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:17: 104:19 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).63), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:17: 104:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).64), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:22: 104:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:104:22: 104:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).75), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:108:14: 108:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:108:14: 108:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:108:18: 108:20 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).77), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:108:18: 108:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).83), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:35: 110:37 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:21: 110:34 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).2)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).85), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:21: 110:34 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).86), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:38: 110:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:38: 110:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:21: 110:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).87), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:57: 110:59 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:43: 110:56 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).89), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:43: 110:56 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).90), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:60: 110:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:60: 110:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:43: 110:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:21: 110:34 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).2)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).85), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:21: 110:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).86), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:38: 110:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:38: 110:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:43: 110:56 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).89), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:43: 110:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).90), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:60: 110:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:110:60: 110:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2048 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2048 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::uninit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:124:8: 124:10 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).150), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:124:8: 124:10 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).151), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:124:14: 124:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:124:14: 124:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).155), kind: Call(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:17: 127:27 (#0), res: Def(Fn, DefId(0:54 ~ ryu[f122]::common::log10_pow2)), segments: [PathSegment { ident: log10_pow2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).157), res: Def(Fn, DefId(0:54 ~ ryu[f122]::common::log10_pow2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:17: 127:27 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).158), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:28: 127:30 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).159), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:28: 127:30 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:17: 127:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).160), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).161), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:38: 127:39 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:35: 127:37 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).163), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:35: 127:37 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).164), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:40: 127:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:40: 127:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:34: 127:42 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).165), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:46: 127:49 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).166), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:46: 127:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:34: 127:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ ryu[f122]::common::log10_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:35: 127:37 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).163), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:35: 127:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).164), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:40: 127:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:127:40: 127:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).180), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:42: 129:43 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:17: 129:41 (#0), res: Def(Const, DefId(0:75 ~ ryu[f122]::d2s::DOUBLE_POW5_INV_BITCOUNT)), segments: [PathSegment { ident: DOUBLE_POW5_INV_BITCOUNT#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).182), res: Def(Const, DefId(0:75 ~ ryu[f122]::d2s::DOUBLE_POW5_INV_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:17: 129:41 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).183), kind: Call(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:44: 129:52 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).185), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:44: 129:52 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).186), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:53: 129:54 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).188), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:53: 129:54 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).189), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:58: 129:61 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).190), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:58: 129:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:53: 129:61 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:44: 129:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:17: 129:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).191), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:65: 129:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:65: 129:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:17: 129:41 (#0), res: Def(Const, DefId(0:75 ~ ryu[f122]::d2s::DOUBLE_POW5_INV_BITCOUNT)), segments: [PathSegment { ident: DOUBLE_POW5_INV_BITCOUNT#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).182), res: Def(Const, DefId(0:75 ~ ryu[f122]::d2s::DOUBLE_POW5_INV_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:17: 129:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).183), kind: Call(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:44: 129:52 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).185), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:44: 129:52 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).186), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:53: 129:54 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).188), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:53: 129:54 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).189), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:58: 129:61 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).190), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:58: 129:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:53: 129:61 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:129:44: 129:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ ryu[f122]::common::pow5bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).196), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:21: 130:22 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).197), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:18: 130:20 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).199), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:18: 130:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:17: 130:20 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).200), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:23: 130:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).202), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:23: 130:24 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).203), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:28: 130:31 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).204), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:28: 130:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:23: 130:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:17: 130:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).205), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:34: 130:35 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).193)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).206), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).193)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:34: 130:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).197), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:18: 130:20 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).199), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:18: 130:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:17: 130:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).200), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:23: 130:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).202), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:23: 130:24 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).203), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:28: 130:31 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).204), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:28: 130:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:130:23: 130:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).225), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:35: 138:36 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).226), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:35: 138:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).227), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).228), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).229), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).230), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:39: 138:60 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:85 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_INV_SPLIT)), segments: [PathSegment { ident: DOUBLE_POW5_INV_SPLIT#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).231), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:85 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_INV_SPLIT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:39: 138:60 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:61: 138:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:39: 138:66 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:70: 138:73 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).233), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:70: 138:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:138:39: 138:73 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2057 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2057 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2058 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::assume_init)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2058 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::assume_init)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).296), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:149:12: 149:13 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).297), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).168)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:149:12: 149:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).298), kind: Lit(Spanned { node: Int(Pu128(21), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:149:17: 149:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:149:17: 149:19 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25060 ~ core[7d5a]::num::{impl#8}::wrapping_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ ryu[f122]::d2s_intrinsics::div5)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).323), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:154:16: 154:23 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).320)), segments: [PathSegment { ident: mv_mod5#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).324), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).320)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:154:16: 154:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).325), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:154:27: 154:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:154:27: 154:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).351), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:66: 160:67 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).352), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:63: 160:65 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).79)), segments: [PathSegment { ident: mv#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).353), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:63: 160:65 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).354), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:68: 160:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:68: 160:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:63: 160:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).355), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).356), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:72: 160:80 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).94)), segments: [PathSegment { ident: mm_shift#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).357), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).94)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:72: 160:80 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).358), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:84: 160:87 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).359), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:84: 160:87 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:72: 160:87 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).352), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:63: 160:65 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).79)), segments: [PathSegment { ident: mv#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).353), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:63: 160:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).354), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:68: 160:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:160:68: 160:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).374), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:163:46: 163:48 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).79)), segments: [PathSegment { ident: mv#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).375), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:163:46: 163:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).376), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:163:51: 163:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:163:51: 163:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).390), kind: Call(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).391), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:17: 168:27 (#0), res: Def(Fn, DefId(0:55 ~ ryu[f122]::common::log10_pow5)), segments: [PathSegment { ident: log10_pow5#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).392), res: Def(Fn, DefId(0:55 ~ ryu[f122]::common::log10_pow5)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:17: 168:27 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).393), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).394), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:29: 168:31 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).395), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:29: 168:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:28: 168:31 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:17: 168:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).396), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).397), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:40: 168:41 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).398), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).399), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:37: 168:39 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).400), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:37: 168:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:36: 168:39 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).401), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:42: 168:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:42: 168:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:35: 168:44 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).402), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:48: 168:51 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).403), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:48: 168:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:35: 168:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ ryu[f122]::common::log10_pow5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).398), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).399), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:37: 168:39 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).400), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:37: 168:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:36: 168:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).401), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:42: 168:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:168:42: 168:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).410), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).411), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:169:15: 169:16 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).412), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:169:15: 169:16 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:169:20: 169:23 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).414), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:169:20: 169:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:169:15: 169:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).415), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:169:26: 169:28 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).416), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:169:26: 169:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).420), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).421), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:170:18: 170:20 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).422), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:170:18: 170:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:170:17: 170:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).423), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).424), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:170:23: 170:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).425), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:170:23: 170:24 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).426), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:170:28: 170:31 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).427), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:170:28: 170:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:170:23: 170:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).432), kind: Call(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).433), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:171:17: 171:25 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).434), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:171:17: 171:25 (#0) }, [Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).435), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:171:26: 171:27 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).429)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).436), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).429)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:171:26: 171:27 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:171:17: 171:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).437), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:171:31: 171:51 (#0), res: Def(Const, DefId(0:76 ~ ryu[f122]::d2s::DOUBLE_POW5_BITCOUNT)), segments: [PathSegment { ident: DOUBLE_POW5_BITCOUNT#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).438), res: Def(Const, DefId(0:76 ~ ryu[f122]::d2s::DOUBLE_POW5_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:171:31: 171:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ ryu[f122]::common::pow5bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).443), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).444), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:172:17: 172:18 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).445), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:172:17: 172:18 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).446), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:172:22: 172:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).447), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:172:22: 172:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:172:17: 172:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).448), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:172:28: 172:29 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).440)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).449), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).440)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:172:28: 172:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).468), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:35: 180:36 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).429)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).469), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).429)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:35: 180:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).470), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).471), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).472), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).473), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:39: 180:56 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:87 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_SPLIT)), segments: [PathSegment { ident: DOUBLE_POW5_SPLIT#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).474), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:87 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_SPLIT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:39: 180:56 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:57: 180:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:39: 180:62 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).475), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:66: 180:69 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).476), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:66: 180:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:180:39: 180:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2057 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2057 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2058 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::assume_init)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2058 ~ core[7d5a]::mem::maybe_uninit::{impl#2}::assume_init)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).539), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:191:12: 191:13 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).540), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:191:12: 191:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).541), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:191:17: 191:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:191:17: 191:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).556), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:197:40: 197:48 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).94)), segments: [PathSegment { ident: mm_shift#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).557), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).94)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:197:40: 197:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).558), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:197:52: 197:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:197:52: 197:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).573), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:202:19: 202:20 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).574), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).405)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:202:19: 202:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).575), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:202:23: 202:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:202:23: 202:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).603), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:216:21: 216:41 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).604), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:216:21: 216:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).605), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:216:45: 216:65 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).146)), segments: [PathSegment { ident: vr_is_trailing_zeros#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).606), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).146)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:216:45: 216:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).627), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:221:16: 221:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).616)), segments: [PathSegment { ident: vp_div10#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).628), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).616)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:221:16: 221:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).629), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:221:28: 221:36 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).624)), segments: [PathSegment { ident: vm_div10#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).630), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).624)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:221:28: 221:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25060 ~ core[7d5a]::num::{impl#8}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25060 ~ core[7d5a]::num::{impl#8}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).685), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:227:37: 227:45 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).654)), segments: [PathSegment { ident: vm_mod10#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).686), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).654)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:227:37: 227:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).687), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:227:49: 227:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:227:49: 227:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).693), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:228:37: 228:55 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).694), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:228:37: 228:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).695), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:228:59: 228:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:228:59: 228:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25060 ~ core[7d5a]::num::{impl#8}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).764), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:239:20: 239:28 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).761)), segments: [PathSegment { ident: vm_mod10#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).765), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).761)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:239:20: 239:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).766), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:239:32: 239:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:239:32: 239:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25060 ~ core[7d5a]::num::{impl#8}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).811), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:245:41: 245:59 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).812), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:245:41: 245:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).813), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:245:63: 245:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:245:63: 245:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).853), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:33: 253:35 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).854), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:12: 253:32 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).146)), segments: [PathSegment { ident: vr_is_trailing_zeros#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).855), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).146)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:12: 253:32 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).856), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:55: 253:57 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).857), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:36: 253:54 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).858), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:36: 253:54 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).859), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:58: 253:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:58: 253:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:36: 253:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:12: 253:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).860), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:70: 253:72 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).861), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:66: 253:67 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).862), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:65 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).863), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:65 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).864), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:68: 253:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:68: 253:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:69 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).865), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:73: 253:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:73: 253:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).854), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:12: 253:32 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).146)), segments: [PathSegment { ident: vr_is_trailing_zeros#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).855), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).146)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:12: 253:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).856), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:55: 253:57 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).857), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:36: 253:54 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).858), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:36: 253:54 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).859), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:58: 253:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:58: 253:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:36: 253:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).857), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:36: 253:54 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).858), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:36: 253:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).859), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:58: 253:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:58: 253:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).861), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:66: 253:67 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).862), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:65 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).863), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:65 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).864), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:68: 253:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:68: 253:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).865), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:73: 253:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:73: 253:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).862), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:65 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).863), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:63: 253:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).864), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:68: 253:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:253:68: 253:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).876), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:9: 258:11 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).877), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:9: 258:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).878), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).879), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:71: 258:73 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).880), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:25: 258:27 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).881), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:19: 258:21 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).882), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:18 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).883), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:18 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).884), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:22: 258:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).885), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:22: 258:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:24 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).886), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:44: 258:46 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).887), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).888), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:30: 258:43 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).72)), segments: [PathSegment { ident: accept_bounds#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).889), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:30: 258:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:29: 258:43 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).890), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).891), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:48: 258:68 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).892), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:48: 258:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:47: 258:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:28: 258:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:15: 258:70 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).893), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:93: 258:95 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).894), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:74: 258:92 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).895), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:74: 258:92 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).896), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:96: 258:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:96: 258:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:74: 258:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:14: 258:98 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).897), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:259:16: 259:19 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).898), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:259:16: 259:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:14: 259:19 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).880), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:25: 258:27 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).881), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:19: 258:21 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).882), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:18 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).883), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:18 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).884), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:22: 258:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).885), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:22: 258:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:24 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).886), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:44: 258:46 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).887), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).888), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:30: 258:43 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).72)), segments: [PathSegment { ident: accept_bounds#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).889), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:30: 258:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:29: 258:43 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).890), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).891), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:48: 258:68 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).892), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:48: 258:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:47: 258:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:28: 258:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:15: 258:70 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).893), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:93: 258:95 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).894), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:74: 258:92 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).895), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:74: 258:92 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).896), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:96: 258:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:96: 258:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:74: 258:97 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).881), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:19: 258:21 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).882), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:18 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).883), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:18 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).884), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:22: 258:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).885), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:22: 258:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).886), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:44: 258:46 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).887), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).888), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:30: 258:43 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).72)), segments: [PathSegment { ident: accept_bounds#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).889), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:30: 258:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:29: 258:43 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).890), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).891), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:48: 258:68 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).892), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:48: 258:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:47: 258:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:28: 258:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).882), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:18 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).883), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:16: 258:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).884), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:22: 258:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).885), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:22: 258:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).887), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).888), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:30: 258:43 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).72)), segments: [PathSegment { ident: accept_bounds#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).889), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:30: 258:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:29: 258:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).890), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).891), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:48: 258:68 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).892), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).142)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:48: 258:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:47: 258:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).894), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:74: 258:92 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).895), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).599)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:74: 258:92 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).896), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:96: 258:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:258:96: 258:97 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).924), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:266:12: 266:21 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).913)), segments: [PathSegment { ident: vp_div100#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).925), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).913)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:266:12: 266:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).926), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:266:24: 266:33 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).921)), segments: [PathSegment { ident: vm_div100#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).927), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).921)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:266:24: 266:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25060 ~ core[7d5a]::num::{impl#8}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).959), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:269:24: 269:33 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).954)), segments: [PathSegment { ident: vr_mod100#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).960), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).954)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:269:24: 269:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).961), kind: Lit(Spanned { node: Int(Pu128(50), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:269:37: 269:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:269:37: 269:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1008), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:282:16: 282:24 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).997)), segments: [PathSegment { ident: vp_div10#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1009), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).997)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:282:16: 282:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1010), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:282:28: 282:36 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1005)), segments: [PathSegment { ident: vm_div10#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1011), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1005)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:282:28: 282:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25060 ~ core[7d5a]::num::{impl#8}::wrapping_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:25061 ~ core[7d5a]::num::{impl#8}::wrapping_mul)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1048), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:287:24: 287:32 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1043)), segments: [PathSegment { ident: vr_mod10#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1049), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1043)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:287:24: 287:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1050), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:287:36: 287:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:287:36: 287:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1078), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:9: 294:11 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1079), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:9: 294:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1080), kind: Cast(Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1081), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:24: 294:26 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1082), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:18: 294:20 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1083), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:15: 294:17 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1084), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:15: 294:17 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1085), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:21: 294:23 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1086), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:21: 294:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:15: 294:23 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1087), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:27: 294:35 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).905)), segments: [PathSegment { ident: round_up#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1088), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).905)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:27: 294:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:14: 294:36 (#0) }, Ty { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1089), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:40: 294:43 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1090), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:40: 294:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:14: 294:43 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1082), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:18: 294:20 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1083), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:15: 294:17 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1084), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:15: 294:17 (#0) }, Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1085), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:21: 294:23 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1086), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:21: 294:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:15: 294:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1087), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:27: 294:35 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).905)), segments: [PathSegment { ident: round_up#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1088), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).905)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:27: 294:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1083), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:15: 294:17 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1084), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).99)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:15: 294:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1085), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:21: 294:23 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1086), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).109)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:294:21: 294:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1096), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:296:15: 296:18 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).138)), segments: [PathSegment { ident: e10#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1097), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).138)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:296:15: 296:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1098), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:296:21: 296:28 (#0), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).595)), segments: [PathSegment { ident: removed#0, hir_id: HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).1099), res: Local(HirId(DefId(0:81 ~ ryu[f122]::d2s::d2d).595)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s.rs:296:21: 296:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:91 ~ ryu[f122]::d2s_intrinsics::div5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:91 ~ ryu[f122]::d2s_intrinsics::div5).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:25:5: 25:6 (#0), res: Local(HirId(DefId(0:91 ~ ryu[f122]::d2s_intrinsics::div5).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:91 ~ ryu[f122]::d2s_intrinsics::div5).5), res: Local(HirId(DefId(0:91 ~ ryu[f122]::d2s_intrinsics::div5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:25:5: 25:6 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:91 ~ ryu[f122]::d2s_intrinsics::div5).6), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:25:9: 25:10 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:25:9: 25:10 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:30:5: 30:6 (#0), res: Local(HirId(DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10).5), res: Local(HirId(DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:30:5: 30:6 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:92 ~ ryu[f122]::d2s_intrinsics::div10).6), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:30:9: 30:11 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:30:9: 30:11 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100).4), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:35:5: 35:6 (#0), res: Local(HirId(DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100).2)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100).5), res: Local(HirId(DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:35:5: 35:6 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:93 ~ ryu[f122]::d2s_intrinsics::div100).6), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:35:9: 35:12 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:35:9: 35:12 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:44:23: 44:28 (#0), res: Local(HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).17), res: Local(HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:44:23: 44:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).18), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:44:32: 44:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:44:32: 44:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:25187 ~ core[7d5a]::num::{impl#9}::wrapping_mul)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:46:12: 46:17 (#0), res: Local(HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).45), res: Local(HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:46:12: 46:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:46:20: 46:27 (#0), res: Def(Const, DefId(0:96 ~ ryu[f122]::d2s_intrinsics::pow5_factor::N_DIV_5)), segments: [PathSegment { ident: N_DIV_5#0, hir_id: HirId(DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor).47), res: Def(Const, DefId(0:96 ~ ryu[f122]::d2s_intrinsics::pow5_factor::N_DIV_5)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:46:20: 46:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).6), kind: Call(Expr { hir_id: HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:58:5: 58:16 (#0), res: Def(Fn, DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor)), segments: [PathSegment { ident: pow5_factor#0, hir_id: HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).8), res: Def(Fn, DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:58:5: 58:16 (#0) }, [Expr { hir_id: HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:58:17: 58:22 (#0), res: Local(HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).10), res: Local(HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:58:17: 58:22 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:58:5: 58:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:58:27: 58:28 (#0), res: Local(HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).12), res: Local(HirId(DefId(0:97 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_5).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:58:27: 58:28 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ ryu[f122]::d2s_intrinsics::pow5_factor)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:64:19: 64:24 (#0), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).12), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:64:19: 64:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).13), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:64:28: 64:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:64:28: 64:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:65:19: 65:20 (#0), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).34), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:65:19: 65:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).35), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:65:23: 65:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:65:23: 65:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).50), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:12: 67:13 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:6: 67:11 (#0), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).52), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:6: 67:11 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).53), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:27: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).54), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:21: 67:23 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).55), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:16: 67:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:16: 67:20 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:24: 67:25 (#0), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).57), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:24: 67:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:15: 67:26 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).58), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:29: 67:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:29: 67:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:14: 67:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:5: 67:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).59), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:36: 67:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:36: 67:37 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:6: 67:11 (#0), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).52), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:6: 67:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).53), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:27: 67:28 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).54), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:21: 67:23 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).55), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:16: 67:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:16: 67:20 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:24: 67:25 (#0), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).57), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:24: 67:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:15: 67:26 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).58), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:29: 67:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:29: 67:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:14: 67:31 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).54), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:21: 67:23 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).55), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:16: 67:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:16: 67:20 (#0) }, Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:24: 67:25 (#0), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).57), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:24: 67:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:15: 67:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).58), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:29: 67:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:29: 67:30 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).55), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:16: 67:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:16: 67:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:24: 67:25 (#0), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).57), res: Local(HirId(DefId(0:98 ~ ryu[f122]::d2s_intrinsics::multiple_of_power_of_2).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:67:24: 67:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).9), kind: Cast(Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:14: 72:15 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).11), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:14: 72:15 (#0) }, Ty { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:19: 72:23 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).13), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:19: 72:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:14: 72:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).14), kind: Cast(Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).15), kind: Field(Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:26: 72:29 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).4)), segments: [PathSegment { ident: mul#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).17), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:26: 72:29 (#0) }, 0#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:26: 72:31 (#0) }, Ty { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:35: 72:39 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).19), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:35: 72:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:72:26: 72:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).24), kind: Cast(Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:14: 73:15 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).26), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:14: 73:15 (#0) }, Ty { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:19: 73:23 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).28), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:19: 73:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:14: 73:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).29), kind: Cast(Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).30), kind: Field(Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:26: 73:29 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).4)), segments: [PathSegment { ident: mul#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).32), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:26: 73:29 (#0) }, 1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:26: 73:31 (#0) }, Ty { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:35: 73:39 (#0), res: PrimTy(Uint(U128)), segments: [PathSegment { ident: u128#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).34), res: PrimTy(Uint(U128)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:35: 73:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:73:26: 73:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).39), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:18: 74:19 (#0) }, Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).40), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:11: 74:13 (#0) }, Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:8: 74:10 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).21)), segments: [PathSegment { ident: b0#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).42), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:8: 74:10 (#0) }, Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).43), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:14: 74:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:14: 74:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:7: 74:17 (#0) }, Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:20: 74:22 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).36)), segments: [PathSegment { ident: b2#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).45), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:20: 74:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:6: 74:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).46), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:30: 74:31 (#0) }, Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:28: 74:29 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).6)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).48), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:28: 74:29 (#0) }, Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).49), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:32: 74:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:32: 74:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:27: 74:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).40), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:11: 74:13 (#0) }, Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:8: 74:10 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).21)), segments: [PathSegment { ident: b0#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).42), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:8: 74:10 (#0) }, Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).43), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:14: 74:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:14: 74:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:7: 74:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:20: 74:22 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).36)), segments: [PathSegment { ident: b2#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).45), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:20: 74:22 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:8: 74:10 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).21)), segments: [PathSegment { ident: b0#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).42), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:8: 74:10 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).43), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:14: 74:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:14: 74:16 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:28: 74:29 (#0), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).6)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).48), res: Local(HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:28: 74:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64).49), kind: Lit(Spanned { node: Int(Pu128(64), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:32: 74:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:74:32: 74:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2789 ~ core[7d5a]::ptr::write)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).23), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:35: 86:36 (#0) }, Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).24), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:33: 86:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:33: 86:34 (#0) }, Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:37: 86:38 (#0), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).26), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:37: 86:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:33: 86:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).27), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:41: 86:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:41: 86:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).24), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:33: 86:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:33: 86:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:37: 86:38 (#0), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).26), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:86:37: 86:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2789 ~ core[7d5a]::ptr::write)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).43), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:39: 87:40 (#0) }, Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).44), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:35: 87:36 (#0) }, Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).45), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:34 (#0) }, Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:37: 87:38 (#0), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).47), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:37: 87:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:38 (#0) }, Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).48), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:41: 87:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:41: 87:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).49), kind: Cast(Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:45: 87:53 (#0), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).12)), segments: [PathSegment { ident: mm_shift#0, hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).51), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:45: 87:53 (#0) }, Ty { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:57: 87:60 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).53), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:57: 87:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:45: 87:60 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).44), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:35: 87:36 (#0) }, Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).45), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:34 (#0) }, Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:37: 87:38 (#0), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).47), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:37: 87:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).48), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:41: 87:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:41: 87:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).45), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:33: 87:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:37: 87:38 (#0), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).47), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:87:37: 87:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:99 ~ ryu[f122]::d2s_intrinsics::mul_shift_64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).63), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:88:18: 88:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:88:18: 88:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:88:22: 88:23 (#0), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).65), res: Local(HirId(DefId(0:100 ~ ryu[f122]::d2s_intrinsics::mul_shift_all_64).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/d2s_intrinsics.rs:88:22: 88:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ ryu[f122]::f2s::f2d)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:41:23: 41:36 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).9), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:41:23: 41:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).10), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:41:40: 41:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:41:40: 41:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).14), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:28: 44:29 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).15), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:15: 44:16 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:14 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:17: 44:27 (#0), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), segments: [PathSegment { ident: FLOAT_BIAS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).18), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:17: 44:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).19), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:30: 44:49 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).21), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:30: 44:49 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:53: 44:56 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).23), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:53: 44:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:30: 44:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).24), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:59: 44:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:59: 44:60 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).15), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:15: 44:16 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:14 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:17: 44:27 (#0), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), segments: [PathSegment { ident: FLOAT_BIAS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).18), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:17: 44:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).19), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).20), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:30: 44:49 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).21), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:30: 44:49 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:53: 44:56 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).23), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:53: 44:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:30: 44:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).16), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:13: 44:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:17: 44:27 (#0), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), segments: [PathSegment { ident: FLOAT_BIAS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).18), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:44:17: 44:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).32), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:47: 49:48 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).33), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:34: 49:35 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).34), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:26 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).36), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:26 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:30: 49:33 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).38), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:30: 49:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:33 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:36: 49:46 (#0), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), segments: [PathSegment { ident: FLOAT_BIAS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).40), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:36: 49:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:46 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).41), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:49: 49:68 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).43), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:49: 49:68 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:72: 49:75 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).45), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:72: 49:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:49: 49:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).46), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:78: 49:79 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:78: 49:79 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).33), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:34: 49:35 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).34), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:26 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).36), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:26 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:30: 49:33 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).38), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:30: 49:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:33 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:36: 49:46 (#0), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), segments: [PathSegment { ident: FLOAT_BIAS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).40), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:36: 49:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).41), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:49: 49:68 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).43), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:49: 49:68 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:72: 49:75 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).45), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:72: 49:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:49: 49:75 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).34), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:26 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).36), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:26 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:30: 49:33 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).38), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:30: 49:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:13: 49:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:36: 49:46 (#0), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), segments: [PathSegment { ident: FLOAT_BIAS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).40), res: Def(Const, DefId(0:116 ~ ryu[f122]::f2s::FLOAT_BIAS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:49:36: 49:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).48), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:19: 50:21 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).49), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:14: 50:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:14: 50:18 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:22: 50:41 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).51), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:22: 50:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:13: 50:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:45: 50:58 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).2)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).53), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:45: 50:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).49), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:14: 50:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:14: 50:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:22: 50:41 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).51), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:50:22: 50:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).61), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:20: 53:21 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:17: 53:19 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).63), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:17: 53:19 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).64), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:22: 53:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:22: 53:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:16: 53:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).65), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:28: 53:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:28: 53:29 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:17: 53:19 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).63), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:17: 53:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).64), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:22: 53:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:53:22: 53:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).75), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:57:14: 57:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:57:14: 57:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:57:18: 57:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).77), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:57:18: 57:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).82), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:16: 58:17 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).83), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:14: 58:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:14: 58:15 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:18: 58:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).85), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:18: 58:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:14: 58:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).86), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:23: 58:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:23: 58:24 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).83), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:14: 58:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:14: 58:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:18: 58:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).85), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:58:18: 58:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).92), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:35: 60:37 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:21: 60:34 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).2)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).94), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:21: 60:34 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).95), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:38: 60:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:38: 60:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:21: 60:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).96), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:57: 60:59 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:43: 60:56 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).98), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:43: 60:56 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).99), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:60: 60:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:60: 60:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:43: 60:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:21: 60:34 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).2)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).94), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:21: 60:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).95), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:38: 60:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:38: 60:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).97), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:43: 60:56 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).98), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:43: 60:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).99), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:60: 60:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:60:60: 60:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).106), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:21: 61:22 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).107), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:16: 61:17 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).108), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:15 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:18: 61:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).110), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:18: 61:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:20 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:23: 61:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:23: 61:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:27: 61:35 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).103)), segments: [PathSegment { ident: mm_shift#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).113), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).103)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:27: 61:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).107), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:16: 61:17 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).108), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:15 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:18: 61:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).110), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:18: 61:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).111), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:23: 61:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:23: 61:24 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).108), kind: Lit(Spanned { node: Int(Pu128(4), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:14: 61:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:18: 61:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), segments: [PathSegment { ident: m2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).110), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:61:18: 61:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:71:8: 71:10 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).151), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:71:8: 71:10 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).152), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:71:14: 71:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:71:14: 71:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:54 ~ ryu[f122]::common::log10_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).173), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:41: 74:42 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).174), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:17: 74:40 (#0), res: Def(Const, DefId(0:126 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT)), segments: [PathSegment { ident: FLOAT_POW5_INV_BITCOUNT#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).175), res: Def(Const, DefId(0:126 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:17: 74:40 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).176), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).177), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:43: 74:51 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).178), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:43: 74:51 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).179), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:52: 74:53 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).181), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:52: 74:53 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).182), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:57: 74:60 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).183), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:57: 74:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:52: 74:60 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:43: 74:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:17: 74:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).184), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:64: 74:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:64: 74:65 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).174), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:17: 74:40 (#0), res: Def(Const, DefId(0:126 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT)), segments: [PathSegment { ident: FLOAT_POW5_INV_BITCOUNT#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).175), res: Def(Const, DefId(0:126 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:17: 74:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).176), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).177), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:43: 74:51 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).178), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:43: 74:51 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).179), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:52: 74:53 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).181), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:52: 74:53 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).182), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:57: 74:60 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).183), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:57: 74:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:52: 74:60 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:74:43: 74:61 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ ryu[f122]::common::pow5bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).189), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:21: 75:22 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).190), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:18: 75:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).192), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:18: 75:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:17: 75:20 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).193), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:23: 75:24 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).195), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:23: 75:24 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:28: 75:31 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).197), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:28: 75:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:23: 75:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:17: 75:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:34: 75:35 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).186)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).199), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).186)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:34: 75:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).190), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:18: 75:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).192), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:18: 75:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:17: 75:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).193), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:23: 75:24 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).195), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:23: 75:24 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:28: 75:31 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).197), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:28: 75:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:75:23: 75:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).243), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:14: 79:16 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).244), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:12: 79:13 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).245), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:12: 79:13 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).246), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:17: 79:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:17: 79:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:12: 79:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).247), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:36: 79:38 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).248), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:31: 79:32 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).249), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:26: 79:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:23: 79:25 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).251), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:23: 79:25 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).252), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:28: 79:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:28: 79:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:22: 79:30 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).253), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:33: 79:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:33: 79:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:22: 79:35 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).254), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:42: 79:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).255), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:39: 79:41 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).256), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:39: 79:41 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).257), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:44: 79:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:44: 79:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:39: 79:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:22: 79:46 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).244), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:12: 79:13 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).245), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:12: 79:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).246), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:17: 79:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:17: 79:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).248), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:31: 79:32 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).249), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:26: 79:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:23: 79:25 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).251), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:23: 79:25 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).252), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:28: 79:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:28: 79:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:22: 79:30 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).253), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:33: 79:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:33: 79:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:22: 79:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).254), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:42: 79:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).255), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:39: 79:41 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).256), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:39: 79:41 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).257), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:44: 79:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:44: 79:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:39: 79:46 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).249), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:26: 79:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:23: 79:25 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).251), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:23: 79:25 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).252), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:28: 79:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:28: 79:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:22: 79:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).253), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:33: 79:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:33: 79:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).250), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:23: 79:25 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).251), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:23: 79:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).252), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:28: 79:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:28: 79:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).255), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:39: 79:41 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).256), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:39: 79:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).257), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:44: 79:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:79:44: 79:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).261), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:45: 83:46 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).262), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:21: 83:44 (#0), res: Def(Const, DefId(0:126 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT)), segments: [PathSegment { ident: FLOAT_POW5_INV_BITCOUNT#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).263), res: Def(Const, DefId(0:126 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:21: 83:44 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).264), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).265), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:47: 83:55 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).266), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:47: 83:55 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).267), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:65: 83:66 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).268), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:57 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).270), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:57 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:61: 83:64 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).272), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:61: 83:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:64 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).273), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:67: 83:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:67: 83:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:47: 83:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:21: 83:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).274), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:72: 83:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:72: 83:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).262), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:21: 83:44 (#0), res: Def(Const, DefId(0:126 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT)), segments: [PathSegment { ident: FLOAT_POW5_INV_BITCOUNT#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).263), res: Def(Const, DefId(0:126 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_INV_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:21: 83:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).264), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).265), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:47: 83:55 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).266), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:47: 83:55 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).267), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:65: 83:66 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).268), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:57 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).270), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:57 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:61: 83:64 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).272), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:61: 83:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:64 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).273), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:67: 83:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:67: 83:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:47: 83:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ ryu[f122]::common::pow5bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).268), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:57 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).270), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:57 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:61: 83:64 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).272), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:61: 83:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:56: 83:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).273), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:67: 83:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:83:67: 83:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).282), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).283), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:18: 85:39 (#0), res: Def(Fn, DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2)), segments: [PathSegment { ident: mul_pow5_inv_div_pow2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).284), res: Def(Fn, DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:18: 85:39 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:40: 85:42 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).79)), segments: [PathSegment { ident: mv#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).286), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:40: 85:42 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).287), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:46: 85:47 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).288), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:44: 85:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).289), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:44: 85:45 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).290), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:48: 85:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:48: 85:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:44: 85:49 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).291), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:70: 85:71 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).292), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:66: 85:67 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).293), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:55: 85:56 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).294), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).295), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:52: 85:54 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).296), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:52: 85:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:54 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).297), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).298), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:58 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).299), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:58 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).300), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:62: 85:65 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).301), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:62: 85:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:65 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).302), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:68: 85:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:68: 85:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:69 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).303), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:72: 85:73 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).276)), segments: [PathSegment { ident: l#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).304), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).276)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:72: 85:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:73 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:18: 85:74 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).305), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:77: 85:79 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:77: 85:79 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).288), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:44: 85:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).289), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:44: 85:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).290), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:48: 85:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:48: 85:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).292), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:66: 85:67 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).293), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:55: 85:56 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).294), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).295), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:52: 85:54 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).296), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:52: 85:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:54 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).297), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).298), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:58 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).299), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:58 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).300), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:62: 85:65 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).301), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:62: 85:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:65 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).302), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:68: 85:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:68: 85:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).303), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:72: 85:73 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).276)), segments: [PathSegment { ident: l#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).304), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).276)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:72: 85:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).293), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:55: 85:56 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).294), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).295), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:52: 85:54 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).296), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:52: 85:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:54 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).297), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).298), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:58 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).299), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:58 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).300), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:62: 85:65 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).301), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:62: 85:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).302), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:68: 85:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:68: 85:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).294), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).295), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:52: 85:54 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).296), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:52: 85:54 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:51: 85:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).297), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).298), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:58 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).299), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:58 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).300), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:62: 85:65 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).301), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:62: 85:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:85:57: 85:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).314), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:87:12: 87:13 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).315), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).161)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:87:12: 87:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).316), kind: Lit(Spanned { node: Int(Pu128(9), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:87:17: 87:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:87:17: 87:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).320), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:19: 90:20 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:16: 90:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).79)), segments: [PathSegment { ident: mv#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).322), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:16: 90:18 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).323), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:21: 90:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:21: 90:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:16: 90:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).324), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:26: 90:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:26: 90:27 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).321), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:16: 90:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).79)), segments: [PathSegment { ident: mv#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).322), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:16: 90:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).323), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:21: 90:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:90:21: 90:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:55 ~ ryu[f122]::common::log10_pow5)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).390), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).391), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:100:15: 100:16 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).392), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:100:15: 100:16 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).393), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:100:20: 100:23 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).394), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:100:20: 100:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:100:15: 100:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).395), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:100:26: 100:28 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).396), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:100:26: 100:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).400), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).401), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:101:18: 101:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), segments: [PathSegment { ident: e2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).402), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:101:18: 101:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:101:17: 101:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).403), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).404), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:101:23: 101:24 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).405), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:101:23: 101:24 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).406), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:101:28: 101:31 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).407), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:101:28: 101:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:101:23: 101:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).412), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:102:17: 102:25 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).414), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:102:17: 102:25 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).415), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:102:26: 102:27 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).416), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:102:26: 102:27 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:102:17: 102:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).417), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:102:31: 102:50 (#0), res: Def(Const, DefId(0:127 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_BITCOUNT)), segments: [PathSegment { ident: FLOAT_POW5_BITCOUNT#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).418), res: Def(Const, DefId(0:127 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:102:31: 102:50 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ ryu[f122]::common::pow5bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).423), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).424), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:103:21: 103:22 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).425), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:103:21: 103:22 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).426), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:103:26: 103:29 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).427), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:103:26: 103:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:103:21: 103:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).428), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:103:32: 103:33 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).420)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).429), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).420)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:103:32: 103:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).482), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:14: 107:16 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).483), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:12: 107:13 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).484), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:12: 107:13 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).485), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:17: 107:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:17: 107:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:12: 107:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).486), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:36: 107:38 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).487), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:31: 107:32 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).488), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:26: 107:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).489), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:23: 107:25 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).490), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:23: 107:25 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).491), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:28: 107:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:28: 107:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:22: 107:30 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).492), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:33: 107:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:33: 107:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:22: 107:35 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).493), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:42: 107:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).494), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:39: 107:41 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).495), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:39: 107:41 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).496), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:44: 107:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:44: 107:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:39: 107:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:22: 107:46 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).483), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:12: 107:13 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).484), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:12: 107:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).485), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:17: 107:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:17: 107:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).487), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:31: 107:32 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).488), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:26: 107:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).489), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:23: 107:25 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).490), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:23: 107:25 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).491), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:28: 107:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:28: 107:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:22: 107:30 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).492), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:33: 107:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:33: 107:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:22: 107:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).493), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:42: 107:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).494), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:39: 107:41 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).495), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:39: 107:41 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).496), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:44: 107:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:44: 107:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:39: 107:46 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).488), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:26: 107:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).489), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:23: 107:25 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).490), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:23: 107:25 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).491), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:28: 107:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:28: 107:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:22: 107:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).492), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:33: 107:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:33: 107:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).489), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:23: 107:25 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).490), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:23: 107:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).491), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:28: 107:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:28: 107:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).494), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:39: 107:41 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).495), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:39: 107:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).496), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:44: 107:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:107:44: 107:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).502), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:26: 108:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).503), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).504), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:17: 108:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).505), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:17: 108:18 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).506), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:22: 108:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).507), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:22: 108:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:17: 108:25 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).508), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:28: 108:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:28: 108:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:17: 108:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).509), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:49: 108:50 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).510), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).511), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:33: 108:41 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).512), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:33: 108:41 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).513), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:44: 108:45 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).514), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:42: 108:43 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).515), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:42: 108:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).516), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:46: 108:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:46: 108:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:42: 108:47 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:33: 108:48 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).517), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:51: 108:70 (#0), res: Def(Const, DefId(0:127 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_BITCOUNT)), segments: [PathSegment { ident: FLOAT_POW5_BITCOUNT#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).518), res: Def(Const, DefId(0:127 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:51: 108:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:32: 108:71 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).503), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).504), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:17: 108:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).505), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:17: 108:18 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).506), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:22: 108:25 (#0), res: PrimTy(Int(I32)), segments: [PathSegment { ident: i32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).507), res: PrimTy(Int(I32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:22: 108:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:17: 108:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).508), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:28: 108:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:28: 108:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).510), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).511), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:33: 108:41 (#0), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), segments: [PathSegment { ident: pow5bits#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).512), res: Def(Fn, DefId(0:52 ~ ryu[f122]::common::pow5bits)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:33: 108:41 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).513), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:44: 108:45 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).514), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:42: 108:43 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).515), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:42: 108:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).516), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:46: 108:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:46: 108:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:42: 108:47 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:33: 108:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).517), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:51: 108:70 (#0), res: Def(Const, DefId(0:127 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_BITCOUNT)), segments: [PathSegment { ident: FLOAT_POW5_BITCOUNT#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).518), res: Def(Const, DefId(0:127 ~ ryu[f122]::f2s_intrinsics::FLOAT_POW5_BITCOUNT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:51: 108:70 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:52 ~ ryu[f122]::common::pow5bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).514), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:42: 108:43 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).515), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:42: 108:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).516), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:46: 108:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:108:46: 108:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).525), kind: Call(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).526), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:35: 109:52 (#0), res: Def(Fn, DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2)), segments: [PathSegment { ident: mul_pow5_div_pow2#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).527), res: Def(Fn, DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:35: 109:52 (#0) }, [Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).528), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:53: 109:55 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).79)), segments: [PathSegment { ident: mv#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).529), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).79)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:53: 109:55 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).530), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).531), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:60: 109:61 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).532), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:58: 109:59 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).533), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:58: 109:59 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).534), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:62: 109:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:62: 109:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:57: 109:64 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).535), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:68: 109:71 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).536), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:68: 109:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:57: 109:71 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).537), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:73: 109:74 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).431)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).538), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).431)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:73: 109:74 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:35: 109:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).539), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:78: 109:80 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:78: 109:80 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).532), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:58: 109:59 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).533), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).409)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:58: 109:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).534), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:62: 109:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:109:62: 109:63 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).548), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:111:12: 111:13 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).549), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:111:12: 111:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).550), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:111:17: 111:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:111:17: 111:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).565), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:117:40: 117:48 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).103)), segments: [PathSegment { ident: mm_shift#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).566), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).103)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:117:40: 117:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).567), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:117:52: 117:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:117:52: 117:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).582), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:122:19: 122:20 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).583), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:122:19: 122:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).584), kind: Lit(Spanned { node: Int(Pu128(31), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:122:23: 122:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:122:23: 122:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).595), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:124:66: 124:67 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).596), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).385)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:124:66: 124:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).597), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:124:70: 124:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:124:70: 124:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).610), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:130:21: 130:41 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).611), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:130:21: 130:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).612), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:130:45: 130:65 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).143)), segments: [PathSegment { ident: vr_is_trailing_zeros#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).613), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).143)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:130:45: 130:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).617), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:18: 132:19 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).618), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:15: 132:17 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).619), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:15: 132:17 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).620), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:20: 132:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:20: 132:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:15: 132:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).621), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:28: 132:29 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).622), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:25: 132:27 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).623), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:25: 132:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).624), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:30: 132:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:30: 132:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:25: 132:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).618), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:15: 132:17 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).619), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:15: 132:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).620), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:20: 132:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:20: 132:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).622), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:25: 132:27 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).623), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:25: 132:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).624), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:30: 132:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:132:30: 132:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).630), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:40: 133:41 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).631), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:37: 133:39 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).632), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:37: 133:39 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).633), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:52: 133:53 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).634), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:46: 133:47 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).635), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:43: 133:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).636), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:43: 133:45 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).637), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:48: 133:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:48: 133:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:42: 133:51 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).638), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:54: 133:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:54: 133:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:42: 133:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:37: 133:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).639), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:60: 133:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:60: 133:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).631), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:37: 133:39 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).632), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:37: 133:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).633), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:52: 133:53 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).634), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:46: 133:47 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).635), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:43: 133:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).636), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:43: 133:45 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).637), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:48: 133:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:48: 133:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:42: 133:51 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).638), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:54: 133:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:54: 133:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:42: 133:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).634), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:46: 133:47 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).635), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:43: 133:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).636), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:43: 133:45 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).637), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:48: 133:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:48: 133:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:42: 133:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).638), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:54: 133:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:54: 133:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).635), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:43: 133:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).636), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:43: 133:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).637), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:48: 133:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:133:48: 133:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).645), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:134:37: 134:55 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).646), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:134:37: 134:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).647), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:134:59: 134:60 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:134:59: 134:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).654), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:135:35: 135:37 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).655), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:135:35: 135:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).656), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:135:40: 135:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:135:40: 135:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).695), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:22: 142:23 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).696), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:19: 142:21 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).697), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:19: 142:21 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).698), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:24: 142:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:24: 142:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:19: 142:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).699), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:30: 142:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:30: 142:31 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).696), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:19: 142:21 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).697), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:19: 142:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).698), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:24: 142:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:142:24: 142:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).705), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:143:41: 143:59 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).706), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:143:41: 143:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).707), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:143:63: 143:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:143:63: 143:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).714), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:144:39: 144:41 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).715), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:144:39: 144:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).716), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:144:44: 144:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:144:44: 144:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).753), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:33: 151:35 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).754), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:12: 151:32 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).143)), segments: [PathSegment { ident: vr_is_trailing_zeros#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).755), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).143)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:12: 151:32 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).756), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:55: 151:57 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).757), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:36: 151:54 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).758), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:36: 151:54 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).759), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:58: 151:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:58: 151:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:36: 151:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:12: 151:59 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).760), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:70: 151:72 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).761), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:66: 151:67 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).762), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:65 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).763), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:65 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).764), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:68: 151:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:68: 151:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:69 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).765), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:73: 151:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:73: 151:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).754), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:12: 151:32 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).143)), segments: [PathSegment { ident: vr_is_trailing_zeros#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).755), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).143)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:12: 151:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).756), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:55: 151:57 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).757), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:36: 151:54 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).758), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:36: 151:54 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).759), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:58: 151:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:58: 151:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:36: 151:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).757), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:36: 151:54 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).758), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:36: 151:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).759), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:58: 151:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:58: 151:59 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).761), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:66: 151:67 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).762), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:65 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).763), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:65 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).764), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:68: 151:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:68: 151:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).765), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:73: 151:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:73: 151:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).762), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:65 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).763), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:63: 151:65 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).764), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:68: 151:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:151:68: 151:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).776), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:9: 156:11 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).777), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:9: 156:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).778), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).779), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:71: 156:73 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).780), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:25: 156:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).781), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:19: 156:21 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).782), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).783), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:18 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).784), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:22: 156:24 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).785), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:22: 156:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:24 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).786), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:44: 156:46 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).787), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).788), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:30: 156:43 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).72)), segments: [PathSegment { ident: accept_bounds#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).789), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:30: 156:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:29: 156:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).790), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).791), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:48: 156:68 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).792), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:48: 156:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:47: 156:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:28: 156:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:15: 156:70 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).793), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:93: 156:95 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).794), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:74: 156:92 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).795), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:74: 156:92 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).796), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:96: 156:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:96: 156:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:74: 156:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:14: 156:98 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).797), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:157:16: 157:19 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).798), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:157:16: 157:19 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:14: 157:19 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).780), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:25: 156:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).781), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:19: 156:21 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).782), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).783), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:18 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).784), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:22: 156:24 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).785), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:22: 156:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:24 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).786), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:44: 156:46 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).787), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).788), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:30: 156:43 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).72)), segments: [PathSegment { ident: accept_bounds#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).789), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:30: 156:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:29: 156:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).790), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).791), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:48: 156:68 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).792), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:48: 156:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:47: 156:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:28: 156:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:15: 156:70 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).793), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:93: 156:95 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).794), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:74: 156:92 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).795), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:74: 156:92 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).796), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:96: 156:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:96: 156:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:74: 156:97 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).781), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:19: 156:21 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).782), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).783), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:18 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).784), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:22: 156:24 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).785), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:22: 156:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).786), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:44: 156:46 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).787), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).788), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:30: 156:43 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).72)), segments: [PathSegment { ident: accept_bounds#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).789), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:30: 156:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:29: 156:43 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).790), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).791), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:48: 156:68 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).792), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:48: 156:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:47: 156:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:28: 156:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).782), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).783), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:16: 156:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).784), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:22: 156:24 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).785), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:22: 156:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).787), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).788), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:30: 156:43 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).72)), segments: [PathSegment { ident: accept_bounds#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).789), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:30: 156:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:29: 156:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).790), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).791), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:48: 156:68 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), segments: [PathSegment { ident: vm_is_trailing_zeros#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).792), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:48: 156:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:47: 156:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).794), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:74: 156:92 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).795), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:74: 156:92 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).796), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:96: 156:97 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:156:96: 156:97 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).804), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:18: 162:19 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).805), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:15: 162:17 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).806), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:15: 162:17 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).807), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:20: 162:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:20: 162:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:15: 162:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).808), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:28: 162:29 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).809), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:25: 162:27 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).810), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:25: 162:27 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).811), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:30: 162:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:30: 162:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:25: 162:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).805), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:15: 162:17 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), segments: [PathSegment { ident: vp#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).806), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).125)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:15: 162:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).807), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:20: 162:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:20: 162:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).809), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:25: 162:27 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).810), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:25: 162:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).811), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:30: 162:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:162:30: 162:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).818), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:163:35: 163:37 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).819), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:163:35: 163:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).820), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:163:40: 163:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:163:40: 163:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).854), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:9: 170:11 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).855), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:9: 170:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).856), kind: Cast(Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).857), kind: Binary(Spanned { node: Or, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:24: 170:26 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).858), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:18: 170:20 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).859), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:15: 170:17 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).860), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:15: 170:17 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).861), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:21: 170:23 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).862), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:21: 170:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:15: 170:23 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).863), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:46: 170:48 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).864), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:27: 170:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).865), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:27: 170:45 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).866), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:49: 170:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:49: 170:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:27: 170:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:14: 170:51 (#0) }, Ty { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).867), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:55: 170:58 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).868), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:55: 170:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:14: 170:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).858), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:18: 170:20 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).859), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:15: 170:17 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).860), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:15: 170:17 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).861), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:21: 170:23 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).862), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:21: 170:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:15: 170:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).863), kind: Binary(Spanned { node: Ge, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:46: 170:48 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).864), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:27: 170:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).865), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:27: 170:45 (#0) }, Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).866), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:49: 170:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:49: 170:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:27: 170:50 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).859), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:15: 170:17 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), segments: [PathSegment { ident: vr#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).860), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).120)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:15: 170:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).861), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:21: 170:23 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), segments: [PathSegment { ident: vm#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).862), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).130)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:21: 170:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).864), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:27: 170:45 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), segments: [PathSegment { ident: last_removed_digit#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).865), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).147)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:27: 170:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).866), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:49: 170:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:170:49: 170:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).874), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:172:15: 172:18 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).135)), segments: [PathSegment { ident: e10#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).875), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).135)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:172:15: 172:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).876), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:172:21: 172:28 (#0), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).606)), segments: [PathSegment { ident: removed#0, hir_id: HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).877), res: Local(HirId(DefId(0:123 ~ ryu[f122]::f2s::f2d).606)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s.rs:172:21: 172:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:30:23: 30:28 (#0), res: Local(HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).15), res: Local(HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:30:23: 30:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).16), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:30:32: 30:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:30:32: 30:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:31:17: 31:22 (#0), res: Local(HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).33), res: Local(HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:31:17: 31:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).34), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:31:25: 31:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:31:25: 31:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:32:17: 32:22 (#0), res: Local(HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).40), res: Local(HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:32:17: 32:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).41), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:32:25: 32:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:32:25: 32:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:33:12: 33:13 (#0), res: Local(HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).43)), segments: [PathSegment { ident: r#0, hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).47), res: Local(HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:33:12: 33:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32).48), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:33:17: 33:18 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:33:17: 33:18 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).6), kind: Call(Expr { hir_id: HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:45:5: 45:18 (#0), res: Def(Fn, DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32)), segments: [PathSegment { ident: pow5factor_32#0, hir_id: HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).8), res: Def(Fn, DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:45:5: 45:18 (#0) }, [Expr { hir_id: HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:45:19: 45:24 (#0), res: Local(HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).10), res: Local(HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:45:19: 45:24 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:45:5: 45:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:45:29: 45:30 (#0), res: Local(HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).12), res: Local(HirId(DefId(0:129 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_5_32).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:45:29: 45:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ ryu[f122]::f2s_intrinsics::pow5factor_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).6), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:12: 52:13 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:6: 52:11 (#0), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).8), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:6: 52:11 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).9), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:27: 52:28 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).10), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:21: 52:23 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:16: 52:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:16: 52:20 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:24: 52:25 (#0), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).13), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:24: 52:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:15: 52:26 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:29: 52:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:29: 52:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:14: 52:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:5: 52:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).15), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:36: 52:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:36: 52:37 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:6: 52:11 (#0), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).2)), segments: [PathSegment { ident: value#0, hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).8), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:6: 52:11 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).9), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:27: 52:28 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).10), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:21: 52:23 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:16: 52:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:16: 52:20 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:24: 52:25 (#0), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).13), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:24: 52:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:15: 52:26 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:29: 52:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:29: 52:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:14: 52:31 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).10), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:21: 52:23 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:16: 52:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:16: 52:20 (#0) }, Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:24: 52:25 (#0), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).13), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:24: 52:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:15: 52:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).14), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:29: 52:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:29: 52:30 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:16: 52:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:16: 52:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:24: 52:25 (#0), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).4)), segments: [PathSegment { ident: p#0, hir_id: HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).13), res: Local(HirId(DefId(0:130 ~ ryu[f122]::f2s_intrinsics::multiple_of_power_of_2_32).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:52:24: 52:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:59:19: 59:24 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).6)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).14), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:59:19: 59:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).15), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:59:27: 59:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:59:27: 59:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:64:22: 64:28 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).4)), segments: [PathSegment { ident: factor#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).41), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:64:22: 64:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).42), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:64:32: 64:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:64:32: 64:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).49), kind: Cast(Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:17: 65:18 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).51), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:17: 65:18 (#0) }, Ty { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:22: 65:25 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).53), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:22: 65:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:17: 65:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).54), kind: Cast(Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:28: 65:37 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).36)), segments: [PathSegment { ident: factor_lo#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).56), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:28: 65:37 (#0) }, Ty { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:41: 65:44 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).58), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:41: 65:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:65:28: 65:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).63), kind: Cast(Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:17: 66:18 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).2)), segments: [PathSegment { ident: m#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).65), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:17: 66:18 (#0) }, Ty { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:22: 66:25 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).67), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:22: 66:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:17: 66:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).68), kind: Cast(Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:28: 66:37 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).46)), segments: [PathSegment { ident: factor_hi#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).70), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:28: 66:37 (#0) }, Ty { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:41: 66:44 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).72), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:41: 66:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:66:28: 66:44 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).77), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:22: 68:24 (#0) }, Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:16: 68:21 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).60)), segments: [PathSegment { ident: bits0#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).79), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:16: 68:21 (#0) }, Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).80), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:25: 68:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:25: 68:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:15: 68:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).81), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:31: 68:36 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).74)), segments: [PathSegment { ident: bits1#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).82), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).74)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:31: 68:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:16: 68:21 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).60)), segments: [PathSegment { ident: bits0#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).79), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:16: 68:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).80), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:25: 68:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:68:25: 68:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:23: 69:26 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).84)), segments: [PathSegment { ident: sum#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).88), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).84)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:23: 69:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).89), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:37: 69:38 (#0) }, Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:31: 69:36 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).6)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).91), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:31: 69:36 (#0) }, Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).92), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:39: 69:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:39: 69:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:30: 69:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:31: 69:36 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).6)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).91), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:31: 69:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).92), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:39: 69:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:69:39: 69:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:19: 70:30 (#0), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).94)), segments: [PathSegment { ident: shifted_sum#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).102), res: Local(HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).94)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:19: 70:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).103), kind: Cast(Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).104), kind: Call(Expr { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).105), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:34: 70:37 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).106), res: PrimTy(Uint(U32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:34: 70:37 (#0) }, PathSegment { ident: max_value#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).108), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:34: 70:48 (#0) }, []), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:34: 70:50 (#0) }, Ty { hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:54: 70:57 (#0), res: PrimTy(Uint(U64)), segments: [PathSegment { ident: u64#0, hir_id: HirId(DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32).110), res: PrimTy(Uint(U64)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:54: 70:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:70:34: 70:57 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:25113 ~ core[7d5a]::num::{impl#8}::max_value)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:23: 89:24 (#0), res: Local(HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).4)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).15), res: Local(HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:23: 89:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).16), kind: Cast(Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).17), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:27: 89:53 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:85 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_INV_SPLIT)), segments: [PathSegment { ident: d2s#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).20), res: Def(Mod, DefId(0:56 ~ ryu[f122]::d2s)), args: None, infer_args: true }, PathSegment { ident: DOUBLE_POW5_INV_SPLIT#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).21), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:85 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_INV_SPLIT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:27: 89:53 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:54: 89:59 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:27: 89:59 (#0) }, Ty { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:63: 89:66 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).23), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:63: 89:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:89:27: 89:66 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).44), kind: Field(Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).45), kind: MethodCall(PathSegment { ident: get_unchecked#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).46), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:17: 93:43 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:85 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_INV_SPLIT)), segments: [PathSegment { ident: d2s#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).48), res: Def(Mod, DefId(0:56 ~ ryu[f122]::d2s)), args: None, infer_args: true }, PathSegment { ident: DOUBLE_POW5_INV_SPLIT#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).49), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:85 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_INV_SPLIT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:17: 93:43 (#0) }, [Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).50), kind: Cast(Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:58: 93:59 (#0), res: Local(HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).4)), segments: [PathSegment { ident: q#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).52), res: Local(HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:58: 93:59 (#0) }, Ty { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:63: 93:68 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).54), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:63: 93:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:58: 93:68 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:44: 93:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:17: 93:69 (#0) }, 1#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:17: 93:71 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:132 ~ ryu[f122]::f2s_intrinsics::mul_pow5_inv_div_pow2).55), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:74: 93:75 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:93:74: 93:75 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:23: 110:24 (#0), res: Local(HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).4)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).15), res: Local(HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:23: 110:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).16), kind: Cast(Expr { hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).17), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).18), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:27: 110:49 (#0), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:87 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_SPLIT)), segments: [PathSegment { ident: d2s#0, hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).20), res: Def(Mod, DefId(0:56 ~ ryu[f122]::d2s)), args: None, infer_args: true }, PathSegment { ident: DOUBLE_POW5_SPLIT#0, hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).21), res: Def(Static { safety: Safe, mutability: Not, nested: false }, DefId(0:87 ~ ryu[f122]::d2s_full_table::DOUBLE_POW5_SPLIT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:27: 110:49 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:50: 110:55 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:27: 110:55 (#0) }, Ty { hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:59: 110:62 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:133 ~ ryu[f122]::f2s_intrinsics::mul_pow5_div_pow2).23), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:59: 110:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/f2s_intrinsics.rs:110:27: 110:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(1:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ ryu[f122]::f2s_intrinsics::mul_shift_32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:6:16: 6:17 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).8), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:6:16: 6:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:6:20: 6:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:6:20: 6:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:13:19: 13:20 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).48), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:13:19: 13:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).49), kind: Lit(Spanned { node: Int(Pu128(1000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:13:23: 13:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:13:23: 13:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:14:8: 14:9 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).66), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:14:8: 14:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).67), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:14:13: 14:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:14:13: 14:16 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).74), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:19: 15:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:19: 15:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).75), kind: Cast(Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).76), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:29: 15:30 (#0) }, Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:27: 15:28 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).78), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:27: 15:28 (#0) }, Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).79), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:31: 15:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:31: 15:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:26: 15:35 (#0) }, Ty { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:39: 15:41 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).81), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:39: 15:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:26: 15:41 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:27: 15:28 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).78), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:27: 15:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).79), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:31: 15:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:15:31: 15:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:17:45: 17:46 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).97), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:17:45: 17:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).98), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:17:49: 17:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:17:49: 17:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).115), kind: Cast(Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:19:9: 19:13 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).11)), segments: [PathSegment { ident: sign#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).117), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:19:9: 19:13 (#0) }, Ty { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:19:17: 19:22 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).119), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:19:17: 19:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:19:9: 19:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).120), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:19:25: 19:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:19:25: 19:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:20:15: 20:16 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).126), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:20:15: 20:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).127), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:20:20: 20:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:20:20: 20:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).137), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:21:45: 21:46 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).138), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:21:45: 21:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).139), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:21:49: 21:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:21:49: 21:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).153), kind: Cast(Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:23:9: 23:13 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).11)), segments: [PathSegment { ident: sign#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).155), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:23:9: 23:13 (#0) }, Ty { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).156), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:23:17: 23:22 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).157), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:23:17: 23:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:23:9: 23:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).158), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:23:25: 23:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:23:25: 23:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).167), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:25:19: 25:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:25:19: 25:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).168), kind: Cast(Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:25:26: 25:27 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).170), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:25:26: 25:27 (#0) }, Ty { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:25:31: 25:33 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).172), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:25:31: 25:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:25:26: 25:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).175), kind: Cast(Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:26:9: 26:13 (#0), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).11)), segments: [PathSegment { ident: sign#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).177), res: Local(HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:26:9: 26:13 (#0) }, Ty { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).178), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:26:17: 26:22 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).179), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:26:17: 26:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:26:9: 26:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3).180), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:26:25: 26:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:26:25: 26:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:32:16: 32:17 (#0), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).8), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:32:16: 32:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).9), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:32:20: 32:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:32:20: 32:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:39:19: 39:20 (#0), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).48), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:39:19: 39:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).49), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:39:23: 39:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:39:23: 39:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:40:8: 40:9 (#0), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).66), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:40:8: 40:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).67), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:40:13: 40:15 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:40:13: 40:15 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:41:45: 41:46 (#0), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).78), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:41:45: 41:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).79), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:41:49: 41:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:41:49: 41:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).93), kind: Cast(Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:43:9: 43:13 (#0), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).11)), segments: [PathSegment { ident: sign#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).95), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:43:9: 43:13 (#0) }, Ty { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:43:17: 43:22 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).97), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:43:17: 43:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:43:9: 43:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).98), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:43:25: 43:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:43:25: 43:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).107), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:45:19: 45:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:45:19: 45:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).108), kind: Cast(Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:45:26: 45:27 (#0), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).110), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:45:26: 45:27 (#0) }, Ty { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:45:31: 45:33 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).112), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:45:31: 45:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:45:26: 45:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).115), kind: Cast(Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:46:9: 46:13 (#0), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).11)), segments: [PathSegment { ident: sign#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).117), res: Local(HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:46:9: 46:13 (#0) }, Ty { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:46:17: 46:22 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).119), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:46:17: 46:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:46:9: 46:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2).120), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:46:25: 46:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/exponent.rs:46:25: 46:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).7), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:16: 6:18 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:9: 6:15 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).9), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:9: 6:15 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).10), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:19: 6:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:19: 6:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:8: 6:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).11), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:26: 6:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:26: 6:27 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:9: 6:15 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).9), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:9: 6:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).10), kind: Lit(Spanned { node: Int(Pu128(32), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:19: 6:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:6:19: 6:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:28: 8:34 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).17), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:28: 8:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).18), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:49: 8:50 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).19), kind: Lit(Spanned { node: Int(Pu128(100000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:37: 8:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:37: 8:48 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).20), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:59: 8:60 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:52: 8:58 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).22), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:52: 8:58 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).23), kind: Lit(Spanned { node: Int(Pu128(100000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:61: 8:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:61: 8:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:51: 8:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:37: 8:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).19), kind: Lit(Spanned { node: Int(Pu128(100000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:37: 8:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:37: 8:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).20), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:59: 8:60 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:52: 8:58 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).22), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:52: 8:58 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).23), kind: Lit(Spanned { node: Int(Pu128(100000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:61: 8:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:61: 8:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:51: 8:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:52: 8:58 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).22), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:52: 8:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).23), kind: Lit(Spanned { node: Int(Pu128(100000000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:61: 8:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:8:61: 8:72 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:11:17: 11:24 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).27)), segments: [PathSegment { ident: output2#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).36), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:11:17: 11:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).37), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:11:27: 11:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:11:27: 11:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:13:17: 13:24 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).27)), segments: [PathSegment { ident: output2#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).48), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:13:17: 13:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).49), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:13:27: 13:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:13:27: 13:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).54), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:21: 14:22 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:19: 14:20 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).39)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).56), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:19: 14:20 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).57), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:23: 14:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:23: 14:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:18: 14:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).58), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:31: 14:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:31: 14:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:19: 14:20 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).39)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).56), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:19: 14:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).57), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:23: 14:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:14:23: 14:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).63), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:21: 15:22 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:19: 15:20 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).39)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).65), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:19: 15:20 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).66), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:23: 15:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:23: 15:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:18: 15:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).67), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:31: 15:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:31: 15:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).64), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:19: 15:20 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).39)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).65), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:19: 15:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).66), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:23: 15:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:15:23: 15:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).72), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:21: 16:22 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:19: 16:20 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).51)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).74), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:19: 16:20 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).75), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:23: 16:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:23: 16:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:18: 16:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).76), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:31: 16:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:31: 16:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:19: 16:20 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).51)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).74), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:19: 16:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).75), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:23: 16:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:16:23: 16:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).81), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:21: 17:22 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:19: 17:20 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).51)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).83), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:19: 17:20 (#0) }, Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).84), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:23: 17:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:23: 17:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:18: 17:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).85), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:31: 17:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:31: 17:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:19: 17:20 (#0), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).51)), segments: [PathSegment { ident: d#0, hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).83), res: Local(HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).51)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:19: 17:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long).84), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:23: 17:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:17:23: 17:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:45:11: 45:17 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).8), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:45:11: 45:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).9), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:45:21: 45:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:45:21: 45:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:17: 46:23 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).14), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:17: 46:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).15), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:33: 46:34 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).16), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:26: 46:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:26: 46:32 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).17), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:43: 46:44 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:36: 46:42 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).19), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:36: 46:42 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).20), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:45: 46:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:45: 46:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:35: 46:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:26: 46:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).16), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:26: 46:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:26: 46:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).17), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:43: 46:44 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:36: 46:42 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).19), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:36: 46:42 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).20), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:45: 46:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:45: 46:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:35: 46:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:36: 46:42 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).19), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:36: 46:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).20), kind: Lit(Spanned { node: Int(Pu128(10000), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:45: 46:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:46:45: 46:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).30), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:21: 48:22 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:19: 48:20 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).22)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).32), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:19: 48:20 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).33), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:23: 48:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:23: 48:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:18: 48:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).34), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:31: 48:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:31: 48:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:19: 48:20 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).22)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).32), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:19: 48:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).33), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:23: 48:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:48:23: 48:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).39), kind: Binary(Spanned { node: Div, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:21: 49:22 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:19: 49:20 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).22)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).41), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:19: 49:20 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).42), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:23: 49:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:23: 49:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:18: 49:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).43), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:31: 49:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:31: 49:32 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:19: 49:20 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).22)), segments: [PathSegment { ident: c#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).41), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:19: 49:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).42), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:23: 49:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:49:23: 49:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:62:8: 62:14 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).114), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:62:8: 62:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).115), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:62:18: 62:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:62:18: 62:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).119), kind: Binary(Spanned { node: Rem, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:25: 63:26 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:18: 63:24 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).121), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:18: 63:24 (#0) }, Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).122), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:27: 63:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:27: 63:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:17: 63:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).123), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:35: 63:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:35: 63:36 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:18: 63:24 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).121), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:18: 63:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).122), kind: Lit(Spanned { node: Int(Pu128(100), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:27: 63:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:63:27: 63:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:72:8: 72:14 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).170), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:72:8: 72:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).171), kind: Lit(Spanned { node: Int(Pu128(10), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:72:18: 72:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:72:18: 72:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:73:17: 73:23 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).176), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:73:17: 73:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).177), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:73:27: 73:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:73:27: 73:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).215), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:80:30: 80:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:80:30: 80:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).216), kind: Cast(Expr { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).217), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:80:37: 80:43 (#0), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), segments: [PathSegment { ident: output#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).218), res: Local(HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:80:37: 80:43 (#0) }, Ty { hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).219), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:80:47: 80:49 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa).220), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:80:47: 80:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mantissa.rs:80:37: 80:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:162 ~ ryu[f122]::pretty::format64)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:458 ~ core[7d5a]::f64::{impl#0}::to_bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).14), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:73: 54:74 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).15), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:23: 54:25 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:18: 54:22 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).17), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:18: 54:22 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).18), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:48: 54:49 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:27: 54:47 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).20), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:27: 54:47 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:50: 54:70 (#0), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), segments: [PathSegment { ident: DOUBLE_EXPONENT_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).22), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:50: 54:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:26: 54:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:17: 54:72 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).23), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:75: 54:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:75: 54:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:16: 54:77 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).24), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:81: 54:82 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:81: 54:82 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).15), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:23: 54:25 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:18: 54:22 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).17), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:18: 54:22 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).18), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:48: 54:49 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:27: 54:47 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).20), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:27: 54:47 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:50: 54:70 (#0), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), segments: [PathSegment { ident: DOUBLE_EXPONENT_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).22), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:50: 54:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:26: 54:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:17: 54:72 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).23), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:75: 54:76 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:75: 54:76 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:18: 54:22 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).17), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:18: 54:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).18), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:48: 54:49 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:27: 54:47 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).20), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:27: 54:47 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:50: 54:70 (#0), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), segments: [PathSegment { ident: DOUBLE_EXPONENT_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).22), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:50: 54:70 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:26: 54:71 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:27: 54:47 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).20), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:27: 54:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:50: 54:70 (#0), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), segments: [PathSegment { ident: DOUBLE_EXPONENT_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).22), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:54:50: 54:70 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:25: 55:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).30), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:25: 55:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).31), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:64: 55:65 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).32), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:39: 55:41 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:34: 55:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:34: 55:38 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:42: 55:62 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).35), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:42: 55:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:33: 55:63 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).36), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:66: 55:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:66: 55:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:32: 55:68 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).32), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:39: 55:41 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:34: 55:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:34: 55:38 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:42: 55:62 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).35), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:42: 55:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:33: 55:63 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).36), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:66: 55:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:66: 55:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U64)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:34: 55:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:34: 55:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:42: 55:62 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).35), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:55:42: 55:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).41), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).42), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:15: 57:17 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:10: 57:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).44), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:10: 57:14 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:18: 57:38 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).46), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:18: 57:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:9: 57:39 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:43: 57:46 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).48), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:43: 57:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:9: 57:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).49), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:81: 57:82 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).50), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:56: 57:58 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).51), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:51: 57:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:51: 57:55 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:59: 57:79 (#0), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), segments: [PathSegment { ident: DOUBLE_EXPONENT_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).53), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:59: 57:79 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:50: 57:80 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).54), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:83: 57:84 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:83: 57:84 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:49: 57:85 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:10: 57:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).44), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:10: 57:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:18: 57:38 (#0), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), segments: [PathSegment { ident: DOUBLE_MANTISSA_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).46), res: Def(Const, DefId(0:72 ~ ryu[f122]::d2s::DOUBLE_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:18: 57:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).50), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:56: 57:58 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).51), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:51: 57:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:51: 57:55 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:59: 57:79 (#0), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), segments: [PathSegment { ident: DOUBLE_EXPONENT_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).53), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:59: 57:79 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:50: 57:80 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).54), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:83: 57:84 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:83: 57:84 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).51), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:51: 57:55 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:51: 57:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:59: 57:79 (#0), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), segments: [PathSegment { ident: DOUBLE_EXPONENT_BITS#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).53), res: Def(Const, DefId(0:73 ~ ryu[f122]::d2s::DOUBLE_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:57:59: 57:79 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).81), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:22: 65:24 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:8: 65:21 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).56)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).83), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:8: 65:21 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).84), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:25: 65:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:25: 65:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:8: 65:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).85), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:44: 65:46 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:30: 65:43 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).38)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).87), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).38)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:30: 65:43 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).88), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:47: 65:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:47: 65:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:30: 65:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:8: 65:21 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).56)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).83), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:8: 65:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).84), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:25: 65:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:25: 65:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:30: 65:43 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).38)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).87), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).38)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:30: 65:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).88), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:47: 65:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:65:47: 65:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).107), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:67:16: 67:20 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).26)), segments: [PathSegment { ident: sign#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).109), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:67:16: 67:20 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:67:24: 67:29 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).111), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:67:24: 67:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:67:16: 67:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).112), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:67:32: 67:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:67:32: 67:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ ryu[f122]::d2s::d2d)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:77 ~ ryu[f122]::d2s::decimal_length17)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:74:14: 74:20 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).152), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:74:14: 74:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:74:23: 74:24 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).148)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).154), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:74:23: 74:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).163), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:75:19: 75:20 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).148)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).164), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:75:19: 75:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).165), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).166), kind: Lit(Spanned { node: Int(Pu128(324), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:75:25: 75:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:75:25: 75:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:75:24: 75:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).182), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:10: 77:12 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).183), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:8: 77:9 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:8: 77:9 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:13: 77:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).148)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).185), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:13: 77:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:8: 77:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).186), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:21: 77:23 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:18: 77:20 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).188), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:18: 77:20 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).189), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:24: 77:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:24: 77:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:18: 77:26 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).183), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:8: 77:9 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:8: 77:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:13: 77:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).148)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).185), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).148)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:13: 77:14 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:18: 77:20 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).188), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:18: 77:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).189), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:24: 77:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:77:24: 77:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).202), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:79:55: 79:60 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).203), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:79:55: 79:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).204), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:79:63: 79:69 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).205), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:79:63: 79:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:81:28: 81:33 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).229), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:81:28: 81:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).230), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:81:36: 81:37 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).214)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).231), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).214)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:81:36: 81:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).259), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:83:24: 83:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).260), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:83:24: 83:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).261), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:83:32: 83:34 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).262), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:83:32: 83:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).272), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:30: 84:31 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).273), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:24: 84:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).274), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:24: 84:29 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).275), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:32: 84:34 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).276), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:32: 84:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:24: 84:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).277), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:37: 84:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:37: 84:38 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).273), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:24: 84:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).274), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:24: 84:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).275), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:32: 84:34 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).276), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:84:32: 84:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).281), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:24: 85:25 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).282), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).283), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:9: 85:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).284), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:9: 85:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:18: 85:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).286), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:18: 85:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:9: 85:23 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).287), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).288), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:26: 85:28 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).289), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:26: 85:28 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).290), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:32: 85:37 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).291), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:32: 85:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:26: 85:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:9: 85:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).292), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:40: 85:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:40: 85:41 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).282), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).283), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:9: 85:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).284), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:9: 85:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:18: 85:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).286), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:18: 85:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:9: 85:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).287), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).288), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:26: 85:28 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).289), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:26: 85:28 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).290), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:32: 85:37 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).291), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:32: 85:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:85:26: 85:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).297), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:17: 86:18 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).298), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:15: 86:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:15: 86:16 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).299), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:19: 86:21 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).300), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:19: 86:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:15: 86:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).301), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:28: 86:30 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).302), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:25: 86:27 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).303), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:25: 86:27 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).304), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:31: 86:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:31: 86:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:25: 86:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).298), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:15: 86:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:15: 86:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).299), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:19: 86:21 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).300), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:19: 86:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).302), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:25: 86:27 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).303), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:25: 86:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).304), kind: Lit(Spanned { node: Int(Pu128(16), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:31: 86:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:86:31: 86:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).317), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:61: 88:62 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).318), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:55: 88:60 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).319), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:55: 88:60 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).320), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:63: 88:69 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).321), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:63: 88:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:55: 88:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).322), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:72: 88:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:72: 88:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).318), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:55: 88:60 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).319), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:55: 88:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).320), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:63: 88:69 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).321), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:88:63: 88:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1985 ~ core[7d5a]::intrinsics::copy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).333), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:89:33: 89:38 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).334), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:89:33: 89:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).335), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:89:41: 89:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:89:41: 89:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).355), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:90:24: 90:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).356), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:90:24: 90:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).357), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:90:32: 90:34 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).358), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:90:32: 90:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).362), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:24: 91:25 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).363), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).364), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:9: 91:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).365), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:9: 91:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).366), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:18: 91:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).367), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:18: 91:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:9: 91:23 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).368), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).369), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:26: 91:32 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).370), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:26: 91:32 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).371), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:36: 91:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).372), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:36: 91:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:26: 91:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:9: 91:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).373), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:44: 91:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:44: 91:45 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).363), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).364), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:9: 91:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).365), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:9: 91:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).366), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:18: 91:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).367), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:18: 91:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:9: 91:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).368), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).369), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:26: 91:32 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).370), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:26: 91:32 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).371), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:36: 91:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).372), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:36: 91:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:91:26: 91:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).378), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:18: 92:19 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).379), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).380), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:16: 92:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:16: 92:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:15: 92:17 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).381), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:20: 92:22 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).382), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:20: 92:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:15: 92:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).383), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:29: 92:31 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).384), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:26: 92:28 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).385), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:26: 92:28 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).386), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:32: 92:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:32: 92:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:26: 92:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).379), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).380), kind: Lit(Spanned { node: Int(Pu128(5), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:16: 92:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:16: 92:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:15: 92:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).381), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:20: 92:22 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).382), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:20: 92:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).384), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:26: 92:28 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).385), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:26: 92:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).386), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:32: 92:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:92:32: 92:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).405), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:95:24: 95:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).406), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:95:24: 95:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).407), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:95:32: 95:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:95:32: 95:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).412), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:96:22: 96:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:96:22: 96:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).413), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:96:26: 96:28 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).414), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:96:26: 96:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).437), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:98:28: 98:33 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).438), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:98:28: 98:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).439), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:98:36: 98:37 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).423)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).440), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).423)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:98:36: 98:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).472), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:61: 100:62 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).473), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:55: 100:60 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).474), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:55: 100:60 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).475), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:63: 100:69 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).476), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:63: 100:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:55: 100:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).477), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:72: 100:78 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).416)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).478), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).416)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:72: 100:78 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).473), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:55: 100:60 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).474), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:55: 100:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).475), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:63: 100:69 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).476), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:100:63: 100:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).481), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:24: 101:25 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).482), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).483), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:9: 101:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).484), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:9: 101:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:18: 101:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).486), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:18: 101:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:9: 101:23 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).487), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).488), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:26: 101:32 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).489), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:26: 101:32 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).490), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:36: 101:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).491), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:36: 101:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:26: 101:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:9: 101:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).492), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).493), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:44: 101:50 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).416)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).494), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).416)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:44: 101:50 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).495), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:54: 101:59 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).496), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:54: 101:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:44: 101:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).482), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).483), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:9: 101:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).484), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:9: 101:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:18: 101:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).486), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:18: 101:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:9: 101:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).487), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).488), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:26: 101:32 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).489), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:26: 101:32 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).490), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:36: 101:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).491), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:36: 101:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:101:26: 101:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).501), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:102:15: 102:21 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).502), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:102:15: 102:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).503), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:102:25: 102:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:102:25: 102:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).514), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:104:33: 104:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:104:33: 104:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).515), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).516), kind: Field(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).517), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:104:40: 104:41 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).126)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).518), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).126)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:104:40: 104:41 (#0) }, mantissa#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:104:40: 104:50 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).519), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:104:54: 104:56 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).520), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:104:54: 104:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:104:40: 104:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).529), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:105:24: 105:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).530), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:105:24: 105:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).531), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:105:32: 105:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:105:32: 105:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).535), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:24: 106:25 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).536), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).537), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:9: 106:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).538), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:9: 106:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).539), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:18: 106:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).540), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:18: 106:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:9: 106:23 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).541), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:26: 106:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:26: 106:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:9: 106:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).542), kind: Call(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).543), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:30: 106:45 (#0), res: Def(Fn, DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3)), segments: [PathSegment { ident: write_exponent3#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).544), res: Def(Fn, DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:30: 106:45 (#0) }, [Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).545), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:49: 106:50 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).546), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:46: 106:48 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).547), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:46: 106:48 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).548), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:51: 106:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:51: 106:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:46: 106:52 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).549), kind: MethodCall(PathSegment { ident: offset#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).550), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).551), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:54: 106:60 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).4)), segments: [PathSegment { ident: result#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).552), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:54: 106:60 (#0) }, [Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).553), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:74: 106:75 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).554), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:68: 106:73 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).555), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:68: 106:73 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).556), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:76: 106:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:76: 106:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:68: 106:77 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:61: 106:78 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:54: 106:78 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:30: 106:79 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).536), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).537), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:9: 106:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).538), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:9: 106:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).539), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:18: 106:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).540), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:18: 106:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:9: 106:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).541), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:26: 106:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:26: 106:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).546), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:46: 106:48 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).547), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:46: 106:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).548), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:51: 106:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:51: 106:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).554), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:68: 106:73 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).555), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:68: 106:73 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).556), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:76: 106:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:106:76: 106:77 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ ryu[f122]::pretty::mantissa::write_mantissa_long)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).571), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:61: 109:62 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).572), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:55: 109:60 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).573), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:55: 109:60 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).574), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:63: 109:69 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).575), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:63: 109:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:55: 109:69 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).576), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:72: 109:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:72: 109:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).572), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:55: 109:60 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).573), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:55: 109:60 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).574), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:63: 109:69 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).575), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:109:63: 109:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).592), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:110:48: 110:53 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).593), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:110:48: 110:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).594), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:110:56: 110:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:110:56: 110:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).603), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:111:24: 111:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).604), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:111:24: 111:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).605), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:111:32: 111:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:111:32: 111:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).615), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:30: 112:31 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).616), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:24: 112:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).617), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:24: 112:29 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).618), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:32: 112:38 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).619), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:32: 112:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:24: 112:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).620), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:41: 112:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:41: 112:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).616), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:24: 112:29 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).617), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:24: 112:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).618), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:32: 112:38 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).619), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:112:32: 112:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).624), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:115:13: 115:14 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).625), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:13: 114:14 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).626), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).627), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).628), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).629), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:18: 113:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).630), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:18: 113:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:23 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).631), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).632), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:21 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).633), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:21 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).634), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:25: 114:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).635), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:25: 114:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 114:30 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).636), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:115:15: 115:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:115:15: 115:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 115:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).637), kind: Call(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).638), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:15: 116:30 (#0), res: Def(Fn, DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3)), segments: [PathSegment { ident: write_exponent3#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).639), res: Def(Fn, DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:15: 116:30 (#0) }, [Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).640), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:34: 116:35 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).641), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:31: 116:33 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).642), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:31: 116:33 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).643), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:36: 116:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:36: 116:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:31: 116:37 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).644), kind: MethodCall(PathSegment { ident: offset#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).645), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).646), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:39: 116:45 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).4)), segments: [PathSegment { ident: result#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).647), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:39: 116:45 (#0) }, [Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).648), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:68: 116:69 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).649), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:59: 116:60 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).650), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:58 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).651), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:58 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).652), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:61: 116:67 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).653), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:61: 116:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:67 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).654), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:70: 116:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:70: 116:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:71 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:46: 116:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:39: 116:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:15: 116:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).625), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:13: 114:14 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).626), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).627), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).628), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).629), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:18: 113:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).630), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:18: 113:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:23 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).631), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).632), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:21 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).633), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:21 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).634), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:25: 114:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).635), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:25: 114:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 114:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).636), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:115:15: 115:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:115:15: 115:16 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).626), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).627), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:14 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).628), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:14 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).629), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:18: 113:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).630), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:18: 113:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:113:9: 113:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).631), kind: Cast(Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).632), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:21 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).633), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:21 (#0) }, Ty { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).634), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:25: 114:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).635), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:25: 114:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:114:15: 114:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:138 ~ ryu[f122]::pretty::exponent::write_exponent3)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).641), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:31: 116:33 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).642), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).156)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:31: 116:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).643), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:36: 116:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:36: 116:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).649), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:59: 116:60 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).650), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:58 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).651), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:58 (#0) }, Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).652), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:61: 116:67 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).653), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:61: 116:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).654), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:70: 116:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:70: 116:71 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).650), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:58 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).651), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).60)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:53: 116:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).652), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:61: 116:67 (#0), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).653), res: Local(HirId(DefId(0:162 ~ ryu[f122]::pretty::format64).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:116:61: 116:67 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:163 ~ ryu[f122]::pretty::format32)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:351 ~ core[7d5a]::f32::{impl#0}::to_bits)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).14), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:71: 161:72 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).15), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:23: 161:25 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:18: 161:22 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).17), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:18: 161:22 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).18), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:47: 161:48 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:27: 161:46 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).20), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:27: 161:46 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:49: 161:68 (#0), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), segments: [PathSegment { ident: FLOAT_EXPONENT_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).22), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:49: 161:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:26: 161:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:17: 161:70 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).23), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:73: 161:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:73: 161:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:16: 161:75 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).24), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:79: 161:80 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:79: 161:80 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).15), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:23: 161:25 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:18: 161:22 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).17), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:18: 161:22 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).18), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:47: 161:48 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:27: 161:46 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).20), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:27: 161:46 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:49: 161:68 (#0), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), segments: [PathSegment { ident: FLOAT_EXPONENT_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).22), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:49: 161:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:26: 161:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:17: 161:70 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).23), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:73: 161:74 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:73: 161:74 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:18: 161:22 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).17), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:18: 161:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).18), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:47: 161:48 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:27: 161:46 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).20), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:27: 161:46 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:49: 161:68 (#0), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), segments: [PathSegment { ident: FLOAT_EXPONENT_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).22), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:49: 161:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:26: 161:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:27: 161:46 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).20), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:27: 161:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:49: 161:68 (#0), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), segments: [PathSegment { ident: FLOAT_EXPONENT_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).22), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:161:49: 161:68 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:25: 162:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).30), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:25: 162:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).31), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:63: 162:64 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).32), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:39: 162:41 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:34: 162:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:34: 162:38 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:42: 162:61 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).35), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:42: 162:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:33: 162:62 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).36), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:65: 162:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:65: 162:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:32: 162:67 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).32), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:39: 162:41 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:34: 162:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:34: 162:38 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:42: 162:61 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).35), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:42: 162:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:33: 162:62 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).36), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:65: 162:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:65: 162:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).33), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:34: 162:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:34: 162:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:42: 162:61 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).35), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:162:42: 162:61 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).41), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:31: 163:33 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:26: 163:30 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).43), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:26: 163:30 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:34: 163:53 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).45), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:34: 163:53 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:25: 163:54 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).46), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:88: 163:89 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).47), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:64: 163:66 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).48), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:59: 163:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:59: 163:63 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:67: 163:86 (#0), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), segments: [PathSegment { ident: FLOAT_EXPONENT_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).50), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:67: 163:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:58: 163:87 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).51), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:90: 163:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:90: 163:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:57: 163:92 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:26: 163:30 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), segments: [PathSegment { ident: bits#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).43), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:26: 163:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:34: 163:53 (#0), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), segments: [PathSegment { ident: FLOAT_MANTISSA_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).45), res: Def(Const, DefId(0:114 ~ ryu[f122]::f2s::FLOAT_MANTISSA_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:34: 163:53 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).47), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:64: 163:66 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).48), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:59: 163:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:59: 163:63 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:67: 163:86 (#0), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), segments: [PathSegment { ident: FLOAT_EXPONENT_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).50), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:67: 163:86 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:58: 163:87 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).51), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:90: 163:91 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:90: 163:91 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).48), kind: Lit(Spanned { node: Int(Pu128(1), Unsigned(U32)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:59: 163:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:59: 163:63 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:67: 163:86 (#0), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), segments: [PathSegment { ident: FLOAT_EXPONENT_BITS#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).50), res: Def(Const, DefId(0:115 ~ ryu[f122]::f2s::FLOAT_EXPONENT_BITS)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:163:67: 163:86 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).78), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:22: 171:24 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:8: 171:21 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).53)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).80), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:8: 171:21 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).81), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:25: 171:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:25: 171:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:8: 171:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).82), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:44: 171:46 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:30: 171:43 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).38)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).84), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).38)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:30: 171:43 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).85), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:47: 171:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:47: 171:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:30: 171:48 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:8: 171:21 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).53)), segments: [PathSegment { ident: ieee_exponent#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).80), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).53)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:8: 171:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).81), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:25: 171:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:25: 171:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).83), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:30: 171:43 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).38)), segments: [PathSegment { ident: ieee_mantissa#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).84), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).38)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:30: 171:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).85), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:47: 171:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:171:47: 171:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).104), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:173:16: 173:20 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).26)), segments: [PathSegment { ident: sign#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).106), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:173:16: 173:20 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:173:24: 173:29 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).108), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:173:24: 173:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:173:16: 173:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).109), kind: Lit(Spanned { node: Int(Pu128(3), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:173:32: 173:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:173:32: 173:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ ryu[f122]::f2s::f2d)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:50 ~ ryu[f122]::common::decimal_length9)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:180:14: 180:20 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).149), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:180:14: 180:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:180:23: 180:24 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).145)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).151), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).145)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:180:23: 180:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).160), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:181:19: 181:20 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).145)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).161), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).145)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:181:19: 181:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).162), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).163), kind: Lit(Spanned { node: Int(Pu128(45), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:181:25: 181:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:181:25: 181:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:181:24: 181:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).179), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:10: 183:12 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).180), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:8: 183:9 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:8: 183:9 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:13: 183:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).145)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).182), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).145)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:13: 183:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:8: 183:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).183), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:21: 183:23 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:18: 183:20 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).185), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:18: 183:20 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).186), kind: Lit(Spanned { node: Int(Pu128(13), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:24: 183:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:24: 183:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:18: 183:26 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).180), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:8: 183:9 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:8: 183:9 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:13: 183:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).145)), segments: [PathSegment { ident: k#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).182), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).145)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:13: 183:14 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).184), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:18: 183:20 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).185), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:18: 183:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).186), kind: Lit(Spanned { node: Int(Pu128(13), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:24: 183:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:183:24: 183:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Specific({"ryu"})), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:185:50: 185:55 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).200), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:185:50: 185:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).201), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:185:58: 185:64 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).202), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:185:58: 185:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).225), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:187:28: 187:33 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).226), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:187:28: 187:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).227), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:187:36: 187:37 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).211)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).228), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).211)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:187:36: 187:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).256), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:189:24: 189:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).257), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:189:24: 189:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).258), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:189:32: 189:34 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).259), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:189:32: 189:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).269), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:30: 190:31 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).270), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:24: 190:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).271), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:24: 190:29 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).272), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:32: 190:34 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).273), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:32: 190:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:24: 190:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).274), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:37: 190:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:37: 190:38 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).270), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:24: 190:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).271), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:24: 190:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).272), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:32: 190:34 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).273), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:190:32: 190:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).278), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:24: 191:25 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).279), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:9: 191:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).281), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:9: 191:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).282), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:18: 191:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).283), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:18: 191:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:9: 191:23 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).284), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:26: 191:28 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).286), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:26: 191:28 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).287), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:32: 191:37 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).288), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:32: 191:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:26: 191:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:9: 191:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).289), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:40: 191:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:40: 191:41 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).279), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:9: 191:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).281), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:9: 191:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).282), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:18: 191:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).283), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:18: 191:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:9: 191:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).284), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).285), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:26: 191:28 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).286), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:26: 191:28 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).287), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:32: 191:37 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).288), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:32: 191:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:191:26: 191:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).294), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:17: 192:18 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).295), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:15: 192:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:15: 192:16 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).296), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:19: 192:21 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).297), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:19: 192:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:15: 192:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).298), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:28: 192:30 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).299), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:25: 192:27 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).300), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:25: 192:27 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).301), kind: Lit(Spanned { node: Int(Pu128(13), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:31: 192:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:31: 192:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:25: 192:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).295), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:15: 192:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:15: 192:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).296), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:19: 192:21 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).297), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:19: 192:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).299), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:25: 192:27 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).300), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:25: 192:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).301), kind: Lit(Spanned { node: Int(Pu128(13), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:31: 192:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:192:31: 192:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).314), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:56: 194:57 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:50: 194:55 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).316), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:50: 194:55 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).317), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:58: 194:64 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).318), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:58: 194:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:50: 194:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).319), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:67: 194:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:67: 194:68 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).315), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:50: 194:55 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).316), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:50: 194:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).317), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:58: 194:64 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).318), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:194:58: 194:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:1985 ~ core[7d5a]::intrinsics::copy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).330), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:195:33: 195:38 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).331), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:195:33: 195:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).332), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:195:41: 195:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:195:41: 195:42 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).352), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:196:24: 196:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).353), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:196:24: 196:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).354), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:196:32: 196:34 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).355), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:196:32: 196:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).359), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:24: 197:25 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).360), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).361), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:9: 197:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).362), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:9: 197:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).363), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:18: 197:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).364), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:18: 197:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:9: 197:23 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).365), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).366), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:26: 197:32 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).367), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:26: 197:32 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).368), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:36: 197:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).369), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:36: 197:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:26: 197:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:9: 197:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).370), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:44: 197:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:44: 197:45 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).360), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).361), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:9: 197:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).362), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:9: 197:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).363), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:18: 197:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).364), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:18: 197:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:9: 197:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).365), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).366), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:26: 197:32 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).367), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:26: 197:32 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).368), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:36: 197:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).369), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:36: 197:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:197:26: 197:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).375), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:18: 198:19 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).376), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).377), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:16: 198:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:16: 198:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:15: 198:17 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).378), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:20: 198:22 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).379), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:20: 198:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:15: 198:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).380), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:29: 198:31 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).381), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:26: 198:28 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).382), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:26: 198:28 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).383), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:32: 198:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:32: 198:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:26: 198:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).376), kind: Unary(Neg, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).377), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:16: 198:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:16: 198:17 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:15: 198:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).378), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:20: 198:22 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).379), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:20: 198:22 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).381), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:26: 198:28 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).382), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:26: 198:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).383), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:32: 198:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:198:32: 198:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).402), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:201:24: 201:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).403), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:201:24: 201:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).404), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:201:32: 201:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:201:32: 201:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).409), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:202:22: 202:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:202:22: 202:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).410), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:202:26: 202:28 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).411), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:202:26: 202:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).434), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:204:28: 204:33 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).435), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:204:28: 204:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).436), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:204:36: 204:37 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).420)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).437), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).420)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:204:36: 204:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).469), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:56: 206:57 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).470), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:50: 206:55 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).471), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:50: 206:55 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).472), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:58: 206:64 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).473), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:58: 206:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:50: 206:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).474), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:67: 206:73 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).413)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).475), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).413)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:67: 206:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).470), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:50: 206:55 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).471), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:50: 206:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).472), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:58: 206:64 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).473), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:206:58: 206:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).478), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:24: 207:25 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).479), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).480), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:9: 207:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).481), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:9: 207:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).482), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:18: 207:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).483), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:18: 207:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:9: 207:23 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).484), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:26: 207:32 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).486), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:26: 207:32 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).487), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:36: 207:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).488), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:36: 207:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:26: 207:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:9: 207:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).489), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).490), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:44: 207:50 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).413)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).491), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).413)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:44: 207:50 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).492), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:54: 207:59 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).493), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:54: 207:59 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:44: 207:59 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).479), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).480), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:9: 207:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).481), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:9: 207:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).482), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:18: 207:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).483), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:18: 207:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:9: 207:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).484), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).485), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:26: 207:32 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).486), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:26: 207:32 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).487), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:36: 207:41 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).488), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:36: 207:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:207:26: 207:41 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).498), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:208:15: 208:21 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).499), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:208:15: 208:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).500), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:208:25: 208:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:208:25: 208:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"ryu"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).511), kind: Lit(Spanned { node: Byte(48), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:210:33: 210:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:210:33: 210:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).512), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).513), kind: Field(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).514), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:210:40: 210:41 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).123)), segments: [PathSegment { ident: v#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).515), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).123)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:210:40: 210:41 (#0) }, mantissa#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:210:40: 210:50 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).516), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:210:54: 210:56 (#0), res: PrimTy(Uint(U8)), segments: [PathSegment { ident: u8#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).517), res: PrimTy(Uint(U8)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:210:54: 210:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:210:40: 210:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).526), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:211:24: 211:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).527), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:211:24: 211:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).528), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:211:32: 211:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:211:32: 211:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).532), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:24: 212:25 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).533), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).534), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:9: 212:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).535), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:9: 212:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).536), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:18: 212:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).537), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:18: 212:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:9: 212:23 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).538), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:26: 212:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:26: 212:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:9: 212:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).539), kind: Call(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).540), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:30: 212:45 (#0), res: Def(Fn, DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2)), segments: [PathSegment { ident: write_exponent2#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).541), res: Def(Fn, DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:30: 212:45 (#0) }, [Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).542), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:49: 212:50 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).543), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:46: 212:48 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).544), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:46: 212:48 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).545), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:51: 212:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:51: 212:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:46: 212:52 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).546), kind: MethodCall(PathSegment { ident: offset#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).547), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).548), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:54: 212:60 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).4)), segments: [PathSegment { ident: result#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).549), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:54: 212:60 (#0) }, [Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).550), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:74: 212:75 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).551), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:68: 212:73 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).552), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:68: 212:73 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).553), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:76: 212:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:76: 212:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:68: 212:77 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:61: 212:78 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:54: 212:78 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:30: 212:79 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).533), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).534), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:9: 212:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).535), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:9: 212:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).536), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:18: 212:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).537), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:18: 212:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:9: 212:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).538), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:26: 212:27 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:26: 212:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).543), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:46: 212:48 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).544), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:46: 212:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).545), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:51: 212:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:51: 212:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).551), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:68: 212:73 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).552), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:68: 212:73 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).553), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:76: 212:77 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:212:76: 212:77 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:144 ~ ryu[f122]::pretty::mantissa::write_mantissa)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).568), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:56: 215:57 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).569), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:50: 215:55 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).570), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:50: 215:55 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).571), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:58: 215:64 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).572), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:58: 215:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:50: 215:64 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).573), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:67: 215:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:67: 215:68 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).569), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:50: 215:55 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).570), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:50: 215:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).571), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:58: 215:64 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).572), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:215:58: 215:64 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).589), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:216:48: 216:53 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).590), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:216:48: 216:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).591), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:216:56: 216:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:216:56: 216:57 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).600), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:217:24: 217:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).601), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:217:24: 217:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).602), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:217:32: 217:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:217:32: 217:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).612), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:30: 218:31 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).613), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:24: 218:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).614), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:24: 218:29 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).615), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:32: 218:38 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).616), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:32: 218:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:24: 218:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).617), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:41: 218:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:41: 218:42 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).613), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:24: 218:29 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).614), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:24: 218:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).615), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:32: 218:38 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).616), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:218:32: 218:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).621), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:221:13: 221:14 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).622), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:13: 220:14 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).623), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).624), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).625), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).626), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:18: 219:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).627), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:18: 219:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:23 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).628), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).629), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:21 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).630), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:21 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).631), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:25: 220:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).632), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:25: 220:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 220:30 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).633), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:221:15: 221:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:221:15: 221:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 221:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).634), kind: Call(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).635), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:15: 222:30 (#0), res: Def(Fn, DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2)), segments: [PathSegment { ident: write_exponent2#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).636), res: Def(Fn, DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:15: 222:30 (#0) }, [Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).637), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:34: 222:35 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).638), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:31: 222:33 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).639), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:31: 222:33 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).640), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:36: 222:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:36: 222:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:31: 222:37 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).641), kind: MethodCall(PathSegment { ident: offset#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).642), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).643), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:39: 222:45 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).4)), segments: [PathSegment { ident: result#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).644), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:39: 222:45 (#0) }, [Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).645), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:68: 222:69 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).646), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:59: 222:60 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).647), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:58 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).648), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:58 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).649), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:61: 222:67 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).650), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:61: 222:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:67 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).651), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:70: 222:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:70: 222:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:71 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:46: 222:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:39: 222:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:15: 222:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).622), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:13: 220:14 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).623), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).624), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).625), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).626), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:18: 219:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).627), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:18: 219:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:23 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).628), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).629), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:21 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).630), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:21 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).631), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:25: 220:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).632), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:25: 220:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 220:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).633), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:221:15: 221:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:221:15: 221:16 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).623), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).624), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:14 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).625), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:14 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).626), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:18: 219:23 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).627), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:18: 219:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:219:9: 219:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).628), kind: Cast(Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).629), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:21 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).630), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:21 (#0) }, Ty { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).631), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:25: 220:30 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).632), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:25: 220:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:220:15: 220:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:139 ~ ryu[f122]::pretty::exponent::write_exponent2)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).638), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:31: 222:33 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), segments: [PathSegment { ident: kk#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).639), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).153)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:31: 222:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).640), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:36: 222:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:36: 222:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(1:2672 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).646), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:59: 222:60 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).647), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:58 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).648), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:58 (#0) }, Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).649), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:61: 222:67 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).650), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:61: 222:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:67 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).651), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:70: 222:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:70: 222:71 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).647), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:58 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).648), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:53: 222:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).649), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:61: 222:67 (#0), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), segments: [PathSegment { ident: length#0, hir_id: HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).650), res: Local(HirId(DefId(0:163 ~ ryu[f122]::pretty::format32).136)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ryu-1.0.18/src/pretty/mod.rs:222:61: 222:67 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
