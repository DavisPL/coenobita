[DEBUG] Trying to get func ty of defid DefId(0:40 ~ bstr[ec72]::ascii::first_non_ascii_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:58:17: 58:28 (#0), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), segments: [PathSegment { ident: USIZE_BYTES#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).6), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:58:17: 58:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).7), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:58:31: 58:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:58:31: 58:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).39), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).40), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:64:12: 64:17 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).2)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).42), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:64:12: 64:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:64:18: 64:23 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:64:12: 64:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:64:26: 64:37 (#0), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), segments: [PathSegment { ident: USIZE_BYTES#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).44), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:64:26: 64:37 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ bstr[ec72]::ascii::read_unaligned_usize)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:69:20: 69:25 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).67)), segments: [PathSegment { ident: chunk#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).71), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:69:20: 69:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:69:28: 69:38 (#0), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), segments: [PathSegment { ident: ASCII_MASK#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).73), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:69:28: 69:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:70:12: 70:16 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).75)), segments: [PathSegment { ident: mask#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).79), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).75)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:70:12: 70:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).80), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:70:20: 70:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:70:20: 70:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ bstr[ec72]::ascii::ptr_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:28: 74:39 (#0), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), segments: [PathSegment { ident: USIZE_BYTES#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).102), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:28: 74:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).103), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:62: 74:63 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).104), kind: Cast(Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:43: 74:52 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).16)), segments: [PathSegment { ident: start_ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).106), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:43: 74:52 (#0) }, Ty { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:56: 74:61 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).108), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:56: 74:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:43: 74:61 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:64: 74:69 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).9)), segments: [PathSegment { ident: align#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).110), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:64: 74:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:42: 74:70 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).104), kind: Cast(Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:43: 74:52 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).16)), segments: [PathSegment { ident: start_ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).106), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:43: 74:52 (#0) }, Ty { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).107), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:56: 74:61 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).108), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:56: 74:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:43: 74:61 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:64: 74:69 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).9)), segments: [PathSegment { ident: align#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).110), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:74:64: 74:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:75:23: 75:26 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).35)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).119), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:75:23: 75:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:75:29: 75:38 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).16)), segments: [PathSegment { ident: start_ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).121), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:75:29: 75:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).141), kind: Call(Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:23: 76:30 (#0), res: Def(Fn, DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub)), segments: [PathSegment { ident: ptr_sub#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).143), res: Def(Fn, DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:23: 76:30 (#0) }, [Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:31: 76:38 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).30)), segments: [PathSegment { ident: end_ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).145), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:31: 76:38 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).146), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:40: 76:51 (#0), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), segments: [PathSegment { ident: USIZE_BYTES#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).147), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:40: 76:51 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:23: 76:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:56: 76:65 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).16)), segments: [PathSegment { ident: start_ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).149), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).16)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:76:56: 76:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).165), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).166), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).167), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:77:12: 77:17 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).2)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).168), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:77:12: 77:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:77:18: 77:23 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:77:12: 77:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).169), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:77:27: 77:45 (#0), res: Def(Const, DefId(0:37 ~ bstr[ec72]::ascii::FALLBACK_LOOP_SIZE)), segments: [PathSegment { ident: FALLBACK_LOOP_SIZE#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).170), res: Def(Const, DefId(0:37 ~ bstr[ec72]::ascii::FALLBACK_LOOP_SIZE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:77:27: 77:45 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).174), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:19: 78:22 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).35)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).175), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:19: 78:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).176), kind: Call(Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).177), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:26: 78:33 (#0), res: Def(Fn, DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub)), segments: [PathSegment { ident: ptr_sub#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).178), res: Def(Fn, DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:26: 78:33 (#0) }, [Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:34: 78:41 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).30)), segments: [PathSegment { ident: end_ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).180), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).30)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:34: 78:41 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:43: 78:61 (#0), res: Def(Const, DefId(0:37 ~ bstr[ec72]::ascii::FALLBACK_LOOP_SIZE)), segments: [PathSegment { ident: FALLBACK_LOOP_SIZE#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).182), res: Def(Const, DefId(0:37 ~ bstr[ec72]::ascii::FALLBACK_LOOP_SIZE)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:43: 78:61 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:78:26: 78:62 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).193), kind: Cast(Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).194), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:79:38: 79:41 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).35)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).195), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:79:38: 79:41 (#0) }, Ty { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:79:45: 79:50 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).197), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:79:45: 79:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:79:37: 79:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:79:54: 79:65 (#0), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), segments: [PathSegment { ident: USIZE_BYTES#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).199), res: Def(Const, DefId(0:36 ~ bstr[ec72]::ascii::USIZE_BYTES)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:79:54: 79:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).208), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#19), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).200)), segments: [PathSegment { ident: left_val#19, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).210), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).200)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:23: 46:31 (#19) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:22: 46:31 (#19) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).211), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).212), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#19), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).201)), segments: [PathSegment { ident: right_val#19, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).213), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).201)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:36: 46:45 (#19) }), span: /Users/georgeberdovskiy/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/macros/mod.rs:46:35: 46:45 (#19) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10038 ~ core[7d5a]::panicking::assert_failed)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ bstr[ec72]::ascii::ptr_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).278), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:28: 83:29 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).279), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:23: 83:24 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:21: 83:22 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).260)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).281), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).260)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:21: 83:22 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).282), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:25: 83:26 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).275)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).283), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).275)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:25: 83:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:20: 83:27 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:30: 83:40 (#0), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), segments: [PathSegment { ident: ASCII_MASK#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).285), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:30: 83:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:20: 83:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).286), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:44: 83:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:44: 83:45 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).279), kind: Binary(Spanned { node: BitOr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:23: 83:24 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:21: 83:22 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).260)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).281), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).260)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:21: 83:22 (#0) }, Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).282), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:25: 83:26 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).275)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).283), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).275)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:25: 83:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:20: 83:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:30: 83:40 (#0), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), segments: [PathSegment { ident: ASCII_MASK#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).285), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:30: 83:40 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).280), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:21: 83:22 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).260)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).281), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).260)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:21: 83:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).282), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:25: 83:26 (#0), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).275)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).283), res: Local(HirId(DefId(0:41 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback).275)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:83:25: 83:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ bstr[ec72]::ascii::ptr_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ bstr[ec72]::ascii::sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:99:37: 99:38 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).14)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).43), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:99:37: 99:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:99:41: 99:51 (#0), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), segments: [PathSegment { ident: ASCII_MASK#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).45), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:99:41: 99:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:100:28: 100:33 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).47)), segments: [PathSegment { ident: maska#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).51), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:100:28: 100:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).52), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:100:37: 100:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:100:37: 100:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:36: 101:38 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).39)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).57), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:36: 101:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).58), kind: Call(Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:41: 101:66 (#0), res: Def(Fn, DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)), segments: [PathSegment { ident: first_non_ascii_byte_mask#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).60), res: Def(Fn, DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:41: 101:66 (#0) }, [Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:67: 101:72 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).47)), segments: [PathSegment { ident: maska#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).62), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:67: 101:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:41: 101:73 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:105:37: 105:38 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).29)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).76), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:105:37: 105:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:105:41: 105:51 (#0), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), segments: [PathSegment { ident: ASCII_MASK#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).78), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:105:41: 105:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:106:39: 106:44 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).80)), segments: [PathSegment { ident: maskb#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).88), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:106:39: 106:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).89), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:106:48: 106:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:106:48: 106:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:32: 107:34 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).39)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).106), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:32: 107:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).107), kind: Call(Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:37: 107:62 (#0), res: Def(Fn, DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)), segments: [PathSegment { ident: first_non_ascii_byte_mask#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).109), res: Def(Fn, DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:37: 107:62 (#0) }, [Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:63: 107:68 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).80)), segments: [PathSegment { ident: maskb#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).111), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:63: 107:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:37: 107:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ bstr[ec72]::ascii::ptr_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ bstr[ec72]::ascii::ptr_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ bstr[ec72]::ascii::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:99:37: 99:38 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).14)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).43), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:99:37: 99:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:99:41: 99:51 (#0), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), segments: [PathSegment { ident: ASCII_MASK#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).45), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:99:41: 99:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:100:28: 100:33 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).47)), segments: [PathSegment { ident: maska#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).51), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:100:28: 100:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).52), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:100:37: 100:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:100:37: 100:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:36: 101:38 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).39)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).57), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:36: 101:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).58), kind: Call(Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:41: 101:66 (#0), res: Def(Fn, DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)), segments: [PathSegment { ident: first_non_ascii_byte_mask#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).60), res: Def(Fn, DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:41: 101:66 (#0) }, [Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:67: 101:72 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).47)), segments: [PathSegment { ident: maska#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).62), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).47)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:67: 101:72 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:101:41: 101:73 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:105:37: 105:38 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).29)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).76), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).29)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:105:37: 105:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:105:41: 105:51 (#0), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), segments: [PathSegment { ident: ASCII_MASK#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).78), res: Def(Const, DefId(0:39 ~ bstr[ec72]::ascii::ASCII_MASK)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:105:41: 105:51 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:106:39: 106:44 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).80)), segments: [PathSegment { ident: maskb#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).88), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:106:39: 106:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).89), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:106:48: 106:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:106:48: 106:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).105), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:32: 107:34 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).39)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).106), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:32: 107:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).107), kind: Call(Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:37: 107:62 (#0), res: Def(Fn, DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)), segments: [PathSegment { ident: first_non_ascii_byte_mask#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).109), res: Def(Fn, DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:37: 107:62 (#0) }, [Expr { hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:63: 107:68 (#0), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).80)), segments: [PathSegment { ident: maskb#0, hir_id: HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).111), res: Local(HirId(DefId(0:42 ~ bstr[ec72]::ascii::first_non_ascii_byte_fallback::findpos).80)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:63: 107:68 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:107:37: 107:69 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:203:19: 203:28 (#0), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).2)), segments: [PathSegment { ident: start_ptr#0, hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).14), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:203:19: 203:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:203:32: 203:35 (#0), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).6)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).16), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:203:32: 203:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:204:19: 204:22 (#0), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).6)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).37), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:204:19: 204:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:204:26: 204:33 (#0), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).4)), segments: [PathSegment { ident: end_ptr#0, hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).39), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:204:26: 204:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:206:11: 206:14 (#0), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).6)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).56), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:206:11: 206:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:206:17: 206:24 (#0), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).4)), segments: [PathSegment { ident: end_ptr#0, hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).58), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:206:17: 206:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).62), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:207:13: 207:16 (#0), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).6)), segments: [PathSegment { ident: ptr#0, hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).64), res: Local(HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:207:13: 207:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:207:12: 207:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:43 ~ bstr[ec72]::ascii::first_non_ascii_byte_slow).65), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:207:19: 207:23 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:207:19: 207:23 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ bstr[ec72]::ascii::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ bstr[ec72]::ascii::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).5), kind: Cast(Expr { hir_id: HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).6), kind: MethodCall(PathSegment { ident: trailing_zeros#0, hir_id: HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:7: 225:11 (#0), res: Local(HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).2)), segments: [PathSegment { ident: mask#0, hir_id: HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).9), res: Local(HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:7: 225:11 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:12: 225:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:7: 225:28 (#0) }, Ty { hir_id: HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:32: 225:37 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).11), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:32: 225:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:7: 225:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:44 ~ bstr[ec72]::ascii::first_non_ascii_byte_mask).12), kind: Lit(Spanned { node: Int(Pu128(8), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:40: 225:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:225:40: 225:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:25378 ~ core[7d5a]::num::{impl#11}::trailing_zeros)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:45 ~ bstr[ec72]::ascii::ptr_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:232:19: 232:22 (#0), res: Local(HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).4)), segments: [PathSegment { ident: amt#0, hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).12), res: Local(HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:232:19: 232:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).13), kind: Cast(Expr { hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:232:25: 232:43 (#0), res: Def(Const, DefId(3:17540 ~ core[7d5a]::isize::MAX)), segments: [PathSegment { ident: {{root}}#0, hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).15), res: Err, args: None, infer_args: true }, PathSegment { ident: core#0, hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).16), res: Def(Mod, DefId(3:0 ~ core[7d5a])), args: None, infer_args: true }, PathSegment { ident: isize#0, hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).17), res: Def(Mod, DefId(3:72 ~ core[7d5a]::isize)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).18), res: Def(Const, DefId(3:17540 ~ core[7d5a]::isize::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:232:25: 232:43 (#0) }, Ty { hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:232:47: 232:52 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:45 ~ bstr[ec72]::ascii::ptr_add).20), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:232:47: 232:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:232:25: 232:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:238:19: 238:22 (#0), res: Local(HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).4)), segments: [PathSegment { ident: amt#0, hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).12), res: Local(HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:238:19: 238:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).13), kind: Cast(Expr { hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:238:25: 238:43 (#0), res: Def(Const, DefId(3:17540 ~ core[7d5a]::isize::MAX)), segments: [PathSegment { ident: {{root}}#0, hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).15), res: Err, args: None, infer_args: true }, PathSegment { ident: core#0, hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).16), res: Def(Mod, DefId(3:0 ~ core[7d5a])), args: None, infer_args: true }, PathSegment { ident: isize#0, hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).17), res: Def(Mod, DefId(3:72 ~ core[7d5a]::isize)), args: None, infer_args: true }, PathSegment { ident: MAX#0, hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).18), res: Def(Const, DefId(3:17540 ~ core[7d5a]::isize::MAX)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:238:25: 238:43 (#0) }, Ty { hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:238:47: 238:52 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:46 ~ bstr[ec72]::ascii::ptr_sub).20), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:238:47: 238:52 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:238:25: 238:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2577 ~ core[7d5a]::ptr::const_ptr::{impl#0}::offset)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:24679 ~ core[7d5a]::num::{impl#5}::wrapping_neg)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:47 ~ bstr[ec72]::ascii::read_unaligned_usize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:49 ~ bstr[ec72]::ascii::sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:254:19: 254:20 (#0), res: Local(HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).2)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).12), res: Local(HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:254:19: 254:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:254:24: 254:25 (#0), res: Local(HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).4)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).14), res: Local(HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:254:24: 254:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).29), kind: Cast(Expr { hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:6: 255:7 (#0), res: Local(HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).2)), segments: [PathSegment { ident: a#0, hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).31), res: Local(HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:6: 255:7 (#0) }, Ty { hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).32), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:11: 255:16 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).33), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:11: 255:16 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:5: 255:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).34), kind: Cast(Expr { hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:21: 255:22 (#0), res: Local(HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).4)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).36), res: Local(HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:21: 255:22 (#0) }, Ty { hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:26: 255:31 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:49 ~ bstr[ec72]::ascii::sub).38), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:26: 255:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/ascii.rs:255:20: 255:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ bstr[ec72]::bstr::B)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:807 ~ bstr[ec72]::bstr::{impl#26}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ bstr[ec72]::bstr::{impl#0}::from_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bstr[ec72]::bstr::{impl#0}::from_bytes_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3160 ~ core[7d5a]::convert::AsMut::as_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ bstr[ec72]::bstr::{impl#0}::from_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1721 ~ core[7d5a]::intrinsics::{extern#1}::transmute)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bstr[ec72]::bstr::{impl#0}::from_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1721 ~ core[7d5a]::intrinsics::{extern#1}::transmute)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:85 ~ bstr[ec72]::bstr::{impl#0}::from_raw_parts)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13128 ~ core[7d5a]::slice::raw::from_raw_parts)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:87 ~ bstr[ec72]::bstr::{impl#0}::from_raw_parts_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13131 ~ core[7d5a]::slice::raw::from_raw_parts_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:89 ~ bstr[ec72]::bstr::{impl#0}::from_os_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:90 ~ bstr[ec72]::bstr::{impl#0}::from_os_str_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:90 ~ bstr[ec72]::bstr::{impl#0}::from_os_str_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4248 ~ std[e3cd]::os::unix::ffi::os_str::OsStrExt::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:92 ~ bstr[ec72]::bstr::{impl#0}::from_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:89 ~ bstr[ec72]::bstr::{impl#0}::from_os_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5428 ~ std[e3cd]::path::{impl#63}::as_os_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13229 ~ core[7d5a]::slice::{impl#0}::is_empty)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ bstr[ec72]::bstr::{impl#0}::to_bstring)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:343 ~ bstr[ec72]::bstring::{impl#0}::from_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:98 ~ bstr[ec72]::bstr::{impl#0}::to_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:788 ~ bstr[ec72]::utf8::validate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:100 ~ bstr[ec72]::bstr::{impl#0}::to_str_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:101 ~ bstr[ec72]::bstr::{impl#0}::to_str_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:788 ~ bstr[ec72]::utf8::validate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:5964 ~ alloc[5873]::string::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13326 ~ core[7d5a]::slice::{impl#0}::split_at)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:782 ~ bstr[ec72]::utf8::{impl#6}::valid_up_to)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:783 ~ bstr[ec72]::utf8::{impl#6}::error_len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:102 ~ bstr[ec72]::bstr::{impl#0}::to_str_lossy_into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ bstr[ec72]::bstr::B)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:102 ~ bstr[ec72]::bstr::{impl#0}::to_str_lossy_into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5994 ~ alloc[5873]::string::{impl#0}::reserve)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:788 ~ bstr[ec72]::utf8::validate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13326 ~ core[7d5a]::slice::{impl#0}::split_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:782 ~ bstr[ec72]::utf8::{impl#6}::valid_up_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13520 ~ core[7d5a]::str::converts::from_utf8_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:5990 ~ alloc[5873]::string::{impl#0}::push_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:783 ~ bstr[ec72]::utf8::{impl#6}::error_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ bstr[ec72]::bstr::{impl#0}::to_os_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:104 ~ bstr[ec72]::bstr::{impl#0}::to_os_str_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:104 ~ bstr[ec72]::bstr::{impl#0}::to_os_str_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4247 ~ std[e3cd]::os::unix::ffi::os_str::OsStrExt::from_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:106 ~ bstr[ec72]::bstr::{impl#0}::to_os_str_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:107 ~ bstr[ec72]::bstr::{impl#0}::to_os_str_lossy_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:107 ~ bstr[ec72]::bstr::{impl#0}::to_os_str_lossy_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4247 ~ std[e3cd]::os::unix::ffi::os_str::OsStrExt::from_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:109 ~ bstr[ec72]::bstr::{impl#0}::to_path)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:103 ~ bstr[ec72]::bstr::{impl#0}::to_os_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5425 ~ std[e3cd]::path::{impl#63}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:110 ~ bstr[ec72]::bstr::{impl#0}::to_path_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:106 ~ bstr[ec72]::bstr::{impl#0}::to_os_str_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5425 ~ std[e3cd]::path::{impl#63}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:112 ~ bstr[ec72]::bstr::{impl#0}::repeat)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8523 ~ core[7d5a]::iter::sources::repeat::repeat)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:113 ~ bstr[ec72]::bstr::{impl#0}::contains)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9656 ~ core[7d5a]::option::{impl#0}::is_some)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ bstr[ec72]::bstr::{impl#0}::find)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9681 ~ core[7d5a]::option::{impl#0}::map_or)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ bstr[ec72]::bstr::{impl#0}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] lang item being silently ignored, 
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:905:52: 905:53 (#0), res: Local(HirId(DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with).27)), segments: [PathSegment { ident: x#0, hir_id: HirId(DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with).30), res: Local(HirId(DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:905:52: 905:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:905:57: 905:63 (#0), res: Local(HirId(DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with).11)), segments: [PathSegment { ident: prefix#0, hir_id: HirId(DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with).32), res: Local(HirId(DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:905:57: 905:63 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9681 ~ core[7d5a]::option::{impl#0}::map_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25395 ~ core[7d5a]::num::{impl#11}::checked_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).29), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).30), kind: Index(Expr { hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:33: 926:37 (#0), res: Local(HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).32), res: Local(HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:33: 926:37 (#0) }, Expr { hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).33), kind: Struct(LangItem(RangeFrom, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:38: 926:41 (#0)), [ExprField { hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).36), ident: start#0, expr: Expr { hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:38: 926:39 (#0), res: Local(HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).27)), segments: [PathSegment { ident: s#0, hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).35), res: Local(HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:38: 926:39 (#0) }, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:38: 926:39 (#0), is_shorthand: false }], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:38: 926:41 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:37: 926:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:33: 926:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:32: 926:42 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:46: 926:52 (#0), res: Local(HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).11)), segments: [PathSegment { ident: suffix#0, hir_id: HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).38), res: Local(HirId(DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:926:46: 926:52 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ bstr[ec72]::bstr::{impl#0}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ bstr[ec72]::bstr::{impl#1}::find)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:207 ~ bstr[ec72]::bstr::{impl#1}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ bstr[ec72]::bstr::{impl#0}::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ bstr[ec72]::bstr::{impl#2}::rfind)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:215 ~ bstr[ec72]::bstr::{impl#2}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ bstr[ec72]::bstr::{impl#0}::find_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ bstr[ec72]::bstr::{impl#3}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ bstr[ec72]::bstr::{impl#0}::rfind_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:230 ~ bstr[ec72]::bstr::{impl#5}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ bstr[ec72]::bstr::{impl#0}::find_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:460 ~ memchr[3596]::memchr::memchr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ bstr[ec72]::bstr::{impl#0}::rfind_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(21:462 ~ memchr[3596]::memchr::memrchr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:133 ~ bstr[ec72]::bstr::{impl#0}::find_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:121 ~ bstr[ec72]::bstr::{impl#0}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:5306 ~ core[7d5a]::char::methods::{impl#0}::encode_utf8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:135 ~ bstr[ec72]::bstr::{impl#0}::rfind_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:123 ~ bstr[ec72]::bstr::{impl#0}::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:5306 ~ core[7d5a]::char::methods::{impl#0}::encode_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:137 ~ bstr[ec72]::bstr::{impl#0}::fields)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ bstr[ec72]::bstr::{impl#10}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:138 ~ bstr[ec72]::bstr::{impl#0}::fields_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:260 ~ bstr[ec72]::bstr::{impl#12}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:140 ~ bstr[ec72]::bstr::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:268 ~ bstr[ec72]::bstr::{impl#14}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ bstr[ec72]::bstr::{impl#0}::rsplit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:275 ~ bstr[ec72]::bstr::{impl#16}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:146 ~ bstr[ec72]::bstr::{impl#0}::splitn)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:282 ~ bstr[ec72]::bstr::{impl#18}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:149 ~ bstr[ec72]::bstr::{impl#0}::rsplitn)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ bstr[ec72]::bstr::{impl#20}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:152 ~ bstr[ec72]::bstr::{impl#0}::replace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:342 ~ bstr[ec72]::bstring::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:155 ~ bstr[ec72]::bstr::{impl#0}::replacen)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:342 ~ bstr[ec72]::bstring::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ bstr[ec72]::bstr::{impl#0}::find_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1644:20: 1644:25 (#0), res: Local(HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).33)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).68), res: Local(HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1644:20: 1644:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).69), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).70), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).71), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1644:28: 1644:34 (#0), res: Local(HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).20)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).72), res: Local(HirId(DefId(0:158 ~ bstr[ec72]::bstr::{impl#0}::replace_into).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1644:28: 1644:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1644:35: 1644:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1644:28: 1644:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8935 ~ core[7d5a]::iter::traits::iterator::Iterator::take)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ bstr[ec72]::bstr::{impl#0}::find_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1709:20: 1709:25 (#0), res: Local(HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).39)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).74), res: Local(HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1709:20: 1709:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).75), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).76), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1709:28: 1709:34 (#0), res: Local(HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).22)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).78), res: Local(HirId(DefId(0:161 ~ bstr[ec72]::bstr::{impl#0}::replacen_into).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1709:28: 1709:34 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1709:35: 1709:40 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:1709:28: 1709:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ bstr[ec72]::bstr::{impl#0}::bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ bstr[ec72]::bstr::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:761 ~ bstr[ec72]::utf8::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:166 ~ bstr[ec72]::bstr::{impl#0}::char_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:772 ~ bstr[ec72]::utf8::{impl#3}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:167 ~ bstr[ec72]::bstr::{impl#0}::lines)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:299 ~ bstr[ec72]::bstr::{impl#22}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:168 ~ bstr[ec72]::bstr::{impl#0}::lines_with_terminator)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:309 ~ bstr[ec72]::bstr::{impl#24}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:169 ~ bstr[ec72]::bstr::{impl#0}::trim_start)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ bstr[ec72]::bstr::{impl#0}::trim_start_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:170 ~ bstr[ec72]::bstr::{impl#0}::trim_start_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:5311 ~ core[7d5a]::char::methods::{impl#0}::is_whitespace)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:172 ~ bstr[ec72]::bstr::{impl#0}::trim_end)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:173 ~ bstr[ec72]::bstr::{impl#0}::trim_end_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:173 ~ bstr[ec72]::bstr::{impl#0}::trim_end_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:5311 ~ core[7d5a]::char::methods::{impl#0}::is_whitespace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:175 ~ bstr[ec72]::bstr::{impl#0}::trim_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:166 ~ bstr[ec72]::bstr::{impl#0}::char_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2294:17: 2294:21 (#0), res: Local(HirId(DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with).4)), segments: [PathSegment { ident: trim#0, hir_id: HirId(DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with).23), res: Local(HirId(DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2294:17: 2294:21 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ bstr[ec72]::bstr::B)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:166 ~ bstr[ec72]::bstr::{impl#0}::char_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2320:17: 2320:21 (#0), res: Local(HirId(DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with).4)), segments: [PathSegment { ident: trim#0, hir_id: HirId(DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with).25), res: Local(HirId(DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2320:17: 2320:21 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ bstr[ec72]::bstr::B)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:181 ~ bstr[ec72]::bstr::{impl#0}::to_ascii_lowercase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5749 ~ alloc[5873]::slice::{impl#1}::to_ascii_lowercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:182 ~ bstr[ec72]::bstr::{impl#0}::make_ascii_lowercase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11912 ~ core[7d5a]::slice::ascii::{impl#0}::make_ascii_lowercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:183 ~ bstr[ec72]::bstr::{impl#0}::to_ascii_uppercase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5748 ~ alloc[5873]::slice::{impl#1}::to_ascii_uppercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:184 ~ bstr[ec72]::bstr::{impl#0}::make_ascii_uppercase)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11911 ~ core[7d5a]::slice::ascii::{impl#0}::make_ascii_uppercase)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:185 ~ bstr[ec72]::bstr::{impl#0}::reverse_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13284 ~ core[7d5a]::slice::{impl#0}::reverse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:794 ~ bstr[ec72]::utf8::decode)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2822:16: 2822:20 (#0), res: Local(HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).24)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).29), res: Local(HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2822:16: 2822:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).30), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2822:24: 2822:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2822:24: 2822:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).39), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2825:16: 2825:20 (#0), res: Local(HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).24)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).40), res: Local(HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).24)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2825:16: 2825:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:186 ~ bstr[ec72]::bstr::{impl#0}::reverse_chars).41), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2825:23: 2825:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2825:23: 2825:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Specific({"bstr"})), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:185 ~ bstr[ec72]::bstr::{impl#0}::reverse_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:185 ~ bstr[ec72]::bstr::{impl#0}::reverse_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).4), kind: Call(Expr { hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:9: 2912:36 (#0), res: Def(Fn, DefId(0:40 ~ bstr[ec72]::ascii::first_non_ascii_byte)), segments: [PathSegment { ident: ascii#0, hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).6), res: Def(Mod, DefId(0:34 ~ bstr[ec72]::ascii)), args: None, infer_args: true }, PathSegment { ident: first_non_ascii_byte#0, hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).7), res: Def(Fn, DefId(0:40 ~ bstr[ec72]::ascii::first_non_ascii_byte)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:9: 2912:36 (#0) }, [Expr { hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).8), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).9), kind: Field(Expr { hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:38: 2912:42 (#0), res: Local(HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).11), res: Local(HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:38: 2912:42 (#0) }, bytes#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:38: 2912:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:37: 2912:48 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:9: 2912:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).12), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:53: 2912:57 (#0), res: Local(HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).15), res: Local(HirId(DefId(0:187 ~ bstr[ec72]::bstr::{impl#0}::is_ascii).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:53: 2912:57 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:58: 2912:63 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2912:53: 2912:63 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ bstr[ec72]::ascii::first_non_ascii_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:188 ~ bstr[ec72]::bstr::{impl#0}::is_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10385 ~ core[7d5a]::result::{impl#0}::is_ok)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:788 ~ bstr[ec72]::utf8::validate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ bstr[ec72]::bstr::{impl#0}::split_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13326 ~ core[7d5a]::slice::{impl#0}::split_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:190 ~ bstr[ec72]::bstr::{impl#0}::split_at_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13327 ~ core[7d5a]::slice::{impl#0}::split_at_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ bstr[ec72]::bstr::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:685 ~ bstr[ec72]::slice_index::SliceIndex::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:193 ~ bstr[ec72]::bstr::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:686 ~ bstr[ec72]::slice_index::SliceIndex::get_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ bstr[ec72]::bstr::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:687 ~ bstr[ec72]::slice_index::SliceIndex::get_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:197 ~ bstr[ec72]::bstr::{impl#0}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:688 ~ bstr[ec72]::slice_index::SliceIndex::get_unchecked_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ bstr[ec72]::bstr::{impl#0}::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ bstr[ec72]::bstr::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3817 ~ core[7d5a]::ops::range::RangeBounds::start_bound)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3818 ~ core[7d5a]::ops::range::RangeBounds::end_bound)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9669 ~ core[7d5a]::option::{impl#0}::expect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25390 ~ core[7d5a]::num::{impl#11}::checked_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3197:17: 3197:26 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).46)), segments: [PathSegment { ident: src_start#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).94), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3197:17: 3197:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3197:30: 3197:37 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).89)), segments: [PathSegment { ident: src_end#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).96), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).89)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3197:30: 3197:37 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3198:17: 3198:24 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).89)), segments: [PathSegment { ident: src_end#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).114), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).89)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3198:17: 3198:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).115), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).116), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3198:28: 3198:32 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).118), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3198:28: 3198:32 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3198:33: 3198:38 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3198:28: 3198:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3199:21: 3199:28 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).89)), segments: [PathSegment { ident: src_end#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).135), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).89)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3199:21: 3199:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).136), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3199:31: 3199:40 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).46)), segments: [PathSegment { ident: src_start#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).137), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).46)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3199:31: 3199:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).143), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:17: 3200:21 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).6)), segments: [PathSegment { ident: dest#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).144), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:17: 3200:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).145), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:36: 3200:37 (#0) }, Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).146), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).147), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:25: 3200:29 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).149), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:25: 3200:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:30: 3200:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:25: 3200:35 (#0) }, Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:38: 3200:43 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).139)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).151), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:38: 3200:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:25: 3200:43 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).146), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).147), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).148), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:25: 3200:29 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).149), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:25: 3200:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:30: 3200:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:25: 3200:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:38: 3200:43 (#0), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).139)), segments: [PathSegment { ident: count#0, hir_id: HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).151), res: Local(HirId(DefId(0:201 ~ bstr[ec72]::bstr::{impl#0}::copy_within).139)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3200:38: 3200:43 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:7838 ~ std[e3cd]::panicking::begin_panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:1985 ~ core[7d5a]::intrinsics::copy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:195 ~ bstr[ec72]::bstr::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:197 ~ bstr[ec72]::bstr::{impl#0}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:203 ~ bstr[ec72]::bstr::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:204 ~ bstr[ec72]::bstr::{impl#0}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13279 ~ core[7d5a]::slice::{impl#0}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] lang item being silently ignored, 
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with).22), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2294:17: 2294:21 (#0), res: Local(HirId(DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with).4)), segments: [PathSegment { ident: trim#0, hir_id: HirId(DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with).23), res: Local(HirId(DefId(0:177 ~ bstr[ec72]::bstr::{impl#0}::trim_start_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2294:17: 2294:21 (#0) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2320:17: 2320:21 (#0), res: Local(HirId(DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with).4)), segments: [PathSegment { ident: trim#0, hir_id: HirId(DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with).25), res: Local(HirId(DefId(0:179 ~ bstr[ec72]::bstr::{impl#0}::trim_end_with).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:2320:17: 2320:21 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:814 ~ bstr[ec72]::bstr::{impl#27}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:817 ~ bstr[ec72]::bstr::{impl#28}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:207 ~ bstr[ec72]::bstr::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:209 ~ bstr[ec72]::bstr::{impl#1}::into_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:650 ~ bstr[ec72]::search::twoway::{impl#0}::into_owned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:210 ~ bstr[ec72]::bstr::{impl#1}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:649 ~ bstr[ec72]::search::twoway::{impl#0}::needle)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:211 ~ bstr[ec72]::bstr::{impl#1}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:651 ~ bstr[ec72]::search::twoway::{impl#0}::find)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:823 ~ bstr[ec72]::bstr::{impl#29}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:826 ~ bstr[ec72]::bstr::{impl#30}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:215 ~ bstr[ec72]::bstr::{impl#2}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:217 ~ bstr[ec72]::bstr::{impl#2}::into_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:650 ~ bstr[ec72]::search::twoway::{impl#0}::into_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:218 ~ bstr[ec72]::bstr::{impl#2}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:649 ~ bstr[ec72]::search::twoway::{impl#0}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:219 ~ bstr[ec72]::bstr::{impl#2}::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:652 ~ bstr[ec72]::search::twoway::{impl#0}::rfind)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:835 ~ bstr[ec72]::bstr::{impl#31}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:223 ~ bstr[ec72]::bstr::{impl#3}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:648 ~ bstr[ec72]::search::twoway::{impl#0}::prefilter_state)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).5), kind: Field(Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).6), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3477:12: 3477:16 (#0), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).7), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3477:12: 3477:16 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3477:12: 3477:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).8), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).9), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).10), kind: Field(Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3477:23: 3477:27 (#0), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).12), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3477:23: 3477:27 (#0) }, haystack#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3477:23: 3477:36 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3477:37: 3477:42 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3477:23: 3477:42 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).58), kind: Field(Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3487:27: 3487:31 (#0), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).60), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3487:27: 3487:31 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3487:27: 3487:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).61), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3487:38: 3487:39 (#0), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).62), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3487:38: 3487:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:28: 3488:31 (#0), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).64)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).71), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).64)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:28: 3488:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).72), kind: Call(Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:34: 3488:42 (#0), res: Def(Fn, DefId(3:3024 ~ core[7d5a]::cmp::max)), segments: [PathSegment { ident: cmp#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).74), res: Def(Mod, DefId(3:2955 ~ core[7d5a]::cmp)), args: None, infer_args: true }, PathSegment { ident: max#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).75), res: Def(Fn, DefId(3:3024 ~ core[7d5a]::cmp::max)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:34: 3488:42 (#0) }, [Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).76), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:43: 3488:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:43: 3488:44 (#0) }, Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).77), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).78), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).79), kind: MethodCall(PathSegment { ident: needle#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).80), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).81), kind: Field(Expr { hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:46: 3488:50 (#0), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).83), res: Local(HirId(DefId(0:227 ~ bstr[ec72]::bstr::{impl#4}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:46: 3488:50 (#0) }, searcher#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:46: 3488:59 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:60: 3488:68 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:46: 3488:68 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:69: 3488:74 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:46: 3488:74 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3488:34: 3488:75 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:649 ~ bstr[ec72]::search::twoway::{impl#0}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:844 ~ bstr[ec72]::bstr::{impl#32}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:230 ~ bstr[ec72]::bstr::{impl#5}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:648 ~ bstr[ec72]::search::twoway::{impl#0}::prefilter_state)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ bstr[ec72]::bstr::{impl#5}::haystack)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:232 ~ bstr[ec72]::bstr::{impl#5}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:649 ~ bstr[ec72]::search::twoway::{impl#0}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3544:20: 3544:23 (#0), res: Local(HirId(DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next).21)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next).59), res: Local(HirId(DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3544:20: 3544:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3544:27: 3544:28 (#0), res: Local(HirId(DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next).61), res: Local(HirId(DefId(0:236 ~ bstr[ec72]::bstr::{impl#6}::next).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3544:27: 3544:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:25395 ~ core[7d5a]::num::{impl#11}::checked_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:850 ~ bstr[ec72]::bstr::{impl#33}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:853 ~ bstr[ec72]::bstr::{impl#34}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:240 ~ bstr[ec72]::bstr::{impl#7}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:244 ~ bstr[ec72]::bstr::{impl#8}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:248 ~ bstr[ec72]::bstr::{impl#9}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:859 ~ bstr[ec72]::bstr::{impl#35}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:251 ~ bstr[ec72]::bstr::{impl#10}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:138 ~ bstr[ec72]::bstr::{impl#0}::fields_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:5311 ~ core[7d5a]::char::methods::{impl#0}::is_whitespace)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:256 ~ bstr[ec72]::bstr::{impl#11}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:869 ~ bstr[ec72]::bstr::{impl#36}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:260 ~ bstr[ec72]::bstr::{impl#12}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:166 ~ bstr[ec72]::bstr::{impl#0}::char_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).32), kind: Field(Expr { hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3648:26: 3648:30 (#0), res: Local(HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).34), res: Local(HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3648:26: 3648:30 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3648:25: 3648:33 (#0) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).32), kind: Field(Expr { hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3648:26: 3648:30 (#0), res: Local(HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).34), res: Local(HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3648:26: 3648:30 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3648:25: 3648:33 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] [WARN] Silently failed to get type of local var
[WARN] Cannot tell if expression is a function - Expr { hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).72), kind: Field(Expr { hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3657:17: 3657:21 (#0), res: Local(HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).74), res: Local(HirId(DefId(0:265 ~ bstr[ec72]::bstr::{impl#13}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3657:17: 3657:21 (#0) }, f#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3657:16: 3657:24 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:877 ~ bstr[ec72]::bstr::{impl#37}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:268 ~ bstr[ec72]::bstr::{impl#14}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:125 ~ bstr[ec72]::bstr::{impl#0}::find_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:29: 3699:34 (#0), res: Local(HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).17)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).42), res: Local(HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:29: 3699:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).43), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).45), kind: MethodCall(PathSegment { ident: needle#0, hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).46), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).47), kind: Field(Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).48), kind: Field(Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:37: 3699:41 (#0), res: Local(HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).50), res: Local(HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:37: 3699:41 (#0) }, finder#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:37: 3699:48 (#0) }, searcher#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:37: 3699:57 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:58: 3699:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:37: 3699:66 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:67: 3699:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3699:37: 3699:72 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:649 ~ bstr[ec72]::search::twoway::{impl#0}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).64), kind: Field(Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3703:20: 3703:24 (#0), res: Local(HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).66), res: Local(HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3703:20: 3703:24 (#0) }, last#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3703:20: 3703:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).67), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).68), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).69), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3703:33: 3703:41 (#0), res: Local(HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).9)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).70), res: Local(HirId(DefId(0:272 ~ bstr[ec72]::bstr::{impl#15}::next).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3703:33: 3703:41 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3703:42: 3703:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3703:33: 3703:47 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ bstr[ec72]::bstr::B)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:885 ~ bstr[ec72]::bstr::{impl#38}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:275 ~ bstr[ec72]::bstr::{impl#16}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:128 ~ bstr[ec72]::bstr::{impl#0}::rfind_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:279 ~ bstr[ec72]::bstr::{impl#17}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ bstr[ec72]::bstr::{impl#5}::haystack)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:232 ~ bstr[ec72]::bstr::{impl#5}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:279 ~ bstr[ec72]::bstr::{impl#17}::next).69), kind: Field(Expr { hir_id: HirId(DefId(0:279 ~ bstr[ec72]::bstr::{impl#17}::next).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3760:20: 3760:24 (#0), res: Local(HirId(DefId(0:279 ~ bstr[ec72]::bstr::{impl#17}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:279 ~ bstr[ec72]::bstr::{impl#17}::next).71), res: Local(HirId(DefId(0:279 ~ bstr[ec72]::bstr::{impl#17}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3760:20: 3760:24 (#0) }, last#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3760:20: 3760:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:279 ~ bstr[ec72]::bstr::{impl#17}::next).72), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3760:33: 3760:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3760:33: 3760:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ bstr[ec72]::bstr::B)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:893 ~ bstr[ec72]::bstr::{impl#39}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:282 ~ bstr[ec72]::bstr::{impl#18}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:140 ~ bstr[ec72]::bstr::{impl#0}::split)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).11), kind: Field(Expr { hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3807:12: 3807:16 (#0), res: Local(HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).13), res: Local(HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3807:12: 3807:16 (#0) }, count#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3807:12: 3807:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).14), kind: Field(Expr { hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3807:25: 3807:29 (#0), res: Local(HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).16), res: Local(HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3807:25: 3807:29 (#0) }, limit#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3807:25: 3807:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).24), kind: Field(Expr { hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3809:19: 3809:23 (#0), res: Local(HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).26), res: Local(HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3809:19: 3809:23 (#0) }, count#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3809:19: 3809:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).27), kind: Field(Expr { hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3809:33: 3809:37 (#0), res: Local(HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).29), res: Local(HirId(DefId(0:286 ~ bstr[ec72]::bstr::{impl#19}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3809:33: 3809:37 (#0) }, limit#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3809:33: 3809:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:901 ~ bstr[ec72]::bstr::{impl#40}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:289 ~ bstr[ec72]::bstr::{impl#20}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:143 ~ bstr[ec72]::bstr::{impl#0}::rsplit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).11), kind: Field(Expr { hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3847:12: 3847:16 (#0), res: Local(HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).13), res: Local(HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3847:12: 3847:16 (#0) }, count#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3847:12: 3847:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).14), kind: Field(Expr { hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3847:25: 3847:29 (#0), res: Local(HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).16), res: Local(HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3847:25: 3847:29 (#0) }, limit#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3847:25: 3847:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).24), kind: Field(Expr { hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).25), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3849:19: 3849:23 (#0), res: Local(HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).26), res: Local(HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3849:19: 3849:23 (#0) }, count#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3849:19: 3849:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).27), kind: Field(Expr { hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).28), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3849:33: 3849:37 (#0), res: Local(HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).29), res: Local(HirId(DefId(0:293 ~ bstr[ec72]::bstr::{impl#21}::next).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3849:33: 3849:37 (#0) }, limit#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3849:33: 3849:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:231 ~ bstr[ec72]::bstr::{impl#5}::haystack)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:299 ~ bstr[ec72]::bstr::{impl#22}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:309 ~ bstr[ec72]::bstr::{impl#24}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).31), kind: MethodCall(PathSegment { ident: last#0, hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:12: 3879:16 (#0), res: Local(HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).28)), segments: [PathSegment { ident: line#0, hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).34), res: Local(HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:12: 3879:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:17: 3879:23 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:12: 3879:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).35), kind: Call(Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:27: 3879:31 (#0), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).37), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:27: 3879:31 (#0) }, [Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).38), kind: Lit(Spanned { node: Byte(10), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:32: 3879:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:32: 3879:37 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3879:27: 3879:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ bstr[ec72]::bstr::{impl#0}::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).58), kind: MethodCall(PathSegment { ident: last#0, hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).59), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:16: 3881:20 (#0), res: Local(HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).28)), segments: [PathSegment { ident: line#0, hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).61), res: Local(HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:16: 3881:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:21: 3881:27 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:16: 3881:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).62), kind: Call(Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:31: 3881:35 (#0), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).64), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:31: 3881:35 (#0) }, [Expr { hir_id: HirId(DefId(0:303 ~ bstr[ec72]::bstr::{impl#23}::next).65), kind: Lit(Spanned { node: Byte(13), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:36: 3881:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:36: 3881:41 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstr.rs:3881:31: 3881:42 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ bstr[ec72]::bstr::{impl#0}::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:309 ~ bstr[ec72]::bstr::{impl#24}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:313 ~ bstr[ec72]::bstr::{impl#25}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ bstr[ec72]::bstr::{impl#0}::find_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:75 ~ bstr[ec72]::bstr::B)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:333 ~ bstr[ec72]::bstring::concat)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bstr[ec72]::bstring::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:336 ~ bstr[ec72]::bstring::join)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bstr[ec72]::bstring::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:905 ~ bstr[ec72]::bstring::{impl#8}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:907 ~ bstr[ec72]::bstring::{impl#9}::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11357 ~ core[7d5a]::hash::Hash::hash)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bstr[ec72]::bstring::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7424 ~ alloc[5873]::vec::{impl#0}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:342 ~ bstr[ec72]::bstring::{impl#0}::with_capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7425 ~ alloc[5873]::vec::{impl#0}::with_capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:343 ~ bstr[ec72]::bstring::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:344 ~ bstr[ec72]::bstring::{impl#0}::from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:343 ~ bstr[ec72]::bstring::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:346 ~ bstr[ec72]::bstring::{impl#0}::from_os_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:347 ~ bstr[ec72]::bstring::{impl#0}::from_os_string_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:347 ~ bstr[ec72]::bstring::{impl#0}::from_os_string_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4242 ~ std[e3cd]::os::unix::ffi::os_str::OsStringExt::into_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:349 ~ bstr[ec72]::bstring::{impl#0}::from_os_str_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:351 ~ bstr[ec72]::bstring::{impl#0}::from_os_str_lossy_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:351 ~ bstr[ec72]::bstring::{impl#0}::from_os_str_lossy_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4248 ~ std[e3cd]::os::unix::ffi::os_str::OsStrExt::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:354 ~ bstr[ec72]::bstring::{impl#0}::from_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10405 ~ core[7d5a]::result::{impl#0}::map_err)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:346 ~ bstr[ec72]::bstring::{impl#0}::from_os_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5328 ~ std[e3cd]::path::{impl#29}::into_os_string)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:355 ~ bstr[ec72]::bstring::{impl#0}::from_path_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:349 ~ bstr[ec72]::bstring::{impl#0}::from_os_str_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:5428 ~ std[e3cd]::path::{impl#63}::as_os_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:357 ~ bstr[ec72]::bstring::{impl#0}::push_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:358 ~ bstr[ec72]::bstring::{impl#0}::push_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:358 ~ bstr[ec72]::bstring::{impl#0}::push_char).7), kind: MethodCall(PathSegment { ident: len_utf8#0, hir_id: HirId(DefId(0:358 ~ bstr[ec72]::bstring::{impl#0}::push_char).8), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:358 ~ bstr[ec72]::bstring::{impl#0}::push_char).9), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:474:12: 474:14 (#0), res: Local(HirId(DefId(0:358 ~ bstr[ec72]::bstring::{impl#0}::push_char).4)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:358 ~ bstr[ec72]::bstring::{impl#0}::push_char).10), res: Local(HirId(DefId(0:358 ~ bstr[ec72]::bstring::{impl#0}::push_char).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:474:12: 474:14 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:474:15: 474:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:474:12: 474:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:358 ~ bstr[ec72]::bstring::{impl#0}::push_char).11), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:474:29: 474:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:474:29: 474:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:5304 ~ core[7d5a]::char::methods::{impl#0}::len_utf8)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7502 ~ alloc[5873]::vec::{impl#1}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7527 ~ alloc[5873]::vec::{impl#2}::extend_from_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:5306 ~ core[7d5a]::char::methods::{impl#0}::encode_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7527 ~ alloc[5873]::vec::{impl#2}::extend_from_slice)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:362 ~ bstr[ec72]::bstring::{impl#0}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ bstr[ec72]::bstr::{impl#0}::from_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:363 ~ bstr[ec72]::bstring::{impl#0}::as_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:364 ~ bstr[ec72]::bstring::{impl#0}::as_mut_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bstr[ec72]::bstr::{impl#0}::from_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:365 ~ bstr[ec72]::bstring::{impl#0}::as_mut_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ bstr[ec72]::bstring::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:367 ~ bstr[ec72]::bstring::{impl#0}::into_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:788 ~ bstr[ec72]::utf8::validate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ bstr[ec72]::bstring::{impl#0}::into_string_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:368 ~ bstr[ec72]::bstring::{impl#0}::into_string_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:6152 ~ alloc[5873]::string::ToString::to_string)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:369 ~ bstr[ec72]::bstring::{impl#0}::into_string_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5986 ~ alloc[5873]::string::{impl#0}::from_utf8_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ bstr[ec72]::bstring::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ bstr[ec72]::bstring::{impl#0}::into_os_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:371 ~ bstr[ec72]::bstring::{impl#0}::into_os_string_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:371 ~ bstr[ec72]::bstring::{impl#0}::into_os_string_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4241 ~ std[e3cd]::os::unix::ffi::os_str::OsStringExt::from_vec)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ bstr[ec72]::bstring::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:373 ~ bstr[ec72]::bstring::{impl#0}::into_os_string_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:374 ~ bstr[ec72]::bstring::{impl#0}::into_os_string_lossy_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:374 ~ bstr[ec72]::bstring::{impl#0}::into_os_string_lossy_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(2:4241 ~ std[e3cd]::os::unix::ffi::os_str::OsStringExt::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ bstr[ec72]::bstring::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:376 ~ bstr[ec72]::bstring::{impl#0}::into_path_buf)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:10395 ~ core[7d5a]::result::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:370 ~ bstr[ec72]::bstring::{impl#0}::into_os_string)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:377 ~ bstr[ec72]::bstring::{impl#0}::into_path_buf_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:373 ~ bstr[ec72]::bstring::{impl#0}::into_os_string_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:378 ~ bstr[ec72]::bstring::{impl#0}::into_boxed_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7446 ~ alloc[5873]::vec::{impl#1}::into_boxed_slice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:380 ~ alloc[5873]::boxed::{impl#6}::from_raw)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:385 ~ alloc[5873]::boxed::{impl#7}::into_raw)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:379 ~ bstr[ec72]::bstring::{impl#0}::capacity)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7439 ~ alloc[5873]::vec::{impl#1}::capacity)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:380 ~ bstr[ec72]::bstring::{impl#0}::clear)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7511 ~ alloc[5873]::vec::{impl#1}::clear)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:381 ~ bstr[ec72]::bstring::{impl#0}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7440 ~ alloc[5873]::vec::{impl#1}::reserve)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:382 ~ bstr[ec72]::bstring::{impl#0}::reserve_exact)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7441 ~ alloc[5873]::vec::{impl#1}::reserve_exact)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:383 ~ bstr[ec72]::bstring::{impl#0}::shrink_to_fit)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7444 ~ alloc[5873]::vec::{impl#1}::shrink_to_fit)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:971:12: 971:19 (#0), res: Local(HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).4)), segments: [PathSegment { ident: new_len#0, hir_id: HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).8), res: Local(HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:971:12: 971:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).9), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).10), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:971:22: 971:26 (#0), res: Local(HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).12), res: Local(HirId(DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:971:22: 971:26 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:971:27: 971:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:971:22: 971:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7447 ~ alloc[5873]::vec::{impl#1}::truncate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:385 ~ bstr[ec72]::bstring::{impl#0}::resize)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7526 ~ alloc[5873]::vec::{impl#2}::resize)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:800 ~ bstr[ec72]::utf8::decode_last_lossy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1046:12: 1046:16 (#0), res: Local(HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).14)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).19), res: Local(HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1046:12: 1046:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).20), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1046:20: 1046:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1046:20: 1046:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).31), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1049:23: 1049:27 (#0), res: Local(HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).34), res: Local(HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1049:23: 1049:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1049:28: 1049:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1049:23: 1049:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1049:36: 1049:40 (#0), res: Local(HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).14)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).36), res: Local(HirId(DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1049:36: 1049:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:384 ~ bstr[ec72]::bstring::{impl#0}::truncate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:387 ~ bstr[ec72]::bstring::{impl#0}::pop_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7504 ~ alloc[5873]::vec::{impl#1}::pop)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:388 ~ bstr[ec72]::bstring::{impl#0}::pop)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:386 ~ bstr[ec72]::bstring::{impl#0}::pop_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:796 ~ bstr[ec72]::utf8::decode_lossy)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1169:17: 1169:21 (#0), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).21)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).27), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1169:17: 1169:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).28), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1169:24: 1169:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1169:24: 1169:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7509 ~ alloc[5873]::vec::{impl#1}::drain)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1170:30: 1170:32 (#0), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).81), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1170:30: 1170:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1170:35: 1170:39 (#0), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).21)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).83), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1170:35: 1170:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1170:30: 1170:32 (#0), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).81), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1170:30: 1170:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1170:35: 1170:39 (#0), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).21)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).83), res: Local(HirId(DefId(0:389 ~ bstr[ec72]::bstring::{impl#0}::remove).21)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1170:35: 1170:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:390 ~ bstr[ec72]::bstring::{impl#0}::insert_char)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:5306 ~ core[7d5a]::char::methods::{impl#0}::encode_utf8)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1227:17: 1227:19 (#0), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).11), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1227:17: 1227:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).12), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).13), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1227:23: 1227:27 (#0), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).15), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1227:23: 1227:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1227:28: 1227:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1227:23: 1227:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10015 ~ core[7d5a]::panicking::panic_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:381 ~ bstr[ec72]::bstring::{impl#0}::reserve)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:1985 ~ core[7d5a]::intrinsics::copy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2591 ~ core[7d5a]::ptr::const_ptr::{impl#0}::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:7450 ~ alloc[5873]::vec::{impl#1}::as_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(6:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).102), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1243:45: 1243:47 (#0), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).103), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1243:45: 1243:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).104), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).105), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).106), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1243:50: 1243:55 (#0), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).63)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).107), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1243:50: 1243:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1243:56: 1243:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1243:50: 1243:61 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).109), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1244:17: 1244:20 (#0), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).70)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).110), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).70)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1244:17: 1244:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1244:23: 1244:25 (#0), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).4)), segments: [PathSegment { ident: at#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).112), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1244:23: 1244:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:1980 ~ core[7d5a]::intrinsics::copy_nonoverlapping)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13278 ~ core[7d5a]::slice::{impl#0}::as_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2689 ~ core[7d5a]::ptr::mut_ptr::{impl#0}::add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7451 ~ alloc[5873]::vec::{impl#1}::as_mut_ptr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(6:7453 ~ alloc[5873]::vec::{impl#1}::set_len)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1255:32: 1255:35 (#0), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).70)), segments: [PathSegment { ident: len#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).143), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).70)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1255:32: 1255:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).144), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).145), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).146), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1255:38: 1255:43 (#0), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).63)), segments: [PathSegment { ident: bytes#0, hir_id: HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).147), res: Local(HirId(DefId(0:392 ~ bstr[ec72]::bstring::{impl#0}::insert).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1255:38: 1255:43 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1255:44: 1255:49 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1255:38: 1255:49 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:394 ~ bstr[ec72]::bstring::{impl#0}::split_off)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7514 ~ alloc[5873]::vec::{impl#1}::split_off)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:395 ~ bstr[ec72]::bstring::{impl#0}::replace_range)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7635 ~ alloc[5873]::vec::{impl#20}::splice)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:9112 ~ core[7d5a]::iter::traits::iterator::Iterator::cloned)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:398 ~ bstr[ec72]::bstring::{impl#0}::drain_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:7509 ~ alloc[5873]::vec::{impl#1}::drain)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:914 ~ bstr[ec72]::bstring::{impl#10}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:405 ~ bstr[ec72]::bstring::{impl#2}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8890 ~ core[7d5a]::iter::traits::iterator::Iterator::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:408 ~ bstr[ec72]::bstring::{impl#3}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8782 ~ core[7d5a]::iter::traits::double_ended::DoubleEndedIterator::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:411 ~ bstr[ec72]::bstring::{impl#4}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8837 ~ core[7d5a]::iter::traits::exact_size::ExactSizeIterator::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:919 ~ bstr[ec72]::bstring::{impl#11}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:921 ~ bstr[ec72]::bstring::{impl#12}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).6), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1434:5: 1434:22 (#89) }, Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).7), kind: Field(Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:21 (#89), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).9), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89) }, original#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1434:5: 1434:22 (#89) }, Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).10), kind: Field(Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).4)), segments: [PathSegment { ident: other#89, hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).12), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89) }, original#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1434:5: 1434:22 (#89) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1434:5: 1434:22 (#89) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).13), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1435:5: 1435:19 (#89) }, Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).14), kind: Field(Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:21 (#89), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).16), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89) }, err#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1435:5: 1435:19 (#89) }, Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).17), kind: Field(Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).4)), segments: [PathSegment { ident: other#89, hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).19), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89) }, err#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1435:5: 1435:19 (#89) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1435:5: 1435:19 (#89) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).7), kind: Field(Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:21 (#89), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).9), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89) }, original#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1434:5: 1434:22 (#89) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).10), kind: Field(Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).4)), segments: [PathSegment { ident: other#89, hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).12), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89) }, original#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1434:5: 1434:22 (#89) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).14), kind: Field(Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:21 (#89), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).16), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89) }, err#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1435:5: 1435:19 (#89) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).17), kind: Field(Expr { hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).4)), segments: [PathSegment { ident: other#89, hir_id: HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).19), res: Local(HirId(DefId(0:924 ~ bstr[ec72]::bstring::{impl#14}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1432:21: 1432:30 (#89) }, err#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/bstring.rs:1435:5: 1435:19 (#89) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:413 ~ bstr[ec72]::bstring::{impl#5}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:414 ~ bstr[ec72]::bstring::{impl#5}::into_bstring)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:415 ~ bstr[ec72]::bstring::{impl#5}::utf8_error)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:417 ~ bstr[ec72]::bstring::{impl#6}::description)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:419 ~ bstr[ec72]::bstring::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:931 ~ bstr[ec72]::cow::{impl#3}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:934 ~ bstr[ec72]::cow::{impl#4}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:941 ~ bstr[ec72]::cow::{impl#5}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:944 ~ bstr[ec72]::cow::{impl#6}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11210 ~ core[7d5a]::fmt::{impl#9}::debug_tuple_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:428 ~ bstr[ec72]::cow::{impl#0}::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bstr[ec72]::cow::{impl#1}::as_bstr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:431 ~ bstr[ec72]::cow::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:438 ~ bstr[ec72]::cow::{impl#2}::new)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bstr[ec72]::cow::{impl#1}::new_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bstr[ec72]::cow::{impl#1}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:439 ~ bstr[ec72]::cow::{impl#2}::as_bstr)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:435 ~ bstr[ec72]::cow::{impl#1}::into_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bstr[ec72]::cow::{impl#1}::new_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ bstr[ec72]::bstr::{impl#0}::to_bstring)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:433 ~ bstr[ec72]::cow::{impl#1}::new_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:438 ~ bstr[ec72]::cow::{impl#2}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:439 ~ bstr[ec72]::cow::{impl#2}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:456 ~ bstr[ec72]::impls::bstring::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:362 ~ bstr[ec72]::bstring::{impl#0}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:458 ~ bstr[ec72]::impls::bstring::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11137 ~ core[7d5a]::fmt::Debug::fmt)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:362 ~ bstr[ec72]::bstring::{impl#0}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:461 ~ bstr[ec72]::impls::bstring::{impl#2}::deref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:362 ~ bstr[ec72]::bstring::{impl#0}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:463 ~ bstr[ec72]::impls::bstring::{impl#3}::deref_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:364 ~ bstr[ec72]::bstring::{impl#0}::as_mut_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:465 ~ bstr[ec72]::impls::bstring::{impl#4}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:467 ~ bstr[ec72]::impls::bstring::{impl#5}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:362 ~ bstr[ec72]::bstring::{impl#0}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:469 ~ bstr[ec72]::impls::bstring::{impl#6}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:471 ~ bstr[ec72]::impls::bstring::{impl#7}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:364 ~ bstr[ec72]::bstring::{impl#0}::as_mut_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:473 ~ bstr[ec72]::impls::bstring::{impl#8}::borrow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:362 ~ bstr[ec72]::bstring::{impl#0}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:476 ~ bstr[ec72]::impls::bstring::{impl#9}::to_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ bstr[ec72]::bstr::{impl#0}::to_bstring)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:479 ~ bstr[ec72]::impls::bstring::{impl#10}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:343 ~ bstr[ec72]::bstring::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:481 ~ bstr[ec72]::impls::bstring::{impl#11}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:343 ~ bstr[ec72]::bstring::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:483 ~ bstr[ec72]::impls::bstring::{impl#12}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:366 ~ bstr[ec72]::bstring::{impl#0}::into_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:486 ~ bstr[ec72]::impls::bstring::{impl#13}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:343 ~ bstr[ec72]::bstring::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5735 ~ alloc[5873]::slice::{impl#0}::to_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:488 ~ bstr[ec72]::impls::bstring::{impl#14}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:343 ~ bstr[ec72]::bstring::{impl#0}::from_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(6:5987 ~ alloc[5873]::string::{impl#0}::into_bytes)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:491 ~ bstr[ec72]::impls::bstring::{impl#15}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:97 ~ bstr[ec72]::bstr::{impl#0}::to_bstring)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:494 ~ bstr[ec72]::impls::bstring::{impl#16}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:496 ~ bstr[ec72]::impls::bstring::{impl#17}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:499 ~ bstr[ec72]::impls::bstring::{impl#18}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3166 ~ core[7d5a]::convert::From::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8953 ~ core[7d5a]::iter::traits::iterator::Iterator::collect)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8709 ~ core[7d5a]::iter::traits::collect::IntoIterator::into_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:503 ~ bstr[ec72]::impls::bstring::{impl#19}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bstr[ec72]::bstring::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:507 ~ bstr[ec72]::impls::bstring::{impl#20}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bstr[ec72]::bstring::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:511 ~ bstr[ec72]::impls::bstring::{impl#21}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bstr[ec72]::bstring::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:514 ~ bstr[ec72]::impls::bstring::{impl#22}::from_iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bstr[ec72]::bstring::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:360 ~ bstr[ec72]::bstring::{impl#0}::push)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).6), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).7), kind: Index(Expr { hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:14: 258:18 (#0), res: Local(HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).9), res: Local(HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:14: 258:18 (#0) }, Expr { hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).10), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:19: 258:21 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:19: 258:21 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:18: 258:22 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:14: 258:22 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:13: 258:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).11), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).12), kind: Index(Expr { hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).13), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:27: 258:32 (#0), res: Local(HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).14), res: Local(HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:27: 258:32 (#0) }, Expr { hir_id: HirId(DefId(0:518 ~ bstr[ec72]::impls::bstring::{impl#24}::eq).15), kind: Struct(LangItem(RangeFull, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:33: 258:35 (#0)), [], None), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:33: 258:35 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:32: 258:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:27: 258:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:258:26: 258:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:948 ~ bstr[ec72]::impls::bstring::{impl#27}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:952 ~ bstr[ec72]::impls::bstring::{impl#28}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:956 ~ bstr[ec72]::impls::bstring::{impl#29}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:960 ~ bstr[ec72]::impls::bstring::{impl#30}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:964 ~ bstr[ec72]::impls::bstring::{impl#31}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:968 ~ bstr[ec72]::impls::bstring::{impl#32}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:972 ~ bstr[ec72]::impls::bstring::{impl#33}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:976 ~ bstr[ec72]::impls::bstring::{impl#34}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:980 ~ bstr[ec72]::impls::bstring::{impl#35}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:984 ~ bstr[ec72]::impls::bstring::{impl#36}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:988 ~ bstr[ec72]::impls::bstring::{impl#37}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:992 ~ bstr[ec72]::impls::bstring::{impl#38}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:996 ~ bstr[ec72]::impls::bstring::{impl#39}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1000 ~ bstr[ec72]::impls::bstring::{impl#40}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1004 ~ bstr[ec72]::impls::bstring::{impl#41}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1008 ~ bstr[ec72]::impls::bstring::{impl#42}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:520 ~ bstr[ec72]::impls::bstring::{impl#25}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:522 ~ bstr[ec72]::impls::bstring::{impl#26}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1012 ~ bstr[ec72]::impls::bstring::{impl#43}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1016 ~ bstr[ec72]::impls::bstring::{impl#44}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1020 ~ bstr[ec72]::impls::bstring::{impl#45}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1024 ~ bstr[ec72]::impls::bstring::{impl#46}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1028 ~ bstr[ec72]::impls::bstring::{impl#47}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1032 ~ bstr[ec72]::impls::bstring::{impl#48}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1036 ~ bstr[ec72]::impls::bstring::{impl#49}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1040 ~ bstr[ec72]::impls::bstring::{impl#50}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1044 ~ bstr[ec72]::impls::bstring::{impl#51}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1048 ~ bstr[ec72]::impls::bstring::{impl#52}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1052 ~ bstr[ec72]::impls::bstring::{impl#53}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1056 ~ bstr[ec72]::impls::bstring::{impl#54}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1060 ~ bstr[ec72]::impls::bstring::{impl#55}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1064 ~ bstr[ec72]::impls::bstring::{impl#56}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1068 ~ bstr[ec72]::impls::bstring::{impl#57}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1072 ~ bstr[ec72]::impls::bstring::{impl#58}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:530 ~ bstr[ec72]::impls::bstr::{impl#0}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:98 ~ bstr[ec72]::bstr::{impl#0}::to_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11142 ~ core[7d5a]::fmt::Display::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:165 ~ bstr[ec72]::bstr::{impl#0}::chars)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:532 ~ bstr[ec72]::impls::bstr::{impl#1}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:166 ~ bstr[ec72]::bstr::{impl#0}::char_indices)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:532 ~ bstr[ec72]::impls::bstr::{impl#1}::fmt).52), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:323:20: 323:22 (#0), res: Local(HirId(DefId(0:532 ~ bstr[ec72]::impls::bstr::{impl#1}::fmt).42)), segments: [PathSegment { ident: ch#0, hir_id: HirId(DefId(0:532 ~ bstr[ec72]::impls::bstr::{impl#1}::fmt).53), res: Local(HirId(DefId(0:532 ~ bstr[ec72]::impls::bstr::{impl#1}::fmt).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:323:20: 323:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:532 ~ bstr[ec72]::impls::bstr::{impl#1}::fmt).54), kind: Lit(Spanned { node: Char('�'), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:323:26: 323:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:323:26: 323:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11048 ~ core[7d5a]::fmt::rt::{impl#1}::new_upper_hex)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:5302 ~ core[7d5a]::char::methods::{impl#0}::escape_debug)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3892 ~ core[7d5a]::ops::try_trait::Try::branch)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11113 ~ core[7d5a]::fmt::{impl#2}::new_const)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3895 ~ core[7d5a]::ops::try_trait::FromResidual::from_residual)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:535 ~ bstr[ec72]::impls::bstr::{impl#2}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:538 ~ bstr[ec72]::impls::bstr::{impl#3}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:541 ~ bstr[ec72]::impls::bstr::{impl#4}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:544 ~ bstr[ec72]::impls::bstr::{impl#5}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:547 ~ bstr[ec72]::impls::bstr::{impl#6}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:550 ~ bstr[ec72]::impls::bstr::{impl#7}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:553 ~ bstr[ec72]::impls::bstr::{impl#8}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:555 ~ bstr[ec72]::impls::bstr::{impl#9}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:557 ~ bstr[ec72]::impls::bstr::{impl#10}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:559 ~ bstr[ec72]::impls::bstr::{impl#11}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bstr[ec72]::bstr::{impl#0}::from_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:561 ~ bstr[ec72]::impls::bstr::{impl#12}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bstr[ec72]::bstr::{impl#0}::from_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:563 ~ bstr[ec72]::impls::bstr::{impl#13}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bstr[ec72]::bstr::{impl#0}::from_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:565 ~ bstr[ec72]::impls::bstr::{impl#14}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bstr[ec72]::bstr::{impl#0}::from_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:567 ~ bstr[ec72]::impls::bstr::{impl#15}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:84 ~ bstr[ec72]::bstr::{impl#0}::from_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:569 ~ bstr[ec72]::impls::bstr::{impl#16}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:571 ~ bstr[ec72]::impls::bstr::{impl#17}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:573 ~ bstr[ec72]::impls::bstr::{impl#18}::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:575 ~ bstr[ec72]::impls::bstr::{impl#19}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:577 ~ bstr[ec72]::impls::bstr::{impl#20}::as_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:580 ~ bstr[ec72]::impls::bstr::{impl#21}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ bstr[ec72]::bstr::{impl#0}::from_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:583 ~ bstr[ec72]::impls::bstr::{impl#22}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:83 ~ bstr[ec72]::bstr::{impl#0}::from_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:14306 ~ core[7d5a]::str::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:586 ~ bstr[ec72]::impls::bstr::{impl#23}::from)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).6), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).7), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:510:13: 510:17 (#0), res: Local(HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).9), res: Local(HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:510:13: 510:17 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:510:18: 510:28 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:510:13: 510:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).10), kind: MethodCall(PathSegment { ident: as_bytes#0, hir_id: HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).11), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).12), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:510:32: 510:37 (#0), res: Local(HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).4)), segments: [PathSegment { ident: other#0, hir_id: HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).13), res: Local(HirId(DefId(0:589 ~ bstr[ec72]::impls::bstr::{impl#25}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:510:32: 510:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:510:38: 510:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/impls.rs:510:32: 510:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1076 ~ bstr[ec72]::impls::bstr::{impl#28}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1080 ~ bstr[ec72]::impls::bstr::{impl#29}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1084 ~ bstr[ec72]::impls::bstr::{impl#30}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1088 ~ bstr[ec72]::impls::bstr::{impl#31}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1092 ~ bstr[ec72]::impls::bstr::{impl#32}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1096 ~ bstr[ec72]::impls::bstr::{impl#33}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1100 ~ bstr[ec72]::impls::bstr::{impl#34}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1104 ~ bstr[ec72]::impls::bstr::{impl#35}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1108 ~ bstr[ec72]::impls::bstr::{impl#36}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1112 ~ bstr[ec72]::impls::bstr::{impl#37}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1116 ~ bstr[ec72]::impls::bstr::{impl#38}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1120 ~ bstr[ec72]::impls::bstr::{impl#39}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1124 ~ bstr[ec72]::impls::bstr::{impl#40}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1128 ~ bstr[ec72]::impls::bstr::{impl#41}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1132 ~ bstr[ec72]::impls::bstr::{impl#42}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1136 ~ bstr[ec72]::impls::bstr::{impl#43}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1140 ~ bstr[ec72]::impls::bstr::{impl#44}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1144 ~ bstr[ec72]::impls::bstr::{impl#45}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1148 ~ bstr[ec72]::impls::bstr::{impl#46}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1152 ~ bstr[ec72]::impls::bstr::{impl#47}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1156 ~ bstr[ec72]::impls::bstr::{impl#48}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1160 ~ bstr[ec72]::impls::bstr::{impl#49}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2966 ~ core[7d5a]::cmp::PartialEq::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:591 ~ bstr[ec72]::impls::bstr::{impl#26}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:593 ~ bstr[ec72]::impls::bstr::{impl#27}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9670 ~ core[7d5a]::option::{impl#0}::unwrap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1164 ~ bstr[ec72]::impls::bstr::{impl#50}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1168 ~ bstr[ec72]::impls::bstr::{impl#51}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1172 ~ bstr[ec72]::impls::bstr::{impl#52}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1176 ~ bstr[ec72]::impls::bstr::{impl#53}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1180 ~ bstr[ec72]::impls::bstr::{impl#54}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1184 ~ bstr[ec72]::impls::bstr::{impl#55}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1188 ~ bstr[ec72]::impls::bstr::{impl#56}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1192 ~ bstr[ec72]::impls::bstr::{impl#57}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1196 ~ bstr[ec72]::impls::bstr::{impl#58}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1200 ~ bstr[ec72]::impls::bstr::{impl#59}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1204 ~ bstr[ec72]::impls::bstr::{impl#60}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1208 ~ bstr[ec72]::impls::bstr::{impl#61}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1212 ~ bstr[ec72]::impls::bstr::{impl#62}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1216 ~ bstr[ec72]::impls::bstr::{impl#63}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1220 ~ bstr[ec72]::impls::bstr::{impl#64}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1224 ~ bstr[ec72]::impls::bstr::{impl#65}::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3008 ~ core[7d5a]::cmp::PartialOrd::partial_cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1230 ~ bstr[ec72]::io::{impl#2}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:609 ~ bstr[ec72]::io::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:341 ~ bstr[ec72]::bstring::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(2:3818 ~ std[e3cd]::io::BufRead::read_until)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:365 ~ bstr[ec72]::bstring::{impl#0}::as_mut_vec)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:610 ~ bstr[ec72]::io::trim_line)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:610 ~ bstr[ec72]::io::trim_line)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).5), kind: MethodCall(PathSegment { ident: last#0, hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).6), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).7), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:8: 197:12 (#0), res: Local(HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).2)), segments: [PathSegment { ident: line#0, hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).8), res: Local(HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:8: 197:12 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:13: 197:19 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:8: 197:19 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).9), kind: Call(Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).10), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:23: 197:27 (#0), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).11), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:23: 197:27 (#0) }, [Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).12), kind: Lit(Spanned { node: Byte(10), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:28: 197:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:28: 197:33 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:197:23: 197:34 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ bstr[ec72]::bstr::{impl#0}::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:387 ~ bstr[ec72]::bstring::{impl#0}::pop_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).21), kind: MethodCall(PathSegment { ident: last#0, hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).22), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:12: 199:16 (#0), res: Local(HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).2)), segments: [PathSegment { ident: line#0, hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).24), res: Local(HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:12: 199:16 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:17: 199:23 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:12: 199:23 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).25), kind: Call(Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:27: 199:31 (#0), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).27), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:27: 199:31 (#0) }, [Expr { hir_id: HirId(DefId(0:610 ~ bstr[ec72]::io::trim_line).28), kind: Lit(Spanned { node: Byte(13), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:32: 199:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:32: 199:37 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/io.rs:199:27: 199:38 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:199 ~ bstr[ec72]::bstr::{impl#0}::last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:387 ~ bstr[ec72]::bstring::{impl#0}::pop_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1237 ~ bstr[ec72]::search::prefilter::{impl#2}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1239 ~ bstr[ec72]::search::prefilter::{impl#3}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:624 ~ bstr[ec72]::search::prefilter::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:624 ~ bstr[ec72]::search::prefilter::{impl#0}::new).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:44:12: 44:25 (#0), res: Local(HirId(DefId(0:624 ~ bstr[ec72]::search::prefilter::{impl#0}::new).2)), segments: [PathSegment { ident: max_match_len#0, hir_id: HirId(DefId(0:624 ~ bstr[ec72]::search::prefilter::{impl#0}::new).6), res: Local(HirId(DefId(0:624 ~ bstr[ec72]::search::prefilter::{impl#0}::new).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:44:12: 44:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:624 ~ bstr[ec72]::search::prefilter::{impl#0}::new).7), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:44:29: 44:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:44:29: 44:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:625 ~ bstr[ec72]::search::prefilter::{impl#0}::inert)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:625 ~ bstr[ec72]::search::prefilter::{impl#0}::inert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:626 ~ bstr[ec72]::search::prefilter::{impl#0}::update)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).16), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:70:12: 70:16 (#0), res: Local(HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).18), res: Local(HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:70:12: 70:16 (#0) }, skips#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:70:12: 70:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).19), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:70:25: 70:39 (#0), res: Def(Struct, DefId(0:1231 ~ bstr[ec72]::search::prefilter::PrefilterState)), segments: [PathSegment { ident: PrefilterState#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).20), res: Def(Struct, DefId(0:1231 ~ bstr[ec72]::search::prefilter::PrefilterState)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:70:25: 70:39 (#0) }, PathSegment { ident: MIN_SKIPS#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).22), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:70:25: 70:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).32), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:12: 73:16 (#0), res: Local(HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).34), res: Local(HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:12: 73:16 (#0) }, skipped#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:12: 73:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).35), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:59: 73:60 (#0) }, Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).36), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:28: 73:42 (#0), res: Def(Struct, DefId(0:1231 ~ bstr[ec72]::search::prefilter::PrefilterState)), segments: [PathSegment { ident: PrefilterState#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).37), res: Def(Struct, DefId(0:1231 ~ bstr[ec72]::search::prefilter::PrefilterState)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:28: 73:42 (#0) }, PathSegment { ident: MIN_SKIP_BYTES#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).39), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:28: 73:58 (#0) }, Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).40), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:61: 73:65 (#0), res: Local(HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).42), res: Local(HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:61: 73:65 (#0) }, skips#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:61: 73:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:28: 73:71 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).36), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:28: 73:42 (#0), res: Def(Struct, DefId(0:1231 ~ bstr[ec72]::search::prefilter::PrefilterState)), segments: [PathSegment { ident: PrefilterState#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).37), res: Def(Struct, DefId(0:1231 ~ bstr[ec72]::search::prefilter::PrefilterState)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:28: 73:42 (#0) }, PathSegment { ident: MIN_SKIP_BYTES#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).39), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:28: 73:58 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).40), kind: Field(Expr { hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:61: 73:65 (#0), res: Local(HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).42), res: Local(HirId(DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:61: 73:65 (#0) }, skips#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:73:61: 73:71 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1248 ~ bstr[ec72]::search::prefilter::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1250 ~ bstr[ec72]::search::prefilter::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11206 ~ core[7d5a]::fmt::{impl#9}::debug_struct_fields_finish)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:630 ~ bstr[ec72]::search::prefilter::{impl#1}::prefilter_state)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:625 ~ bstr[ec72]::search::prefilter::{impl#0}::inert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:624 ~ bstr[ec72]::search::prefilter::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:631 ~ bstr[ec72]::search::prefilter::{impl#1}::inert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:631 ~ bstr[ec72]::search::prefilter::{impl#1}::inert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).43), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:160:12: 160:18 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).46), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:160:12: 160:18 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:160:19: 160:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:160:12: 160:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).47), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:160:28: 160:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:160:28: 160:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).67), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).68), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:12: 164:17 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).69), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:12: 164:17 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).71), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:12: 164:23 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:24: 164:29 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).38)), segments: [PathSegment { ident: rare2#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).73), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).38)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:24: 164:29 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:12: 164:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).74), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).75), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:33: 164:38 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).76), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:33: 164:38 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).78), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:33: 164:44 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:45: 164:50 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).80), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:45: 164:50 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:164:33: 164:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2180 ~ core[7d5a]::mem::swap)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2180 ~ core[7d5a]::mem::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8934 ~ core[7d5a]::iter::traits::iterator::Iterator::skip)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(3:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ bstr[ec72]::bstr::{impl#0}::bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).127), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).128), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:16: 169:21 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).129), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:16: 169:21 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).131), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:16: 169:27 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:28: 169:29 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).133), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:28: 169:29 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:16: 169:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).134), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).135), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).137), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:33: 169:38 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).136), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:33: 169:38 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).138), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:33: 169:44 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).139), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:45: 169:50 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).140), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:45: 169:50 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:169:33: 169:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).170), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:25: 174:27 (#0) }, Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:23: 174:24 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).172), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:23: 174:24 (#0) }, Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:28: 174:33 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).174), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:28: 174:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:23: 174:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).175), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:52: 174:53 (#0) }, Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).176), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).177), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:42 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).178), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:42 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).180), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:48 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:49: 174:50 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).182), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:49: 174:50 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:51 (#0) }, Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).183), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).184), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:54: 174:59 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).185), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:54: 174:59 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).187), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:54: 174:65 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).188), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:66: 174:71 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).38)), segments: [PathSegment { ident: rare2#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).189), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).38)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:66: 174:71 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:54: 174:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:72 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:23: 174:24 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).172), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:23: 174:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:28: 174:33 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).174), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:28: 174:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).176), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).177), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:42 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).178), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:42 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).180), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:48 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:49: 174:50 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).182), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).117)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:49: 174:50 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:37: 174:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).183), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).184), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:54: 174:59 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).185), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:54: 174:59 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).187), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:54: 174:65 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).188), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:66: 174:71 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).38)), segments: [PathSegment { ident: rare2#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).189), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).38)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:66: 174:71 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:174:54: 174:72 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).225), kind: Call(Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).226), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).228), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:12: 179:17 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).227), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:12: 179:17 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).229), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:12: 179:23 (#0) }, [Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).230), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:24: 179:29 (#0), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).231), res: Local(HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).27)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:24: 179:29 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:12: 179:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).232), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).234), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:33: 179:38 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).233), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:33: 179:38 (#0) }, PathSegment { ident: MAX_RANK#0, hir_id: HirId(DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward).235), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:179:33: 179:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:631 ~ bstr[ec72]::search::prefilter::{impl#1}::inert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:631 ~ bstr[ec72]::search::prefilter::{impl#1}::inert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).29), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).30), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:196:12: 196:18 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).32), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:196:12: 196:18 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:196:19: 196:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:196:12: 196:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).33), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:196:28: 196:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:196:28: 196:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).75), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).76), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).78), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:12: 201:17 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).77), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:12: 201:17 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).79), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:12: 201:23 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:24: 201:29 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).72)), segments: [PathSegment { ident: rare2#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).81), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:24: 201:29 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:12: 201:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).82), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).83), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).85), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:33: 201:38 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).84), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:33: 201:38 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).86), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:33: 201:44 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:45: 201:50 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).88), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:45: 201:50 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:201:33: 201:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2180 ~ core[7d5a]::mem::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2180 ~ core[7d5a]::mem::swap)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:8934 ~ core[7d5a]::iter::traits::iterator::Iterator::skip)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9103 ~ core[7d5a]::iter::traits::iterator::Iterator::rev)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:164 ~ bstr[ec72]::bstr::{impl#0}::bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).137), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).138), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:16: 206:21 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).139), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:16: 206:21 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).141), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:16: 206:27 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:28: 206:29 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).143), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:28: 206:29 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:16: 206:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).144), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).145), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:33: 206:38 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).146), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:33: 206:38 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).148), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:33: 206:44 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:45: 206:50 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).150), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:45: 206:50 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:206:33: 206:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).180), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:25: 211:27 (#0) }, Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:23: 211:24 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).182), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:23: 211:24 (#0) }, Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:28: 211:33 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).184), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:28: 211:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:23: 211:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).185), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:52: 211:53 (#0) }, Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).186), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).187), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).189), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:42 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).188), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:42 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).190), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:48 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:49: 211:50 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).192), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:49: 211:50 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:51 (#0) }, Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).193), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).194), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:54: 211:59 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).195), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:54: 211:59 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).197), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:54: 211:65 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:66: 211:71 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).72)), segments: [PathSegment { ident: rare2#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).199), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:66: 211:71 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:54: 211:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:72 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).181), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:23: 211:24 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).182), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:23: 211:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:28: 211:33 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).184), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:28: 211:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).186), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).187), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).189), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:42 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).188), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:42 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).190), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:48 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:49: 211:50 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).192), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:49: 211:50 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:37: 211:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).193), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).194), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).196), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:54: 211:59 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).195), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:54: 211:59 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).197), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:54: 211:65 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).198), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:66: 211:71 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).72)), segments: [PathSegment { ident: rare2#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).199), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:66: 211:71 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:211:54: 211:72 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).235), kind: Call(Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).236), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:12: 216:17 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).237), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:12: 216:17 (#0) }, PathSegment { ident: rank#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).239), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:12: 216:23 (#0) }, [Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:24: 216:29 (#0), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), segments: [PathSegment { ident: rare1#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).241), res: Local(HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).57)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:24: 216:29 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:12: 216:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).242), kind: Path(TypeRelative(Ty { hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).244), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:33: 216:38 (#0), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), segments: [PathSegment { ident: Freqy#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).243), res: Def(Struct, DefId(0:1240 ~ bstr[ec72]::search::prefilter::Freqy)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:33: 216:38 (#0) }, PathSegment { ident: MAX_RANK#0, hir_id: HirId(DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse).245), res: Err, args: None, infer_args: true })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:216:33: 216:48 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:631 ~ bstr[ec72]::search::prefilter::{impl#1}::inert)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ bstr[ec72]::bstr::{impl#0}::find_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:626 ~ bstr[ec72]::search::prefilter::{impl#0}::update)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).79), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:255:16: 255:17 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).80), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:255:16: 255:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).81), kind: Field(Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).82), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:255:20: 255:24 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).83), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:255:20: 255:24 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:255:20: 255:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).97), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:36: 262:37 (#0) }, Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:34: 262:35 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).99), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:34: 262:35 (#0) }, Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).100), kind: Field(Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:38: 262:42 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).102), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:38: 262:42 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:38: 262:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:34: 262:49 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).103), kind: Field(Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).104), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:52: 262:56 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).105), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:52: 262:56 (#0) }, rare2i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:52: 262:63 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:34: 262:35 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).99), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:34: 262:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).100), kind: Field(Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).101), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:38: 262:42 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).102), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:38: 262:42 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:262:38: 262:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).110), kind: MethodCall(PathSegment { ident: get#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).111), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:16: 263:24 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).6)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).113), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:16: 263:24 (#0) }, [Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:29: 263:43 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).107)), segments: [PathSegment { ident: aligned_rare2i#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).115), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).107)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:29: 263:43 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:25: 263:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:16: 263:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).116), kind: Call(Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).117), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:48: 263:52 (#0), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).118), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:48: 263:52 (#0) }, [Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).119), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).120), kind: Field(Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:54: 263:58 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).122), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:54: 263:58 (#0) }, rare2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:54: 263:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:53: 263:64 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:263:48: 263:65 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ bstr[ec72]::bstr::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).139), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:269:25: 269:26 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).32)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).140), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:269:25: 269:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).141), kind: Field(Expr { hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:269:29: 269:33 (#0), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).143), res: Local(HirId(DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:269:29: 269:33 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:269:29: 269:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ bstr[ec72]::bstr::{impl#0}::rfind_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:626 ~ bstr[ec72]::search::prefilter::{impl#0}::update)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).74), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:304:37: 304:38 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).75), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:304:37: 304:38 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).76), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:304:41: 304:46 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).65)), segments: [PathSegment { ident: found#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).77), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).65)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:304:41: 304:46 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).85), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:32: 311:33 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).86), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:18: 311:19 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:17 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).88), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:17 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).89), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:24 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).91), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:24 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:31 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).92), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:34: 311:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:34: 311:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).93), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).94), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).95), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:38: 311:46 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).6)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).96), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:38: 311:46 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:47: 311:52 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:38: 311:52 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).86), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:18: 311:19 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:17 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).88), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:17 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).89), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:24 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).91), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:24 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).92), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:34: 311:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:34: 311:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).87), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:17 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).88), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:16: 311:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).89), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).90), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:24 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).91), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:24 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:311:20: 311:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:25395 ~ core[7d5a]::num::{impl#11}::checked_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:317:34: 317:35 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).109), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:317:34: 317:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).110), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).111), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:317:38: 317:42 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).112), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:317:38: 317:42 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:317:38: 317:49 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).130), kind: MethodCall(PathSegment { ident: get#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).131), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:16: 321:24 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).6)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).133), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:16: 321:24 (#0) }, [Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:29: 321:36 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).127)), segments: [PathSegment { ident: aligned#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).135), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).127)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:29: 321:36 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:25: 321:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:16: 321:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).136), kind: Call(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).137), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:41: 321:45 (#0), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), segments: [PathSegment { ident: Some#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).138), res: Def(Ctor(Variant, Fn), DefId(3:37174 ~ core[7d5a]::option::Option::Some::{constructor#0})), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:41: 321:45 (#0) }, [Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).139), kind: AddrOf(Ref, Not, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).140), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).141), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:47: 321:51 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).142), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:47: 321:51 (#0) }, rare2#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:47: 321:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:46: 321:57 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:321:41: 321:58 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:191 ~ bstr[ec72]::bstr::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Adt({"0": Ty { property: FlowPair(Universal, Universal), kind: Infer }}) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).154), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:27: 326:28 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:25: 326:26 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).156), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:25: 326:26 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).157), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).158), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:29: 326:33 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).159), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:29: 326:33 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:29: 326:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:25: 326:40 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).160), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:43: 326:44 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:43: 326:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:25: 326:26 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).156), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:25: 326:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).157), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).158), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:29: 326:33 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).159), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:29: 326:33 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:326:29: 326:40 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).175), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:16: 332:17 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:14: 332:15 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).177), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:14: 332:15 (#0) }, Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).178), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:18: 332:22 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).180), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:18: 332:22 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:18: 332:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:14: 332:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).181), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:32: 332:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:32: 332:33 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:14: 332:15 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).177), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).35)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:14: 332:15 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).178), kind: Field(Expr { hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:18: 332:22 (#0), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).180), res: Local(HirId(DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:18: 332:22 (#0) }, rare1i#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/prefilter.rs:332:18: 332:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:636 ~ bstr[ec72]::search::prefilter::{impl#1}::rank)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1259 ~ bstr[ec72]::search::twoway::{impl#4}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1262 ~ bstr[ec72]::search::twoway::{impl#5}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11202 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field4_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:632 ~ bstr[ec72]::search::prefilter::{impl#1}::forward)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:431 ~ bstr[ec72]::cow::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).76), kind: Field(Expr { hir_id: HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:68:16: 68:26 (#0), res: Local(HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).59)), segments: [PathSegment { ident: min_suffix#0, hir_id: HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).78), res: Local(HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:68:16: 68:26 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:68:16: 68:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).79), kind: Field(Expr { hir_id: HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:68:33: 68:43 (#0), res: Local(HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).72)), segments: [PathSegment { ident: max_suffix#0, hir_id: HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).81), res: Local(HirId(DefId(0:646 ~ bstr[ec72]::search::twoway::{impl#0}::forward).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:68:33: 68:43 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:68:33: 68:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:431 ~ bstr[ec72]::cow::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:633 ~ bstr[ec72]::search::prefilter::{impl#1}::reverse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:431 ~ bstr[ec72]::cow::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).76), kind: Field(Expr { hir_id: HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).77), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:94:16: 94:26 (#0), res: Local(HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).59)), segments: [PathSegment { ident: min_suffix#0, hir_id: HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).78), res: Local(HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).59)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:94:16: 94:26 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:94:16: 94:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).79), kind: Field(Expr { hir_id: HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).80), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:94:33: 94:43 (#0), res: Local(HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).72)), segments: [PathSegment { ident: max_suffix#0, hir_id: HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).81), res: Local(HirId(DefId(0:647 ~ bstr[ec72]::search::twoway::{impl#0}::reverse).72)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:94:33: 94:43 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:94:33: 94:47 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:431 ~ bstr[ec72]::cow::{impl#1}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:648 ~ bstr[ec72]::search::twoway::{impl#0}::prefilter_state)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:630 ~ bstr[ec72]::search::prefilter::{impl#1}::prefilter_state)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:649 ~ bstr[ec72]::search::twoway::{impl#0}::needle)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bstr[ec72]::cow::{impl#1}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:650 ~ bstr[ec72]::search::twoway::{impl#0}::into_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:435 ~ bstr[ec72]::cow::{impl#1}::into_owned)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:651 ~ bstr[ec72]::search::twoway::{impl#0}::find)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:648 ~ bstr[ec72]::search::twoway::{impl#0}::prefilter_state)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:652 ~ bstr[ec72]::search::twoway::{impl#0}::rfind)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:648 ~ bstr[ec72]::search::twoway::{impl#0}::prefilter_state)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).24), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).25), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:19: 164:27 (#0), res: Local(HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).6)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).27), res: Local(HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:19: 164:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:28: 164:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:19: 164:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).28), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).29), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).30), kind: Field(Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:36: 164:40 (#0), res: Local(HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).32), res: Local(HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:36: 164:40 (#0) }, needle#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:36: 164:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:48: 164:53 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:164:36: 164:53 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).42), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).43), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).44), kind: Field(Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:166:19: 166:23 (#0), res: Local(HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).46), res: Local(HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:166:19: 166:23 (#0) }, needle#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:166:19: 166:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:166:31: 166:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:166:19: 166:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:653 ~ bstr[ec72]::search::twoway::{impl#0}::find_with).47), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:166:40: 166:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:166:40: 166:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:131 ~ bstr[ec72]::bstr::{impl#0}::find_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:655 ~ bstr[ec72]::search::twoway::{impl#0}::find_small)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:657 ~ bstr[ec72]::search::twoway::{impl#0}::find_large)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).27), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:19: 191:27 (#0), res: Local(HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).6)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).30), res: Local(HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:19: 191:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:28: 191:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:19: 191:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).31), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).32), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).33), kind: Field(Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:36: 191:40 (#0), res: Local(HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).35), res: Local(HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:36: 191:40 (#0) }, needle#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:36: 191:47 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:48: 191:53 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:191:36: 191:53 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).45), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).46), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).47), kind: Field(Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:193:19: 193:23 (#0), res: Local(HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).49), res: Local(HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:193:19: 193:23 (#0) }, needle#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:193:19: 193:30 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:193:31: 193:36 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:193:19: 193:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:654 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_with).50), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:193:40: 193:41 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:193:40: 193:41 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:132 ~ bstr[ec72]::bstr::{impl#0}::rfind_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:659 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:661 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:655 ~ bstr[ec72]::search::twoway::{impl#0}::find_small)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bstr[ec72]::cow::{impl#1}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).29), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:19: 242:20 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:15: 242:18 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).31), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:15: 242:18 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).32), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).33), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:21: 242:27 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).35), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:21: 242:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:28: 242:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:21: 242:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:15: 242:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).36), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).37), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:37: 242:45 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).39), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:37: 242:45 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:46: 242:51 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:37: 242:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:15: 242:18 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).31), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:15: 242:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).32), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).33), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:21: 242:27 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).35), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:21: 242:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:28: 242:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:242:21: 242:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).55), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:244:16: 244:25 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).6)), segments: [PathSegment { ident: prefilter#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).56), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:244:16: 244:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).57), kind: MethodCall(PathSegment { ident: is_effective#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).58), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:244:29: 244:37 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).4)), segments: [PathSegment { ident: prestate#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).60), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:244:29: 244:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:244:38: 244:52 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:244:29: 244:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).109), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:32: 251:33 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:28: 251:31 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).111), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:28: 251:31 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).112), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).113), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:34: 251:40 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).115), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:34: 251:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:41: 251:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:34: 251:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:28: 251:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).116), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).117), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).118), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:49: 251:57 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).119), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:49: 251:57 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:58: 251:63 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:49: 251:63 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).110), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:28: 251:31 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).111), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:28: 251:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).112), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).113), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:34: 251:40 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).115), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:34: 251:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:41: 251:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:251:34: 251:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).133), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:21: 257:22 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:19: 257:20 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).135), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:19: 257:20 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).136), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).137), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:23: 257:29 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).139), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:23: 257:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:30: 257:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:23: 257:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:19: 257:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).140), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:49: 257:51 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).141), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:39: 257:45 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).143), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:39: 257:45 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:46: 257:47 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).145), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:46: 257:47 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:45: 257:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:39: 257:48 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).146), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:52: 257:60 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).148), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:52: 257:60 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).149), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:65: 257:66 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:61: 257:64 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).151), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:61: 257:64 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:67: 257:68 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).153), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:67: 257:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:61: 257:68 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:60: 257:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:52: 257:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:39: 257:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:19: 257:20 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).135), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:19: 257:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).136), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).137), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).138), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:23: 257:29 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).139), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:23: 257:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:30: 257:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:23: 257:35 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).141), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:39: 257:45 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).143), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:39: 257:45 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:46: 257:47 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).145), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:46: 257:47 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:45: 257:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:39: 257:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).146), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:52: 257:60 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).148), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:52: 257:60 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).149), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:65: 257:66 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:61: 257:64 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).151), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:61: 257:64 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).152), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:67: 257:68 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).153), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:67: 257:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:61: 257:68 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:60: 257:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:257:52: 257:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).171), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:260:16: 260:17 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).172), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:260:16: 260:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).173), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).174), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:260:20: 260:26 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).176), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:260:20: 260:26 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:260:27: 260:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:260:20: 260:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).182), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:26: 261:27 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:24: 261:25 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).184), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:24: 261:25 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).185), kind: Field(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:28: 261:32 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).187), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:28: 261:32 (#0) }, critical_pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:28: 261:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:24: 261:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).188), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:48: 261:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:48: 261:49 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:24: 261:25 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).184), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).52)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:24: 261:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).185), kind: Field(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:28: 261:32 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).187), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:28: 261:32 (#0) }, critical_pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:261:28: 261:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).206), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:25: 265:26 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:23: 265:24 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).208), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:23: 265:24 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:27: 265:32 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).210), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:27: 265:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:23: 265:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).211), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:46: 265:48 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).212), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).213), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:36: 265:42 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).214), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:36: 265:42 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).215), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:43: 265:44 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).216), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:43: 265:44 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:42: 265:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:36: 265:45 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).217), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).218), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:49: 265:57 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).219), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:49: 265:57 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).220), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:62: 265:63 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:58: 265:61 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).222), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:58: 265:61 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:64: 265:65 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).224), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:64: 265:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:58: 265:65 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:57: 265:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:49: 265:66 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:36: 265:66 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).207), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:23: 265:24 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).208), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:23: 265:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).209), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:27: 265:32 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).210), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:27: 265:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).212), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).213), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:36: 265:42 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).214), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:36: 265:42 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).215), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:43: 265:44 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).216), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:43: 265:44 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:42: 265:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:36: 265:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).217), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).218), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:49: 265:57 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).219), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:49: 265:57 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).220), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:62: 265:63 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:58: 265:61 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).222), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:58: 265:61 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:64: 265:65 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).224), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:64: 265:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:58: 265:65 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:57: 265:66 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:265:49: 265:66 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).242), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:22: 268:24 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).243), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:20: 268:21 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).244), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:20: 268:21 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).245), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:25: 268:30 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).246), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:25: 268:30 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:20: 268:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).247), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:48: 268:50 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).248), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).249), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:34: 268:40 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).250), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:34: 268:40 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).251), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:41: 268:46 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).252), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:41: 268:46 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:40: 268:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:34: 268:47 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).253), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).254), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:51: 268:59 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).255), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:51: 268:59 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).256), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:64: 268:65 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).257), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:60: 268:63 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).258), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:60: 268:63 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).259), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:66: 268:71 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).260), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:66: 268:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:60: 268:71 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:59: 268:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:51: 268:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:34: 268:72 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).243), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:20: 268:21 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).244), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).203)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:20: 268:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).245), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:25: 268:30 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).246), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:25: 268:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).248), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).249), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:34: 268:40 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).250), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:34: 268:40 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).251), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:41: 268:46 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).252), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:41: 268:46 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:40: 268:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:34: 268:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).253), kind: Index(Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).254), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:51: 268:59 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).255), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:51: 268:59 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).256), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:64: 268:65 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).257), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:60: 268:63 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).258), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:60: 268:63 (#0) }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).259), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:66: 268:71 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).260), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).26)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:66: 268:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:60: 268:71 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:59: 268:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:268:51: 268:72 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).282), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).283), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).284), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:272:25: 272:31 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).285), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:272:25: 272:31 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:272:32: 272:37 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:272:25: 272:37 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).286), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:272:40: 272:46 (#0), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).10)), segments: [PathSegment { ident: period#0, hir_id: HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).287), res: Local(HirId(DefId(0:656 ~ bstr[ec72]::search::twoway::{impl#0}::find_small_imp).10)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:272:40: 272:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:657 ~ bstr[ec72]::search::twoway::{impl#0}::find_large)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:434 ~ bstr[ec72]::cow::{impl#1}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).25), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:19: 302:20 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:15: 302:18 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).27), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:15: 302:18 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).28), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).29), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:21: 302:27 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).31), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:21: 302:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:28: 302:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:21: 302:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:15: 302:33 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).32), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).33), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).34), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:37: 302:45 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).35), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:37: 302:45 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:46: 302:51 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:37: 302:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:15: 302:18 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).27), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:15: 302:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).28), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).29), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).30), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:21: 302:27 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).31), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:21: 302:27 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:28: 302:33 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:302:21: 302:33 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:304:16: 304:25 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).6)), segments: [PathSegment { ident: prefilter#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).46), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:304:16: 304:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).47), kind: MethodCall(PathSegment { ident: is_effective#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).48), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:304:29: 304:37 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).4)), segments: [PathSegment { ident: prestate#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).50), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:304:29: 304:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:304:38: 304:52 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:304:29: 304:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:634 ~ bstr[ec72]::search::prefilter::{impl#1}::find_candidate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).87), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:32: 309:33 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:28: 309:31 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).89), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:28: 309:31 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).90), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).91), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:34: 309:40 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).93), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:34: 309:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:41: 309:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:34: 309:46 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:28: 309:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).94), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).95), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:49: 309:57 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).97), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:49: 309:57 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:58: 309:63 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:49: 309:63 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).88), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:28: 309:31 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).89), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:28: 309:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).90), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).91), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).92), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:34: 309:40 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).93), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:34: 309:40 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:41: 309:46 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:309:34: 309:46 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).111), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:21: 315:22 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:19: 315:20 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).113), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:19: 315:20 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).114), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).115), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:23: 315:29 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).117), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:23: 315:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:30: 315:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:23: 315:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:19: 315:35 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).118), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:49: 315:51 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).119), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:39: 315:45 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).121), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:39: 315:45 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:46: 315:47 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).123), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:46: 315:47 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:45: 315:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:39: 315:48 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).124), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:52: 315:60 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).126), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:52: 315:60 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).127), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:65: 315:66 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:61: 315:64 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).129), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:61: 315:64 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:67: 315:68 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).131), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:67: 315:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:61: 315:68 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:60: 315:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:52: 315:69 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:39: 315:69 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).112), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:19: 315:20 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).113), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:19: 315:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).114), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).115), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:23: 315:29 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).117), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:23: 315:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:30: 315:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:23: 315:35 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).119), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:39: 315:45 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).121), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:39: 315:45 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).122), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:46: 315:47 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).123), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:46: 315:47 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:45: 315:48 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:39: 315:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).124), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:52: 315:60 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).126), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:52: 315:60 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).127), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:65: 315:66 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).128), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:61: 315:64 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).129), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:61: 315:64 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).130), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:67: 315:68 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).131), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:67: 315:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:61: 315:68 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:60: 315:69 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:315:52: 315:69 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:318:16: 318:17 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).150), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:318:16: 318:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).151), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).152), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:318:20: 318:26 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).154), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:318:20: 318:26 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:318:27: 318:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:318:20: 318:32 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).160), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:26: 319:27 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).161), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:24: 319:25 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).162), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:24: 319:25 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).163), kind: Field(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:28: 319:32 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).165), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:28: 319:32 (#0) }, critical_pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:28: 319:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:24: 319:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).166), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:48: 319:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:48: 319:49 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).161), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:24: 319:25 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).162), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).42)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:24: 319:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).163), kind: Field(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:28: 319:32 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).165), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:28: 319:32 (#0) }, critical_pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:319:28: 319:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).179), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:25: 322:26 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:23: 322:24 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).181), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:23: 322:24 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).182), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:27: 322:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:27: 322:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:23: 322:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).183), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:42: 322:44 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).184), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:32: 322:38 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).186), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:32: 322:38 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:39: 322:40 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).188), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:39: 322:40 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:38: 322:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:32: 322:41 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).189), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).190), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:45: 322:53 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).191), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:45: 322:53 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).192), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:58: 322:59 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).193), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:54: 322:57 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).194), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:54: 322:57 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).195), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:60: 322:61 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).196), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:60: 322:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:54: 322:61 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:53: 322:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:45: 322:62 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:32: 322:62 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:23: 322:24 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).181), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:23: 322:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).182), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:27: 322:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:27: 322:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).184), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).185), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:32: 322:38 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).186), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:32: 322:38 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).187), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:39: 322:40 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).188), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:39: 322:40 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:38: 322:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:32: 322:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).189), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).190), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:45: 322:53 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).191), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:45: 322:53 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).192), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:58: 322:59 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).193), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:54: 322:57 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).194), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:54: 322:57 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).195), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:60: 322:61 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).196), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:60: 322:61 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:54: 322:61 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:53: 322:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:322:45: 322:62 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).214), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:22: 325:24 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).215), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:20: 325:21 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).216), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:20: 325:21 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).217), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:25: 325:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:25: 325:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:20: 325:26 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).218), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:40: 325:42 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).219), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:30: 325:36 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).221), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:30: 325:36 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).222), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:37: 325:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:37: 325:38 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:36: 325:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:30: 325:39 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).223), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:43: 325:51 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).225), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:43: 325:51 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:52: 325:55 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).227), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:52: 325:55 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:51: 325:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:43: 325:56 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:30: 325:56 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).215), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:20: 325:21 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).216), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).176)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:20: 325:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).217), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:25: 325:26 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:25: 325:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).219), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).220), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:30: 325:36 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).221), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:30: 325:36 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).222), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:37: 325:38 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:37: 325:38 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:36: 325:39 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:30: 325:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).223), kind: Index(Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).224), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:43: 325:51 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).225), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:43: 325:51 (#0) }, Expr { hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).226), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:52: 325:55 (#0), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).227), res: Local(HirId(DefId(0:658 ~ bstr[ec72]::search::twoway::{impl#0}::find_large_imp).22)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:52: 325:55 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:51: 325:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:325:43: 325:56 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:659 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).40), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:360:15: 360:18 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).41), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:360:15: 360:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:360:22: 360:26 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).43), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:360:22: 360:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:362:16: 362:25 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).6)), segments: [PathSegment { ident: prefilter#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).60), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:362:16: 362:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).61), kind: MethodCall(PathSegment { ident: is_effective#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).62), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:362:29: 362:37 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).4)), segments: [PathSegment { ident: prestate#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).64), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:362:29: 362:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:362:38: 362:52 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:362:29: 362:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:369:28: 369:31 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).115), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:369:28: 369:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:369:34: 369:38 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).117), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:369:34: 369:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).131), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:21: 375:22 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:19: 375:20 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).133), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:19: 375:20 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).134), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:23: 375:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:23: 375:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:19: 375:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).135), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:42: 375:44 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).136), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).137), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:28: 375:34 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).138), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:28: 375:34 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).139), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:37: 375:38 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:35: 375:36 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).141), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:35: 375:36 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).142), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:39: 375:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:39: 375:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:35: 375:40 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:34: 375:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:28: 375:41 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).143), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:45: 375:53 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).145), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:45: 375:53 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).146), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:69: 375:70 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).147), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:65: 375:66 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).148), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:58: 375:59 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:57 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).150), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:57 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:60: 375:64 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).152), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:60: 375:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:64 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:67: 375:68 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).154), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:67: 375:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:68 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).155), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:71: 375:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:71: 375:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:72 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:53: 375:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:45: 375:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:28: 375:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:19: 375:20 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).133), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:19: 375:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).134), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:23: 375:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:23: 375:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).136), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).137), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:28: 375:34 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).138), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:28: 375:34 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).139), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:37: 375:38 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).140), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:35: 375:36 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).141), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:35: 375:36 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).142), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:39: 375:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:39: 375:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:35: 375:40 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:34: 375:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:28: 375:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).143), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).144), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:45: 375:53 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).145), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:45: 375:53 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).146), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:69: 375:70 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).147), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:65: 375:66 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).148), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:58: 375:59 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).149), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:57 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).150), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:57 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).151), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:60: 375:64 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).152), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:60: 375:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:64 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).153), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:67: 375:68 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).154), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:67: 375:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:68 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).155), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:71: 375:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:71: 375:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:54: 375:72 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:53: 375:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:375:45: 375:73 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).173), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:18: 378:19 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).174), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:16: 378:17 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).175), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:16: 378:17 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).176), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:20: 378:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:20: 378:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:16: 378:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).177), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:35: 378:37 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).178), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:25: 378:31 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).180), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:25: 378:31 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).181), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:32: 378:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:32: 378:33 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:31: 378:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:25: 378:34 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).182), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:38: 378:46 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).184), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:38: 378:46 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).185), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:51: 378:52 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:47: 378:50 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).187), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:47: 378:50 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).188), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:53: 378:57 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).189), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:53: 378:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:47: 378:57 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:46: 378:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:38: 378:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:25: 378:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).174), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:16: 378:17 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).175), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:16: 378:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).176), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:20: 378:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:20: 378:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).178), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).179), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:25: 378:31 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).180), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:25: 378:31 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).181), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:32: 378:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:32: 378:33 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:31: 378:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:25: 378:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).182), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).183), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:38: 378:46 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).184), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:38: 378:46 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).185), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:51: 378:52 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).186), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:47: 378:50 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).187), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:47: 378:50 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).188), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:53: 378:57 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).189), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:53: 378:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:47: 378:57 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:46: 378:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:378:38: 378:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).195), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:42: 379:43 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).196), kind: Field(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:24: 379:28 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).198), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:24: 379:28 (#0) }, critical_pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:24: 379:41 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:44: 379:45 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).200), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:44: 379:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:24: 379:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).201), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:48: 379:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:48: 379:49 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).196), kind: Field(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:24: 379:28 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).198), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:24: 379:28 (#0) }, critical_pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:24: 379:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:44: 379:45 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).200), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:379:44: 379:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).220), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:25: 383:26 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:23: 383:24 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).222), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:23: 383:24 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:27: 383:32 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).37)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).224), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:27: 383:32 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:23: 383:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).225), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:46: 383:48 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).226), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).227), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:36: 383:42 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).228), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:36: 383:42 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).229), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:43: 383:44 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).230), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:43: 383:44 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:42: 383:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:36: 383:45 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).231), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:49: 383:57 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).233), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:49: 383:57 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).234), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:69: 383:70 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).235), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:62: 383:63 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).236), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:58: 383:61 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).237), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:58: 383:61 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:64: 383:68 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).239), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:64: 383:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:58: 383:68 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:71: 383:72 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).241), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:71: 383:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:58: 383:72 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:57: 383:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:49: 383:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:36: 383:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).221), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:23: 383:24 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).222), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:23: 383:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).223), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:27: 383:32 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).37)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).224), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:27: 383:32 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).226), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).227), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:36: 383:42 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).228), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:36: 383:42 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).229), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:43: 383:44 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).230), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:43: 383:44 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:42: 383:45 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:36: 383:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).231), kind: Index(Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).232), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:49: 383:57 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).233), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:49: 383:57 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).234), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:69: 383:70 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).235), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:62: 383:63 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).236), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:58: 383:61 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).237), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:58: 383:61 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).238), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:64: 383:68 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).239), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:64: 383:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:58: 383:68 (#0) }, Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).240), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:71: 383:72 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).241), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:71: 383:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:58: 383:72 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:57: 383:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:383:49: 383:73 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).259), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:386:20: 386:21 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).260), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).217)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:386:20: 386:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).261), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:386:25: 386:30 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).37)), segments: [PathSegment { ident: shift#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).262), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).37)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:386:25: 386:30 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).269), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:387:33: 387:36 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).270), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:387:33: 387:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).271), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:387:39: 387:43 (#0), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).272), res: Local(HirId(DefId(0:660 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_small_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:387:39: 387:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:661 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:421:15: 421:18 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).36), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:421:15: 421:18 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).37), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:421:22: 421:26 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).38), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:421:22: 421:26 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).42), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:422:16: 422:25 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).6)), segments: [PathSegment { ident: prefilter#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).43), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:422:16: 422:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).44), kind: MethodCall(PathSegment { ident: is_effective#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).45), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).46), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:422:29: 422:37 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).4)), segments: [PathSegment { ident: prestate#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).47), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:422:29: 422:37 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:422:38: 422:52 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:422:29: 422:52 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:627 ~ bstr[ec72]::search::prefilter::{impl#0}::is_effective)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:635 ~ bstr[ec72]::search::prefilter::{impl#1}::rfind_candidate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).84), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:427:28: 427:31 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).85), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:427:28: 427:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).86), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:427:34: 427:38 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).87), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:427:34: 427:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).107), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:21: 435:22 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:19: 435:20 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).109), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:19: 435:20 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).110), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:23: 435:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:23: 435:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:19: 435:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).111), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:42: 435:44 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).112), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:28: 435:34 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).114), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:28: 435:34 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).115), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:37: 435:38 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:35: 435:36 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).117), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:35: 435:36 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).118), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:39: 435:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:39: 435:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:35: 435:40 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:34: 435:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:28: 435:41 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).119), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:45: 435:53 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).121), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:45: 435:53 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).122), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:69: 435:70 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).123), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:65: 435:66 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).124), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:58: 435:59 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:57 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).126), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:57 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:60: 435:64 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).128), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:60: 435:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:64 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:67: 435:68 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).130), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:67: 435:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:68 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).131), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:71: 435:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:71: 435:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:72 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:53: 435:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:45: 435:73 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:28: 435:73 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).108), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:19: 435:20 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).109), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:19: 435:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).110), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:23: 435:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:23: 435:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).112), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).113), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:28: 435:34 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).114), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:28: 435:34 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).115), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:37: 435:38 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:35: 435:36 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).117), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:35: 435:36 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).118), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:39: 435:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:39: 435:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:35: 435:40 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:34: 435:41 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:28: 435:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).119), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).120), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:45: 435:53 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).121), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:45: 435:53 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).122), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:69: 435:70 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).123), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:65: 435:66 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).124), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:58: 435:59 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:57 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).126), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:57 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).127), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:60: 435:64 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).128), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:60: 435:64 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:64 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).129), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:67: 435:68 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).130), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:67: 435:68 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:68 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).131), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:71: 435:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:71: 435:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:54: 435:72 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:53: 435:73 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:435:45: 435:73 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).149), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:18: 438:19 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:16: 438:17 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).151), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:16: 438:17 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).152), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:20: 438:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:20: 438:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:16: 438:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).153), kind: Binary(Spanned { node: Ne, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:35: 438:37 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).154), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:25: 438:31 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).156), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:25: 438:31 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).157), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:32: 438:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:32: 438:33 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:31: 438:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:25: 438:34 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).158), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:38: 438:46 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).160), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:38: 438:46 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).161), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:51: 438:52 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:47: 438:50 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).163), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:47: 438:50 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:53: 438:57 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).165), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:53: 438:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:47: 438:57 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:46: 438:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:38: 438:58 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:25: 438:58 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).150), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:16: 438:17 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).151), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:16: 438:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).152), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:20: 438:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:20: 438:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).154), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).155), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:25: 438:31 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).156), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:25: 438:31 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).157), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:32: 438:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:32: 438:33 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:31: 438:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:25: 438:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).158), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).159), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:38: 438:46 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).160), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:38: 438:46 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).161), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:51: 438:52 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:47: 438:50 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).163), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:47: 438:50 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:53: 438:57 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).165), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:53: 438:57 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:47: 438:57 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:46: 438:58 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:438:38: 438:58 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).171), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:42: 439:43 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).172), kind: Field(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:24: 439:28 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).174), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:24: 439:28 (#0) }, critical_pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:24: 439:41 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:44: 439:45 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).176), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:44: 439:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:24: 439:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).177), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:48: 439:49 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:48: 439:49 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).172), kind: Field(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).173), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:24: 439:28 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).174), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:24: 439:28 (#0) }, critical_pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:24: 439:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).175), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:44: 439:45 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).176), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).104)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:439:44: 439:45 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).190), kind: Binary(Spanned { node: Lt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:25: 442:26 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:23: 442:24 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).192), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:23: 442:24 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).193), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:27: 442:31 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).194), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:27: 442:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:23: 442:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).195), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:45: 442:47 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).196), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:35: 442:41 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).198), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:35: 442:41 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:42: 442:43 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).200), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:42: 442:43 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:41: 442:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:35: 442:44 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).201), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).202), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:48: 442:56 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).203), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:48: 442:56 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).204), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:68: 442:69 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).205), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:61: 442:62 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).206), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:57: 442:60 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).207), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:57: 442:60 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).208), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:63: 442:67 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).209), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:63: 442:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:57: 442:67 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).210), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:70: 442:71 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).211), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:70: 442:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:57: 442:71 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:56: 442:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:48: 442:72 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:35: 442:72 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).191), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:23: 442:24 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).192), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:23: 442:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).193), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:27: 442:31 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).194), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:27: 442:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).196), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).197), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:35: 442:41 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).198), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:35: 442:41 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).199), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:42: 442:43 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).200), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:42: 442:43 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:41: 442:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:35: 442:44 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).201), kind: Index(Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).202), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:48: 442:56 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), segments: [PathSegment { ident: haystack#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).203), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:48: 442:56 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).204), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:68: 442:69 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).205), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:61: 442:62 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).206), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:57: 442:60 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).207), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:57: 442:60 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).208), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:63: 442:67 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).209), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:63: 442:67 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:57: 442:67 (#0) }, Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).210), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:70: 442:71 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).211), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:70: 442:71 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:57: 442:71 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:56: 442:72 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:442:48: 442:72 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).229), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:445:20: 445:21 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), segments: [PathSegment { ident: j#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).230), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).187)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:445:20: 445:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).231), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:445:25: 445:29 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).232), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:445:25: 445:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).239), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:446:33: 446:36 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), segments: [PathSegment { ident: pos#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).240), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).32)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:446:33: 446:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).241), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:446:39: 446:43 (#0), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), segments: [PathSegment { ident: nlen#0, hir_id: HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).242), res: Local(HirId(DefId(0:662 ~ bstr[ec72]::search::twoway::{impl#0}::rfind_large_imp).25)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:446:39: 446:43 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1269 ~ bstr[ec72]::search::twoway::{impl#6}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1271 ~ bstr[ec72]::search::twoway::{impl#7}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).15), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:503:44: 503:50 (#0), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).18), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:503:44: 503:50 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:503:51: 503:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:503:44: 503:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:503:59: 503:71 (#0), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).6)), segments: [PathSegment { ident: critical_pos#0, hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).20), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:503:59: 503:71 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).25), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:25: 504:26 (#0) }, Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:12: 504:24 (#0), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).6)), segments: [PathSegment { ident: critical_pos#0, hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).27), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:12: 504:24 (#0) }, Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).28), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:27: 504:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:27: 504:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:12: 504:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).29), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).30), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:32: 504:38 (#0), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).32), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:32: 504:38 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:39: 504:44 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:32: 504:44 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:12: 504:24 (#0), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).6)), segments: [PathSegment { ident: critical_pos#0, hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).27), res: Local(HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:12: 504:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:664 ~ bstr[ec72]::search::twoway::{impl#1}::forward).28), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:27: 504:28 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:504:27: 504:28 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ bstr[ec72]::bstr::{impl#0}::split_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:118 ~ bstr[ec72]::bstr::{impl#0}::ends_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).15), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).16), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).17), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:526:44: 526:50 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).18), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:526:44: 526:50 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:526:51: 526:56 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:526:44: 526:56 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).19), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:526:59: 526:71 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).6)), segments: [PathSegment { ident: critical_pos#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).20), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:526:59: 526:71 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).25), kind: Binary(Spanned { node: Mul, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:42: 527:43 (#0) }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).26), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:26: 527:27 (#0) }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).27), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:19 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).30), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:19 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:20: 527:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:25 (#0) }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:28: 527:40 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).6)), segments: [PathSegment { ident: critical_pos#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).32), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:28: 527:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:12: 527:41 (#0) }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).33), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:44: 527:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:44: 527:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:12: 527:45 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).34), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).35), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:49: 527:55 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).37), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:49: 527:55 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:56: 527:61 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:49: 527:61 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).26), kind: Binary(Spanned { node: Sub, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:26: 527:27 (#0) }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).27), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:19 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).30), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:19 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:20: 527:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:25 (#0) }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:28: 527:40 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).6)), segments: [PathSegment { ident: critical_pos#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).32), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:28: 527:40 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:12: 527:41 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).33), kind: Lit(Spanned { node: Int(Pu128(2), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:44: 527:45 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:44: 527:45 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).27), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:19 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).30), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:19 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:20: 527:25 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:13: 527:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).31), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:28: 527:40 (#0), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).6)), segments: [PathSegment { ident: critical_pos#0, hir_id: HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).32), res: Local(HirId(DefId(0:665 ~ bstr[ec72]::search::twoway::{impl#1}::reverse).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:527:28: 527:40 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:189 ~ bstr[ec72]::bstr::{impl#0}::split_at)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:115 ~ bstr[ec72]::bstr::{impl#0}::starts_with)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1276 ~ bstr[ec72]::search::twoway::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).47), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:31: 581:32 (#0) }, Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:15: 581:30 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).40)), segments: [PathSegment { ident: candidate_start#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).49), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:15: 581:30 (#0) }, Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:33: 581:39 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).51), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:33: 581:39 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:15: 581:39 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).52), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).53), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).54), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:42: 581:48 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).55), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:42: 581:48 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:49: 581:54 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:42: 581:54 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:15: 581:30 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).40)), segments: [PathSegment { ident: candidate_start#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).49), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:15: 581:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:33: 581:39 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).51), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:581:33: 581:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:670 ~ bstr[ec72]::search::twoway::{impl#3}::cmp)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).125), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:591:40: 591:46 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).126), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:591:40: 591:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).127), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:591:49: 591:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:591:49: 591:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).139), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:593:37: 593:52 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).40)), segments: [PathSegment { ident: candidate_start#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).140), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).40)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:593:37: 593:52 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).141), kind: Field(Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).142), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:593:55: 593:61 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).36)), segments: [PathSegment { ident: suffix#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).143), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:593:55: 593:61 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:593:55: 593:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).153), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:31: 596:32 (#0) }, Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:24: 596:30 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).155), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:24: 596:30 (#0) }, Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).156), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:33: 596:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:33: 596:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:24: 596:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).157), kind: Field(Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).158), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:38: 596:44 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).36)), segments: [PathSegment { ident: suffix#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).159), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).36)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:38: 596:44 (#0) }, period#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:38: 596:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).154), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:24: 596:30 (#0), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).155), res: Local(HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).44)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:24: 596:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:667 ~ bstr[ec72]::search::twoway::{impl#2}::forward).156), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:33: 596:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:596:33: 596:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:94 ~ bstr[ec72]::bstr::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10023 ~ core[7d5a]::panicking::panic)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).42), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).43), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).44), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:613:12: 613:18 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).45), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:613:12: 613:18 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:613:19: 613:24 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:613:12: 613:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).46), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:613:28: 613:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:613:28: 613:29 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).57), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).58), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).59), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:616:35: 616:41 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).2)), segments: [PathSegment { ident: needle#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).60), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:616:35: 616:41 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:616:42: 616:47 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:616:35: 616:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).61), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:616:50: 616:51 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:616:50: 616:51 (#0) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).70), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:619:15: 619:21 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).67)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).71), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:619:15: 619:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).72), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:619:24: 619:39 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).63)), segments: [PathSegment { ident: candidate_start#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).73), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:619:24: 619:39 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:670 ~ bstr[ec72]::search::twoway::{impl#3}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).147), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:629:40: 629:46 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).67)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).148), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:629:40: 629:46 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).149), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:629:49: 629:50 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:629:49: 629:50 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).161), kind: Field(Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).162), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:631:37: 631:43 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).39)), segments: [PathSegment { ident: suffix#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).163), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:631:37: 631:43 (#0) }, pos#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:631:37: 631:47 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).164), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:631:50: 631:65 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).63)), segments: [PathSegment { ident: candidate_start#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).165), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).63)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:631:50: 631:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).175), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:31: 634:32 (#0) }, Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:24: 634:30 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).67)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).177), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:24: 634:30 (#0) }, Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).178), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:33: 634:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:33: 634:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:24: 634:34 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).179), kind: Field(Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).180), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:38: 634:44 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).39)), segments: [PathSegment { ident: suffix#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).181), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).39)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:38: 634:44 (#0) }, period#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:38: 634:51 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).176), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:24: 634:30 (#0), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).67)), segments: [PathSegment { ident: offset#0, hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).177), res: Local(HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).67)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:24: 634:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:668 ~ bstr[ec72]::search::twoway::{impl#2}::reverse).178), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:33: 634:34 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/search/twoway.rs:634:33: 634:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1283 ~ bstr[ec72]::search::twoway::{impl#9}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1286 ~ bstr[ec72]::search::twoway::{impl#11}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1295 ~ bstr[ec72]::search::twoway::{impl#12}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1298 ~ bstr[ec72]::search::twoway::{impl#14}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11181 ~ core[7d5a]::fmt::{impl#9}::write_str)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:670 ~ bstr[ec72]::search::twoway::{impl#3}::cmp)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:693 ~ bstr[ec72]::slice_index::{impl#7}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:694 ~ bstr[ec72]::slice_index::{impl#7}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:695 ~ bstr[ec72]::slice_index::{impl#7}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:696 ~ bstr[ec72]::slice_index::{impl#7}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13276 ~ core[7d5a]::slice::{impl#0}::get_unchecked_mut)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:697 ~ bstr[ec72]::slice_index::{impl#7}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:698 ~ bstr[ec72]::slice_index::{impl#7}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:701 ~ bstr[ec72]::slice_index::{impl#8}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:702 ~ bstr[ec72]::slice_index::{impl#8}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:703 ~ bstr[ec72]::slice_index::{impl#8}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:704 ~ bstr[ec72]::slice_index::{impl#8}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13276 ~ core[7d5a]::slice::{impl#0}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:705 ~ bstr[ec72]::slice_index::{impl#8}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:706 ~ bstr[ec72]::slice_index::{impl#8}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:709 ~ bstr[ec72]::slice_index::{impl#9}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:710 ~ bstr[ec72]::slice_index::{impl#9}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:711 ~ bstr[ec72]::slice_index::{impl#9}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:712 ~ bstr[ec72]::slice_index::{impl#9}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13276 ~ core[7d5a]::slice::{impl#0}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:713 ~ bstr[ec72]::slice_index::{impl#9}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:714 ~ bstr[ec72]::slice_index::{impl#9}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:717 ~ bstr[ec72]::slice_index::{impl#10}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:718 ~ bstr[ec72]::slice_index::{impl#10}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:719 ~ bstr[ec72]::slice_index::{impl#10}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:720 ~ bstr[ec72]::slice_index::{impl#10}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13276 ~ core[7d5a]::slice::{impl#0}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:721 ~ bstr[ec72]::slice_index::{impl#10}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:722 ~ bstr[ec72]::slice_index::{impl#10}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:725 ~ bstr[ec72]::slice_index::{impl#11}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:726 ~ bstr[ec72]::slice_index::{impl#11}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:727 ~ bstr[ec72]::slice_index::{impl#11}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:728 ~ bstr[ec72]::slice_index::{impl#11}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13276 ~ core[7d5a]::slice::{impl#0}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:729 ~ bstr[ec72]::slice_index::{impl#11}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:730 ~ bstr[ec72]::slice_index::{impl#11}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:733 ~ bstr[ec72]::slice_index::{impl#12}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:734 ~ bstr[ec72]::slice_index::{impl#12}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:735 ~ bstr[ec72]::slice_index::{impl#12}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:736 ~ bstr[ec72]::slice_index::{impl#12}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13276 ~ core[7d5a]::slice::{impl#0}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:737 ~ bstr[ec72]::slice_index::{impl#12}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:738 ~ bstr[ec72]::slice_index::{impl#12}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:741 ~ bstr[ec72]::slice_index::{impl#13}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:742 ~ bstr[ec72]::slice_index::{impl#13}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:9676 ~ core[7d5a]::option::{impl#0}::map)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13272 ~ core[7d5a]::slice::{impl#0}::get_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:743 ~ bstr[ec72]::slice_index::{impl#13}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:79 ~ bstr[ec72]::bstr::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:744 ~ bstr[ec72]::slice_index::{impl#13}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:81 ~ bstr[ec72]::bstr::{impl#0}::new_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13276 ~ core[7d5a]::slice::{impl#0}::get_unchecked_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:96 ~ bstr[ec72]::bstr::{impl#0}::as_bytes_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:745 ~ bstr[ec72]::slice_index::{impl#13}::index)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:746 ~ bstr[ec72]::slice_index::{impl#13}::index_mut)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1304 ~ bstr[ec72]::utf8::{impl#9}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1307 ~ bstr[ec72]::utf8::{impl#10}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11196 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field1_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:761 ~ bstr[ec72]::utf8::{impl#0}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:762 ~ bstr[ec72]::utf8::{impl#0}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:766 ~ bstr[ec72]::utf8::{impl#1}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:796 ~ bstr[ec72]::utf8::decode_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:766 ~ bstr[ec72]::utf8::{impl#1}::next).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:116:12: 116:16 (#0), res: Local(HirId(DefId(0:766 ~ bstr[ec72]::utf8::{impl#1}::next).14)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:766 ~ bstr[ec72]::utf8::{impl#1}::next).19), res: Local(HirId(DefId(0:766 ~ bstr[ec72]::utf8::{impl#1}::next).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:116:12: 116:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:766 ~ bstr[ec72]::utf8::{impl#1}::next).20), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:116:20: 116:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:116:20: 116:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:769 ~ bstr[ec72]::utf8::{impl#2}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:800 ~ bstr[ec72]::utf8::decode_last_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:769 ~ bstr[ec72]::utf8::{impl#2}::next_back).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:128:12: 128:16 (#0), res: Local(HirId(DefId(0:769 ~ bstr[ec72]::utf8::{impl#2}::next_back).14)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:769 ~ bstr[ec72]::utf8::{impl#2}::next_back).19), res: Local(HirId(DefId(0:769 ~ bstr[ec72]::utf8::{impl#2}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:128:12: 128:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:769 ~ bstr[ec72]::utf8::{impl#2}::next_back).20), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:128:20: 128:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:128:20: 128:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1315 ~ bstr[ec72]::utf8::{impl#11}::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:2919 ~ core[7d5a]::clone::Clone::clone)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1318 ~ bstr[ec72]::utf8::{impl#12}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11200 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field3_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:772 ~ bstr[ec72]::utf8::{impl#3}::new)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:93 ~ bstr[ec72]::bstr::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:773 ~ bstr[ec72]::utf8::{impl#3}::as_bstr)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:796 ~ bstr[ec72]::utf8::decode_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:198:12: 198:16 (#0), res: Local(HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).20)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).25), res: Local(HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:198:12: 198:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).26), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:198:20: 198:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:198:20: 198:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).63), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:203:22: 203:27 (#0), res: Local(HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).8)), segments: [PathSegment { ident: index#0, hir_id: HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).64), res: Local(HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).8)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:203:22: 203:27 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:203:30: 203:34 (#0), res: Local(HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).20)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).66), res: Local(HirId(DefId(0:777 ~ bstr[ec72]::utf8::{impl#4}::next).20)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:203:30: 203:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:800 ~ bstr[ec72]::utf8::decode_last_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:95 ~ bstr[ec72]::bstr::{impl#0}::as_bytes)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:211:12: 211:16 (#0), res: Local(HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).14)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).19), res: Local(HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:211:12: 211:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).20), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:211:20: 211:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:211:20: 211:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).64), kind: Field(Expr { hir_id: HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).65), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:216:35: 216:39 (#0), res: Local(HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).66), res: Local(HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:216:35: 216:39 (#0) }, reverse_index#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:216:35: 216:53 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).67), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:216:56: 216:60 (#0), res: Local(HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).14)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).68), res: Local(HirId(DefId(0:780 ~ bstr[ec72]::utf8::{impl#5}::next_back).14)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:216:56: 216:60 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1323 ~ bstr[ec72]::utf8::{impl#13}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11198 ~ core[7d5a]::fmt::{impl#9}::debug_struct_field2_finish)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:1325 ~ bstr[ec72]::utf8::{impl#14}::assert_receiver_is_total_eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).6), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:270:5: 270:23 (#179) }, Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).7), kind: Field(Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:21 (#179), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).9), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179) }, valid_up_to#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:270:5: 270:23 (#179) }, Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).10), kind: Field(Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).4)), segments: [PathSegment { ident: other#179, hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).12), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179) }, valid_up_to#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:270:5: 270:23 (#179) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:270:5: 270:23 (#179) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).13), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:271:5: 271:29 (#179) }, Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).14), kind: Field(Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:21 (#179), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).16), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179) }, error_len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:271:5: 271:29 (#179) }, Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).17), kind: Field(Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).4)), segments: [PathSegment { ident: other#179, hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).19), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179) }, error_len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:271:5: 271:29 (#179) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:271:5: 271:29 (#179) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).7), kind: Field(Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).8), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:21 (#179), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).9), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179) }, valid_up_to#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:270:5: 270:23 (#179) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).10), kind: Field(Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).11), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).4)), segments: [PathSegment { ident: other#179, hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).12), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179) }, valid_up_to#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:270:5: 270:23 (#179) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).14), kind: Field(Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).15), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:21 (#179), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).2)), segments: [PathSegment { ident: self#0, hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).16), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179) }, error_len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:271:5: 271:29 (#179) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).17), kind: Field(Expr { hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).4)), segments: [PathSegment { ident: other#179, hir_id: HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).19), res: Local(HirId(DefId(0:1328 ~ bstr[ec72]::utf8::{impl#16}::eq).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:268:21: 268:30 (#179) }, error_len#0), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:271:5: 271:29 (#179) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:782 ~ bstr[ec72]::utf8::{impl#6}::valid_up_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:783 ~ bstr[ec72]::utf8::{impl#6}::error_len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:785 ~ bstr[ec72]::utf8::{impl#7}::description)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:787 ~ bstr[ec72]::utf8::{impl#8}::fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11182 ~ core[7d5a]::fmt::{impl#9}::write_fmt)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11117 ~ core[7d5a]::fmt::{impl#2}::new_v1)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:11032 ~ core[7d5a]::fmt::rt::{impl#1}::new_display)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:788 ~ bstr[ec72]::utf8::validate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:789 ~ bstr[ec72]::utf8::validate::fast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:15: 337:16 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).15), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:15: 337:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).16), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).17), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:19: 337:24 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).2)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).19), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:19: 337:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:25: 337:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:19: 337:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).31), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:17: 343:19 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).32), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:22: 342:24 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).34), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).36), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:31 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).37), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:22: 343:24 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).39), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).40), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 343:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).41), kind: MethodCall(PathSegment { ident: map_or#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).42), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).43), kind: MethodCall(PathSegment { ident: get#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:20: 344:25 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).2)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).46), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:20: 344:25 (#0) }, [Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).47), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:31: 344:32 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:31 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).49), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:31 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).50), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:32: 344:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:32: 344:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:33 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:26: 344:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:20: 344:34 (#0) }, [Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).51), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:42: 344:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:42: 344:47 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).52), kind: Closure(Closure { def_id: DefId(0:790 ~ bstr[ec72]::utf8::validate::fast::{closure#0}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).60), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:50: 344:52 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:53: 344:53 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).56) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:49: 344:53 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:49: 344:53 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:49: 344:63 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:35: 344:64 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:20: 344:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).32), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:22: 342:24 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).34), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).36), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).37), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:22: 343:24 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).39), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).40), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:29 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).34), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).36), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).39), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).40), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9681 ~ core[7d5a]::option::{impl#0}::map_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:31 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).49), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).50), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:32: 344:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:32: 344:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:54: 344:55 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).54)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).58), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:54: 344:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).59), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:59: 344:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:59: 344:63 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ bstr[ec72]::ascii::first_non_ascii_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ bstr[ec72]::utf8::validate::step)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:351:16: 351:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).97), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:351:16: 351:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:351:25: 351:31 (#0), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), segments: [PathSegment { ident: REJECT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).99), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:351:25: 351:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:356:12: 356:17 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).133), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:356:12: 356:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:356:21: 356:27 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).135), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:356:21: 356:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).15), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:22: 373:23 (#0) }, Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:21 (#0), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), segments: [PathSegment { ident: backup#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).17), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:21 (#0) }, Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).18), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:24: 373:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:24: 373:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).19), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).20), kind: Call(Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:30: 373:50 (#0), res: Def(Fn, DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)), segments: [PathSegment { ident: is_leading_utf8_byte#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).22), res: Def(Fn, DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:30: 373:50 (#0) }, [Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).23), kind: Index(Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:51: 373:56 (#0), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).2)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).25), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:51: 373:56 (#0) }, Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:57: 373:63 (#0), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), segments: [PathSegment { ident: backup#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).27), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:57: 373:63 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:56: 373:64 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:51: 373:64 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:30: 373:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:29: 373:65 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:21 (#0), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), segments: [PathSegment { ident: backup#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).17), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).18), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:24: 373:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:24: 373:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25428 ~ core[7d5a]::num::{impl#11}::saturating_add)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10422 ~ core[7d5a]::result::{impl#0}::unwrap_err)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Trying to get func ty of defid DefId(0:792 ~ bstr[ec72]::utf8::validate::slow)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:792 ~ bstr[ec72]::utf8::validate::slow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ bstr[ec72]::utf8::validate::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:393:16: 393:21 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).42), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:393:16: 393:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:393:25: 393:31 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).44), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:393:25: 393:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:394:31: 394:32 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).18)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).51), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:394:31: 394:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).52), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:394:35: 394:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:394:35: 394:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:395:23: 395:28 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).59), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:395:23: 395:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:395:32: 395:38 (#0), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), segments: [PathSegment { ident: REJECT#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).61), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:395:32: 395:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:397:50: 397:51 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).18)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).74), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:397:50: 397:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:397:54: 397:65 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).11)), segments: [PathSegment { ident: valid_up_to#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).76), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:397:54: 397:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:401:12: 401:17 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).115), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:401:12: 401:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:401:21: 401:27 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).117), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:401:21: 401:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ bstr[ec72]::utf8::validate::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:43: 417:48 (#0), res: Local(HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).2)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).25), res: Local(HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:43: 417:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).26), kind: Cast(Expr { hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:51: 417:56 (#0), res: Local(HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).15)), segments: [PathSegment { ident: class#0, hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).28), res: Local(HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:51: 417:56 (#0) }, Ty { hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:60: 417:65 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).30), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:60: 417:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:51: 417:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:789 ~ bstr[ec72]::utf8::validate::fast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:789 ~ bstr[ec72]::utf8::validate::fast)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).14), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:15: 337:16 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).15), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:15: 337:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).16), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).17), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).18), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:19: 337:24 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).2)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).19), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:19: 337:24 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:25: 337:30 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:337:19: 337:30 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).31), kind: Binary(Spanned { node: And, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:17: 343:19 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).32), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:22: 342:24 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).34), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).36), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:31 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).37), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:22: 343:24 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).39), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).40), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 343:29 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).41), kind: MethodCall(PathSegment { ident: map_or#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).42), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).43), kind: MethodCall(PathSegment { ident: get#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).44), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).45), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:20: 344:25 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).2)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).46), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:20: 344:25 (#0) }, [Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).47), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:31: 344:32 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:31 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).49), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:31 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).50), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:32: 344:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:32: 344:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:33 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:26: 344:34 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:20: 344:34 (#0) }, [Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).51), kind: Lit(Spanned { node: Bool(false), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:42: 344:47 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:42: 344:47 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).52), kind: Closure(Closure { def_id: DefId(0:790 ~ bstr[ec72]::utf8::validate::fast::{closure#0}), binder: Default, constness: NotConst, capture_clause: Ref, bound_generic_params: [], fn_decl: FnDecl { inputs: [Ty { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).60), kind: Infer, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:50: 344:52 (#0) }], output: DefaultReturn(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:53: 344:53 (#0)), c_variadic: false, implicit_self: None, lifetime_elision_allowed: false }, body: BodyId { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).56) }, fn_decl_span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:49: 344:53 (#0), fn_arg_span: Some(/Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:49: 344:53 (#0)), kind: Closure }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:49: 344:63 (#0) }], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:35: 344:64 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:20: 344:64 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).32), kind: Binary(Spanned { node: Eq, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:22: 342:24 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).34), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).36), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).37), kind: Binary(Spanned { node: Le, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:22: 343:24 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).39), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0) }, Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).40), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:29 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).34), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:16: 342:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).35), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).36), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:342:25: 342:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).39), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).28)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:20: 343:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).40), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:343:25: 343:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:9681 ~ core[7d5a]::option::{impl#0}::map_or)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).48), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:31 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).49), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:30: 344:31 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).50), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:32: 344:33 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:32: 344:33 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).57), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:54: 344:55 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).54)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).58), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).54)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:54: 344:55 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).59), kind: Lit(Spanned { node: Int(Pu128(127), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:59: 344:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:344:59: 344:63 (#0) }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:40 ~ bstr[ec72]::ascii::first_non_ascii_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ bstr[ec72]::utf8::validate::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:351:16: 351:21 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).97), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:351:16: 351:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).98), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:351:25: 351:31 (#0), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), segments: [PathSegment { ident: REJECT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).99), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:351:25: 351:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).132), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:356:12: 356:17 (#0), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).133), res: Local(HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:356:12: 356:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).134), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:356:21: 356:27 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:789 ~ bstr[ec72]::utf8::validate::fast).135), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:356:21: 356:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] [WARN] Silently failed to get type of local var
[DEBUG] Trying to get func ty of defid DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).15), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:22: 373:23 (#0) }, Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:21 (#0), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), segments: [PathSegment { ident: backup#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).17), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:21 (#0) }, Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).18), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:24: 373:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:24: 373:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:25 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).19), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).20), kind: Call(Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:30: 373:50 (#0), res: Def(Fn, DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)), segments: [PathSegment { ident: is_leading_utf8_byte#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).22), res: Def(Fn, DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:30: 373:50 (#0) }, [Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).23), kind: Index(Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:51: 373:56 (#0), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).2)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).25), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:51: 373:56 (#0) }, Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).26), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:57: 373:63 (#0), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), segments: [PathSegment { ident: backup#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).27), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:57: 373:63 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:56: 373:64 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:51: 373:64 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:30: 373:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:29: 373:65 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).16), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:21 (#0), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), segments: [PathSegment { ident: backup#0, hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).17), res: Local(HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).12)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:15: 373:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:791 ~ bstr[ec72]::utf8::validate::find_valid_up_to).18), kind: Lit(Spanned { node: Int(Pu128(0), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:24: 373:25 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:373:24: 373:25 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3014 ~ core[7d5a]::cmp::min)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25428 ~ core[7d5a]::num::{impl#11}::saturating_add)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:10422 ~ core[7d5a]::result::{impl#0}::unwrap_err)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:792 ~ bstr[ec72]::utf8::validate::slow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:792 ~ bstr[ec72]::utf8::validate::slow)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:8925 ~ core[7d5a]::iter::traits::iterator::Iterator::enumerate)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13287 ~ core[7d5a]::slice::{impl#0}::iter)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ bstr[ec72]::utf8::validate::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).41), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:393:16: 393:21 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).42), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:393:16: 393:21 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).43), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:393:25: 393:31 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).44), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:393:25: 393:31 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).50), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:394:31: 394:32 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).18)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).51), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:394:31: 394:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).52), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:394:35: 394:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:394:35: 394:36 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:395:23: 395:28 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).59), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:395:23: 395:28 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).60), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:395:32: 395:38 (#0), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), segments: [PathSegment { ident: REJECT#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).61), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:395:32: 395:38 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).73), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:397:50: 397:51 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).18)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).74), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).18)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:397:50: 397:51 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).75), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:397:54: 397:65 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).11)), segments: [PathSegment { ident: valid_up_to#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).76), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).11)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:397:54: 397:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).114), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:401:12: 401:17 (#0), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).115), res: Local(HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).7)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:401:12: 401:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).116), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:401:21: 401:27 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:792 ~ bstr[ec72]::utf8::validate::slow).117), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:401:21: 401:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:793 ~ bstr[ec72]::utf8::validate::step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13274 ~ core[7d5a]::slice::{impl#0}::get_unchecked)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).24), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:43: 417:48 (#0), res: Local(HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).2)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).25), res: Local(HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:43: 417:48 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).26), kind: Cast(Expr { hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).27), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:51: 417:56 (#0), res: Local(HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).15)), segments: [PathSegment { ident: class#0, hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).28), res: Local(HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).15)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:51: 417:56 (#0) }, Ty { hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:60: 417:65 (#0), res: PrimTy(Uint(Usize)), segments: [PathSegment { ident: usize#0, hir_id: HirId(DefId(0:793 ~ bstr[ec72]::utf8::validate::step).30), res: PrimTy(Uint(Usize)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:60: 417:65 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:417:51: 417:65 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:794 ~ bstr[ec72]::utf8::decode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13270 ~ core[7d5a]::slice::{impl#0}::get)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).62), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:479:11: 479:12 (#0), res: Local(HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).58)), segments: [PathSegment { ident: i#0, hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).63), res: Local(HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).58)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:479:11: 479:12 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).64), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).65), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).66), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:479:15: 479:20 (#0), res: Local(HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).9)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).67), res: Local(HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:479:15: 479:20 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:479:21: 479:26 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:479:15: 479:26 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:802 ~ bstr[ec72]::utf8::decode_step)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).91), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:483:12: 483:17 (#0), res: Local(HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).56)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).92), res: Local(HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:483:12: 483:17 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).93), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:483:21: 483:27 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).94), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:483:21: 483:27 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:5375 ~ core[7d5a]::char::from_u32_unchecked)
[DEBUG] >> NOT FOUND! Getting extern def
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).121), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:488:19: 488:24 (#0), res: Local(HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).56)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).122), res: Local(HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).56)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:488:19: 488:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).123), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:488:28: 488:34 (#0), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), segments: [PathSegment { ident: REJECT#0, hir_id: HirId(DefId(0:794 ~ bstr[ec72]::utf8::decode).124), res: Def(Const, DefId(0:755 ~ bstr[ec72]::utf8::REJECT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:488:28: 488:34 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:3024 ~ core[7d5a]::cmp::max)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:796 ~ bstr[ec72]::utf8::decode_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:794 ~ bstr[ec72]::utf8::decode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:798 ~ bstr[ec72]::utf8::decode_last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:3157 ~ core[7d5a]::convert::AsRef::as_ref)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13229 ~ core[7d5a]::slice::{impl#0}::is_empty)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).27), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).28), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).29), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:605:21: 605:26 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).9)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).30), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:605:21: 605:26 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:605:27: 605:32 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:605:21: 605:32 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).31), kind: Lit(Spanned { node: Int(Pu128(1), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:605:35: 605:36 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:605:35: 605:36 (#0) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:25430 ~ core[7d5a]::num::{impl#11}::saturating_sub)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).46), kind: Binary(Spanned { node: Gt, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:17: 607:18 (#0) }, Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:11: 607:16 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).48), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:11: 607:16 (#0) }, Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:19: 607:24 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).43)), segments: [PathSegment { ident: limit#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).50), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:19: 607:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:11: 607:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).51), kind: Unary(Not, Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).52), kind: Call(Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:29: 607:49 (#0), res: Def(Fn, DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)), segments: [PathSegment { ident: is_leading_utf8_byte#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).54), res: Def(Fn, DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:29: 607:49 (#0) }, [Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).55), kind: Index(Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).56), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:50: 607:55 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).9)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).57), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:50: 607:55 (#0) }, Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:56: 607:61 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).59), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:56: 607:61 (#0) }, /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:55: 607:62 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:50: 607:62 (#0) }]), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:29: 607:63 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:28: 607:63 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).47), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:11: 607:16 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).48), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:11: 607:16 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).49), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:19: 607:24 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).43)), segments: [PathSegment { ident: limit#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).50), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).43)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:607:19: 607:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:794 ~ bstr[ec72]::utf8::decode)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).93), kind: Binary(Spanned { node: Add, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:14: 614:15 (#0) }, Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:8: 614:13 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).95), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:8: 614:13 (#0) }, Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:16: 614:20 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).89)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).97), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).89)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:16: 614:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:8: 614:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).98), kind: MethodCall(PathSegment { ident: len#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).99), res: Err, args: None, infer_args: true }, Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).100), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:24: 614:29 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).9)), segments: [PathSegment { ident: slice#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).101), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).9)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:24: 614:29 (#0) }, [], /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:30: 614:35 (#0)), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:24: 614:35 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).94), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:8: 614:13 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), segments: [PathSegment { ident: start#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).95), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).33)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:8: 614:13 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).96), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:16: 614:20 (#0), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).89)), segments: [PathSegment { ident: size#0, hir_id: HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).97), res: Local(HirId(DefId(0:798 ~ bstr[ec72]::utf8::decode_last).89)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:614:16: 614:20 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(3:13228 ~ core[7d5a]::slice::{impl#0}::len)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:800 ~ bstr[ec72]::utf8::decode_last_lossy)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Trying to get func ty of defid DefId(0:798 ~ bstr[ec72]::utf8::decode_last)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Done checking call expression with ret ty: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:802 ~ bstr[ec72]::utf8::decode_step)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }, Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).20), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).21), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:678:9: 678:14 (#0), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).2)), segments: [PathSegment { ident: state#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).22), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:678:9: 678:14 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:678:8: 678:14 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).23), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:678:18: 678:24 (#0), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), segments: [PathSegment { ident: ACCEPT#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).24), res: Def(Const, DefId(0:754 ~ bstr[ec72]::utf8::ACCEPT)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:678:18: 678:24 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Specific({"bstr"}), Universal), kind: Infer }
[DEBUG] Checking `if` influenced by Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).31), kind: Binary(Spanned { node: Shr, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:21: 679:23 (#0) }, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).32), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:16: 679:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:16: 679:20 (#0) }, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:24: 679:29 (#0), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).17)), segments: [PathSegment { ident: class#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).34), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:24: 679:29 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:15: 679:30 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).35), kind: Cast(Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).36), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:34: 679:35 (#0), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).6)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).37), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:34: 679:35 (#0) }, Ty { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).38), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:39: 679:42 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).39), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:39: 679:42 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:33: 679:43 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).32), kind: Lit(Spanned { node: Int(Pu128(255), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:16: 679:20 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:16: 679:20 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).33), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:24: 679:29 (#0), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).17)), segments: [PathSegment { ident: class#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).34), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).17)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:679:24: 679:29 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).49), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:25: 681:26 (#0) }, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).50), kind: Cast(Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:16: 681:17 (#0), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).6)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).52), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:16: 681:17 (#0) }, Ty { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:21: 681:24 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).54), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:21: 681:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:16: 681:24 (#0) }, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).55), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:27: 681:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:27: 681:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:15: 681:36 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).56), kind: Binary(Spanned { node: Shl, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:44: 681:46 (#0) }, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).57), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:41: 681:43 (#0), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).4)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).59), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:41: 681:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:40: 681:43 (#0) }, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).60), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:47: 681:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:47: 681:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:39: 681:49 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).50), kind: Cast(Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).51), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:16: 681:17 (#0), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).6)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).52), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).6)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:16: 681:17 (#0) }, Ty { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).53), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:21: 681:24 (#0), res: PrimTy(Uint(U32)), segments: [PathSegment { ident: u32#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).54), res: PrimTy(Uint(U32)), args: None, infer_args: false }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:21: 681:24 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:16: 681:24 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).55), kind: Lit(Spanned { node: Int(Pu128(63), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:27: 681:35 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:27: 681:35 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).57), kind: Unary(Deref, Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).58), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:41: 681:43 (#0), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).4)), segments: [PathSegment { ident: cp#0, hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).59), res: Local(HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).4)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:41: 681:43 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:40: 681:43 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:802 ~ bstr[ec72]::utf8::decode_step).60), kind: Lit(Spanned { node: Int(Pu128(6), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:47: 681:48 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:681:47: 681:48 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG] Trying to get func ty of defid DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte)
[DEBUG] >> FOUND IT! It's Ty { property: FlowPair(Universal, Universal), kind: Fn([Ty { property: FlowPair(Universal, Universal), kind: Infer }], Ty { property: FlowPair(Universal, Universal), kind: Infer }) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).4), kind: Binary(Spanned { node: BitAnd, span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:8: 690:9 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:6: 690:7 (#0), res: Local(HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).2)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).6), res: Local(HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:6: 690:7 (#0) }, Expr { hir_id: HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).7), kind: Lit(Spanned { node: Int(Pu128(192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:10: 690:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:10: 690:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:5: 690:22 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).8), kind: Lit(Spanned { node: Int(Pu128(128), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:26: 690:37 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:26: 690:37 (#0) }
[DEBUG] Checking binary expression with...
[DEBUG] > LHS: Expr { hir_id: HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).5), kind: Path(Resolved(None, Path { span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:6: 690:7 (#0), res: Local(HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).2)), segments: [PathSegment { ident: b#0, hir_id: HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).6), res: Local(HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).2)), args: None, infer_args: true }] })), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:6: 690:7 (#0) }
[DEBUG] > RHS: Expr { hir_id: HirId(DefId(0:803 ~ bstr[ec72]::utf8::is_leading_utf8_byte).7), kind: Lit(Spanned { node: Int(Pu128(192), Unsuffixed), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:10: 690:21 (#0) }), span: /Users/georgeberdovskiy/.cargo/registry/src/index.crates.io-6f17d22bba15001f/bstr-0.1.4/src/utf8.rs:690:10: 690:21 (#0) }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > LHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
[DEBUG]   > RHS Type is: Ty { property: FlowPair(Universal, Universal), kind: Infer }
